
C:\Users\admin\AppData\Local\Temp\arduino\sketches\7C85B34F86C5F43AA0B8D1064BFD45B9/MarketForge_Control.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__dtors_end>
       4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
       8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
       c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      10:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      14:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      18:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      1c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      20:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      24:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      28:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      2c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      30:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      34:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      38:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      3c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      40:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      44:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      48:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      4c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      50:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      54:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      58:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      5c:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_23>
      60:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      64:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      68:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      6c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      70:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      74:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      78:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      7c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      80:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      84:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      88:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      8c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      90:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      94:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      98:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      9c:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__vector_39>
      a0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      a4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      a8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      ac:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      b0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      b4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      b8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      bc:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      c0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      c4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      c8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      cc:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      d0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      d4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
      d8:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_54>
      dc:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_55>
      e0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 36 02 	jmp	0x46c	; 0x46c <turnOffPWM+0x6c>
      e8:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <_GLOBAL__sub_D_tempSensor>
      ec:	0c 94 2c 02 	jmp	0x458	; 0x458 <turnOffPWM+0x58>
      f0:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <turnOffPWM+0xc0>
      f4:	0c 94 32 02 	jmp	0x464	; 0x464 <turnOffPWM+0x64>
      f8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <turnOffPWM+0x3c>
      fc:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <turnOffPWM+0xc8>
     100:	0c 94 3c 02 	jmp	0x478	; 0x478 <turnOffPWM+0x78>
     104:	0c 94 ef 04 	jmp	0x9de	; 0x9de <HardwareSerial::availableForWrite()>
     108:	0c 94 20 05 	jmp	0xa40	; 0xa40 <HardwareSerial::available()>
     10c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <turnOffPWM+0xb0>
     110:	0c 94 24 02 	jmp	0x448	; 0x448 <turnOffPWM+0x48>
     114:	0c 94 4a 02 	jmp	0x494	; 0x494 <turnOffPWM+0x94>
     118:	0c 94 40 02 	jmp	0x480	; 0x480 <turnOffPWM+0x80>
     11c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <HardwareSerial::read()>
     120:	0c 94 58 05 	jmp	0xab0	; 0xab0 <HardwareSerial::write(unsigned char)>
     124:	0c 94 28 02 	jmp	0x450	; 0x450 <turnOffPWM+0x50>
     128:	0c 94 12 05 	jmp	0xa24	; 0xa24 <HardwareSerial::peek()>
     12c:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <turnOffPWM+0xa4>
     130:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <HardwareSerial::flush()>
     134:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2445>
     138:	0c 94 44 02 	jmp	0x488	; 0x488 <turnOffPWM+0x88>
     13c:	0c 94 4e 02 	jmp	0x49c	; 0x49c <turnOffPWM+0x9c>
     140:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <turnOffPWM+0xc6>
     144:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <turnOffPWM+0xb8>
     148:	0c 94 c2 04 	jmp	0x984	; 0x984 <Print::write(unsigned char const*, unsigned int)>

0000014c <__trampolines_end>:
__trampolines_end():
     14c:	00 40       	sbci	r16, 0x00	; 0
     14e:	7a 10       	cpse	r7, r10
     150:	f3 5a       	subi	r31, 0xA3	; 163
     152:	00 a0       	ldd	r0, Z+32	; 0x20
     154:	72 4e       	sbci	r23, 0xE2	; 226
     156:	18 09       	sbc	r17, r8
     158:	00 10       	cpse	r0, r0
     15a:	a5 d4       	rcall	.+2378   	; 0xaa6 <HardwareSerial::_tx_udr_empty_irq()+0x3a>
     15c:	e8 00       	.word	0x00e8	; ????
     15e:	00 e8       	ldi	r16, 0x80	; 128
     160:	76 48       	sbci	r23, 0x86	; 134
     162:	17 00       	.word	0x0017	; ????
     164:	00 e4       	ldi	r16, 0x40	; 64
     166:	0b 54       	subi	r16, 0x4B	; 75
     168:	02 00       	.word	0x0002	; ????
     16a:	00 ca       	rjmp	.-3072   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     16c:	9a 3b       	cpi	r25, 0xBA	; 186
     16e:	00 00       	nop
     170:	00 e1       	ldi	r16, 0x10	; 16
     172:	f5 05       	cpc	r31, r5
     174:	00 00       	nop
     176:	80 96       	adiw	r24, 0x20	; 32
     178:	98 00       	.word	0x0098	; ????
     17a:	00 00       	nop
     17c:	40 42       	sbci	r20, 0x20	; 32
     17e:	0f 00       	.word	0x000f	; ????
     180:	00 00       	nop
     182:	a0 86       	std	Z+8, r10	; 0x08
     184:	01 00       	.word	0x0001	; ????
     186:	00 00       	nop
     188:	10 27       	eor	r17, r16
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	e8 03       	fmulsu	r22, r16
     190:	00 00       	nop
     192:	00 00       	nop
     194:	64 00       	.word	0x0064	; ????
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	0a 00       	.word	0x000a	; ????
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	01 00       	.word	0x0001	; ????
     1a2:	00 00       	nop
     1a4:	00 00       	nop
     1a6:	2c 76       	andi	r18, 0x6C	; 108
     1a8:	d8 88       	ldd	r13, Y+16	; 0x10
     1aa:	dc 67       	ori	r29, 0x7C	; 124
     1ac:	4f 08       	sbc	r4, r15
     1ae:	23 df       	rcall	.-442    	; 0xfffffff6 <__eeprom_end+0xff7efff6>
     1b0:	c1 df       	rcall	.-126    	; 0x134 <__trampolines_start+0x50>
     1b2:	ae 59       	subi	r26, 0x9E	; 158
     1b4:	e1 b1       	in	r30, 0x01	; 1
     1b6:	b7 96       	adiw	r30, 0x27	; 39
     1b8:	e5 e3       	ldi	r30, 0x35	; 53
     1ba:	e4 53       	subi	r30, 0x34	; 52
     1bc:	c6 3a       	cpi	r28, 0xA6	; 166
     1be:	e6 51       	subi	r30, 0x16	; 22
     1c0:	99 76       	andi	r25, 0x69	; 105
     1c2:	96 e8       	ldi	r25, 0x86	; 134
     1c4:	e6 c2       	rjmp	.+1484   	; 0x792 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x1b4>
     1c6:	84 26       	eor	r8, r20
     1c8:	eb 89       	ldd	r30, Y+19	; 0x13
     1ca:	8c 9b       	sbis	0x11, 4	; 17
     1cc:	62 ed       	ldi	r22, 0xD2	; 210
     1ce:	40 7c       	andi	r20, 0xC0	; 192
     1d0:	6f fc       	.word	0xfc6f	; ????
     1d2:	ef bc       	out	0x2f, r14	; 47
     1d4:	9c 9f       	mul	r25, r28
     1d6:	40 f2       	brcs	.-112    	; 0x168 <__trampolines_end+0x1c>
     1d8:	ba a5       	ldd	r27, Y+42	; 0x2a
     1da:	6f a5       	ldd	r22, Y+47	; 0x2f
     1dc:	f4 90       	lpm	r15, Z
     1de:	05 5a       	subi	r16, 0xA5	; 165
     1e0:	2a f7       	brpl	.-54     	; 0x1ac <__trampolines_end+0x60>
     1e2:	5c 93       	st	X, r21
     1e4:	6b 6c       	ori	r22, 0xCB	; 203
     1e6:	f9 67       	ori	r31, 0x79	; 121
     1e8:	6d c1       	rjmp	.+730    	; 0x4c4 <turnOffPWM+0xc4>
     1ea:	1b fc       	.word	0xfc1b	; ????
     1ec:	e0 e4       	ldi	r30, 0x40	; 64
     1ee:	0d 47       	sbci	r16, 0x7D	; 125
     1f0:	fe f5       	brtc	.+126    	; 0x270 <digital_pin_to_timer_PGM+0x10>
     1f2:	20 e6       	ldi	r18, 0x60	; 96
     1f4:	b5 00       	.word	0x00b5	; ????
     1f6:	d0 ed       	ldi	r29, 0xD0	; 208
     1f8:	90 2e       	mov	r9, r16
     1fa:	03 00       	.word	0x0003	; ????
     1fc:	94 35       	cpi	r25, 0x54	; 84
     1fe:	77 05       	cpc	r23, r7
     200:	00 80       	ld	r0, Z
     202:	84 1e       	adc	r8, r20
     204:	08 00       	.word	0x0008	; ????
     206:	00 20       	and	r0, r0
     208:	4e 0a       	sbc	r4, r30
     20a:	00 00       	nop
     20c:	00 c8       	rjmp	.-4096   	; 0xfffff20e <__eeprom_end+0xff7ef20e>
     20e:	0c 33       	cpi	r16, 0x3C	; 60
     210:	33 33       	cpi	r19, 0x33	; 51
     212:	33 0f       	add	r19, r19
     214:	98 6e       	ori	r25, 0xE8	; 232
     216:	12 83       	std	Z+2, r17	; 0x02
     218:	11 41       	sbci	r17, 0x11	; 17
     21a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     21c:	21 14       	cp	r2, r1
     21e:	89 3b       	cpi	r24, 0xB9	; 185
     220:	e6 55       	subi	r30, 0x56	; 86
     222:	16 cf       	rjmp	.-468    	; 0x50 <__SREG__+0x11>
     224:	fe e6       	ldi	r31, 0x6E	; 110
     226:	db 18       	sub	r13, r11
     228:	d1 84       	ldd	r13, Z+9	; 0x09
     22a:	4b 38       	cpi	r20, 0x8B	; 139
     22c:	1b f7       	brvc	.-58     	; 0x1f4 <__trampolines_end+0xa8>
     22e:	7c 1d       	adc	r23, r12
     230:	90 1d       	adc	r25, r0
     232:	a4 bb       	out	0x14, r26	; 20
     234:	e4 24       	eor	r14, r4
     236:	20 32       	cpi	r18, 0x20	; 32
     238:	84 72       	andi	r24, 0x24	; 36
     23a:	5e 22       	and	r5, r30
     23c:	81 00       	.word	0x0081	; ????
     23e:	c9 f1       	breq	.+114    	; 0x2b2 <digital_pin_to_timer_PGM+0x52>
     240:	24 ec       	ldi	r18, 0xC4	; 196
     242:	a1 e5       	ldi	r26, 0x51	; 81
     244:	3d 27       	eor	r19, r29

00000246 <port_to_mode_PGM>:
     246:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     256:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000260 <digital_pin_to_timer_PGM>:
     260:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
     28c:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002b6 <port_to_input_PGM>:
     2b6:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2c6:	00 01 00 00 03 01 06 01 09 01                       ..........

000002d0 <digital_pin_to_bit_mask_PGM>:
     2d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     2f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     300:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     310:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     320:	04 08 10 20 40 80                                   ... @.

00000326 <port_to_output_PGM>:
     326:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     336:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000340 <digital_pin_to_port_PGM>:
     340:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     350:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     360:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     370:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     380:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     390:	0a 0a 0a 0a 0a 0a                                   ......

00000396 <__ctors_start>:
__ctors_start():
     396:	bb 08       	sbc	r11, r11

00000398 <__ctors_end>:
__dtors_start():
     398:	bd 0c       	add	r11, r13

0000039a <__dtors_end>:
__dtors_end():
     39a:	11 24       	eor	r1, r1
     39c:	1f be       	out	0x3f, r1	; 63
     39e:	cf ef       	ldi	r28, 0xFF	; 255
     3a0:	d1 e2       	ldi	r29, 0x21	; 33
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	0c bf       	out	0x3c, r16	; 60

000003aa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     3aa:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     3ae:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     3b0:	e4 e9       	ldi	r30, 0x94	; 148
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     3b2:	fb e2       	ldi	r31, 0x2B	; 43
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     3b4:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     3b6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     3ba:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     3bc:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     3be:	ae 33       	cpi	r26, 0x3E	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     3c0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     3c4:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     3c6:	ae e3       	ldi	r26, 0x3E	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     3c8:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     3ce:	ae 36       	cpi	r26, 0x6E	; 110
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     3d0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>

000003d4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     3d4:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     3d6:	cc ec       	ldi	r28, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     3d8:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     3da:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     3de:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     3e0:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     3e2:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     3e4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3e6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3ea:	cb 3c       	cpi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3ec:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3ee:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3f0:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3f2:	a9 f7       	brne	.-22     	; 0x3de <__do_global_ctors+0xa>
     3f4:	0e 94 ae 09 	call	0x135c	; 0x135c <main>
     3f8:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__do_global_dtors>

000003fc <__bad_interrupt>:
__vector_38():
     3fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000400 <turnOffPWM>:
turnOffPWM():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     400:	82 50       	subi	r24, 0x02	; 2
     402:	82 31       	cpi	r24, 0x12	; 18
     404:	08 f0       	brcs	.+2      	; 0x408 <turnOffPWM+0x8>
     406:	5f c0       	rjmp	.+190    	; 0x4c6 <turnOffPWM+0xc6>
     408:	e8 2f       	mov	r30, r24
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	88 27       	eor	r24, r24
     40e:	e4 5f       	subi	r30, 0xF4	; 244
     410:	fd 4f       	sbci	r31, 0xFD	; 253
     412:	8f 4f       	sbci	r24, 0xFF	; 255
     414:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__tablejump2__>
     418:	60 02       	muls	r22, r16
     41a:	64 02       	muls	r22, r20
     41c:	1e 02       	muls	r17, r30
     41e:	24 02       	muls	r18, r20
     420:	28 02       	muls	r18, r24
     422:	63 02       	muls	r22, r19
     424:	2c 02       	muls	r18, r28
     426:	32 02       	muls	r19, r18
     428:	36 02       	muls	r19, r22
     42a:	3c 02       	muls	r19, r28
     42c:	40 02       	muls	r20, r16
     42e:	44 02       	muls	r20, r20
     430:	4a 02       	muls	r20, r26
     432:	4e 02       	muls	r20, r30
     434:	63 02       	muls	r22, r19
     436:	52 02       	muls	r21, r18
     438:	58 02       	muls	r21, r24
     43a:	5c 02       	muls	r21, r28
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     43c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     440:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     442:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     446:	08 95       	ret
     448:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     44c:	8f 7d       	andi	r24, 0xDF	; 223
     44e:	f9 cf       	rjmp	.-14     	; 0x442 <turnOffPWM+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     450:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     454:	87 7f       	andi	r24, 0xF7	; 247
     456:	f5 cf       	rjmp	.-22     	; 0x442 <turnOffPWM+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     458:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     45c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     45e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     462:	08 95       	ret
     464:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     468:	8f 7d       	andi	r24, 0xDF	; 223
     46a:	f9 cf       	rjmp	.-14     	; 0x45e <turnOffPWM+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     46c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     470:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     472:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     476:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     478:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     47c:	8f 7d       	andi	r24, 0xDF	; 223
     47e:	f9 cf       	rjmp	.-14     	; 0x472 <turnOffPWM+0x72>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     480:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	f5 cf       	rjmp	.-22     	; 0x472 <turnOffPWM+0x72>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     488:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     48c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     48e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     492:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     494:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     498:	8f 7d       	andi	r24, 0xDF	; 223
     49a:	f9 cf       	rjmp	.-14     	; 0x48e <turnOffPWM+0x8e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     49c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     4a0:	87 7f       	andi	r24, 0xF7	; 247
     4a2:	f5 cf       	rjmp	.-22     	; 0x48e <turnOffPWM+0x8e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
     4a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4a8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     4aa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4ae:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
     4b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4b4:	8f 7d       	andi	r24, 0xDF	; 223
     4b6:	f9 cf       	rjmp	.-14     	; 0x4aa <turnOffPWM+0xaa>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     4b8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4bc:	87 7f       	andi	r24, 0xF7	; 247
     4be:	f5 cf       	rjmp	.-22     	; 0x4aa <turnOffPWM+0xaa>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     4c0:	84 b5       	in	r24, 0x24	; 36
     4c2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     4c4:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     4c6:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     4c8:	84 b5       	in	r24, 0x24	; 36
     4ca:	8f 7d       	andi	r24, 0xDF	; 223
     4cc:	fb cf       	rjmp	.-10     	; 0x4c4 <turnOffPWM+0xc4>

000004ce <digitalWrite>:
digitalWrite():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     4d4:	28 2f       	mov	r18, r24
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	e0 5a       	subi	r30, 0xA0	; 160
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     4e0:	f9 01       	movw	r30, r18
     4e2:	e0 53       	subi	r30, 0x30	; 48
     4e4:	fd 4f       	sbci	r31, 0xFD	; 253
     4e6:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     4e8:	f9 01       	movw	r30, r18
     4ea:	e0 5c       	subi	r30, 0xC0	; 192
     4ec:	fc 4f       	sbci	r31, 0xFC	; 252
     4ee:	c4 91       	lpm	r28, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     4f0:	cc 23       	and	r28, r28
     4f2:	a9 f0       	breq	.+42     	; 0x51e <digitalWrite+0x50>
     4f4:	16 2f       	mov	r17, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     4f6:	81 11       	cpse	r24, r1
     4f8:	0e 94 00 02 	call	0x400	; 0x400 <turnOffPWM>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     4fc:	ec 2f       	mov	r30, r28
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	ea 5d       	subi	r30, 0xDA	; 218
     506:	fc 4f       	sbci	r31, 0xFC	; 252
     508:	a5 91       	lpm	r26, Z+
     50a:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     50c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     50e:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     510:	ec 91       	ld	r30, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     512:	11 11       	cpse	r17, r1
     514:	08 c0       	rjmp	.+16     	; 0x526 <digitalWrite+0x58>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     516:	d0 95       	com	r29
     518:	de 23       	and	r29, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     51a:	dc 93       	st	X, r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     51c:	8f bf       	out	0x3f, r24	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     526:	de 2b       	or	r29, r30
     528:	f8 cf       	rjmp	.-16     	; 0x51a <digitalWrite+0x4c>

0000052a <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.25]>:
_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv.constprop.25():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:284
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
     52a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <tempSensor>
     52e:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <tempSensor+0x1>
     532:	89 2b       	or	r24, r25
     534:	41 f0       	breq	.+16     	; 0x546 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.25]+0x1c>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:286
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
     536:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <tempSensor+0x2>
     53a:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <tempSensor+0x3>
     53e:	90 81       	ld	r25, Z
     540:	81 81       	ldd	r24, Z+1	; 0x01
beginTransaction():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     542:	9c bd       	out	0x2c, r25	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     544:	8d bd       	out	0x2d, r24	; 45
setChipSelect():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:307
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
     546:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <tempSensor+0xb>
     54a:	8f 3f       	cpi	r24, 0xFF	; 255
     54c:	19 f0       	breq	.+6      	; 0x554 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.25]+0x2a>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:308
    digitalWrite(_cs, value);
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <digitalWrite>
_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv.constprop.25():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:321
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
  beginTransaction();
  setChipSelect(LOW);
}
     554:	08 95       	ret

00000556 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.32]>:
_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv.constprop.32():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:307
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
     556:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <tempSensor+0xb>
     55a:	8f 3f       	cpi	r24, 0xFF	; 255
     55c:	19 f0       	breq	.+6      	; 0x564 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.32]+0xe>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:308
    digitalWrite(_cs, value);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:330
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
  setChipSelect(HIGH);
  endTransaction();
}
     564:	08 95       	ret

00000566 <pinMode>:
pinMode():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	fc 01       	movw	r30, r24
     56e:	e0 53       	subi	r30, 0x30	; 48
     570:	fd 4f       	sbci	r31, 0xFD	; 253
     572:	24 91       	lpm	r18, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     574:	80 5c       	subi	r24, 0xC0	; 192
     576:	9c 4f       	sbci	r25, 0xFC	; 252
     578:	fc 01       	movw	r30, r24
     57a:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     57c:	88 23       	and	r24, r24
     57e:	d1 f0       	breq	.+52     	; 0x5b4 <pinMode+0x4e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	fc 01       	movw	r30, r24
     588:	ea 5b       	subi	r30, 0xBA	; 186
     58a:	fd 4f       	sbci	r31, 0xFD	; 253
     58c:	a5 91       	lpm	r26, Z+
     58e:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     590:	fc 01       	movw	r30, r24
     592:	ea 5d       	subi	r30, 0xDA	; 218
     594:	fc 4f       	sbci	r31, 0xFC	; 252
     596:	c5 91       	lpm	r28, Z+
     598:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     59a:	61 11       	cpse	r22, r1
     59c:	0e c0       	rjmp	.+28     	; 0x5ba <pinMode+0x54>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     59e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     5a0:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     5a2:	8c 91       	ld	r24, X
     5a4:	e2 2f       	mov	r30, r18
     5a6:	e0 95       	com	r30
     5a8:	8e 23       	and	r24, r30
     5aa:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     5ac:	28 81       	ld	r18, Y
     5ae:	e2 23       	and	r30, r18
     5b0:	e8 83       	st	Y, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     5b2:	9f bf       	out	0x3f, r25	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     5ba:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     5bc:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     5be:	ec 91       	ld	r30, X
     5c0:	e2 2b       	or	r30, r18
     5c2:	ec 93       	st	X, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     5c4:	8f bf       	out	0x3f, r24	; 63
     5c6:	f6 cf       	rjmp	.-20     	; 0x5b4 <pinMode+0x4e>

000005c8 <delayMicroseconds>:
delayMicroseconds():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	38 f0       	brcs	.+14     	; 0x5dc <delayMicroseconds+0x14>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     5d6:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <delayMicroseconds+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     5dc:	08 95       	ret

000005de <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]>:
_ZN18Adafruit_SPIDevice8transferEh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:273
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:135
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
  //
  // HARDWARE SPI
  //
  if (_spi) {
     5ee:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <tempSensor>
     5f2:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <tempSensor+0x1>
     5f6:	23 2b       	or	r18, r19
     5f8:	79 f0       	breq	.+30     	; 0x618 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:250
    return out.val;
  }
  inline static void transfer(void *buf, size_t count) {
    if (count == 0) return;
    uint8_t *p = (uint8_t *)buf;
    SPDR = *p;
     5fa:	8e bd       	out	0x2e, r24	; 46
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:258
      while (!(SPSR & _BV(SPIF))) ;
      uint8_t in = SPDR;
      SPDR = out;
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
     5fc:	0d b4       	in	r0, 0x2d	; 45
     5fe:	07 fe       	sbrs	r0, 7
     600:	fd cf       	rjmp	.-6      	; 0x5fc <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x1e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:259
    *p = SPDR;
     602:	de b4       	in	r13, 0x2e	; 46
_ZN18Adafruit_SPIDevice8transferEh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:277
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
  uint8_t data = send;
  transfer(&data, 1);
  return data;
}
     604:	8d 2d       	mov	r24, r13
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	08 95       	ret
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:154

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
     618:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <tempSensor+0x8>
     61c:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <tempSensor+0x9>
_ZN18Adafruit_SPIDevice8transferEh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:155
    startbit = 0x1;
     620:	c1 e0       	ldi	r28, 0x01	; 1
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:154

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
     622:	23 2b       	or	r18, r19
     624:	09 f0       	breq	.+2      	; 0x628 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x4a>
_ZN18Adafruit_SPIDevice8transferEh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:157
    startbit = 0x1;
  } else {
    startbit = 0x80;
     626:	c0 e8       	ldi	r28, 0x80	; 128
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:160
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
     628:	cc 24       	eor	r12, r12
     62a:	c3 94       	inc	r12
     62c:	98 2f       	mov	r25, r24
     62e:	9c 23       	and	r25, r28
     630:	09 f0       	breq	.+2      	; 0x634 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x56>
     632:	c1 2c       	mov	r12, r1
     634:	d8 2f       	mov	r29, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:161
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
     636:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <tempSensor+0x4>
     63a:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <tempSensor+0x5>
     63e:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <tempSensor+0x6>
     642:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <tempSensor+0x7>
     646:	60 e2       	ldi	r22, 0x20	; 32
     648:	71 ea       	ldi	r23, 0xA1	; 161
     64a:	87 e0       	ldi	r24, 0x07	; 7
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 39 14 	call	0x2872	; 0x2872 <__udivmodsi4>
     652:	12 2f       	mov	r17, r18
_ZN18Adafruit_SPIDevice8transferEh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:274
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
  uint8_t data = send;
     654:	dd 2e       	mov	r13, r29
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:164

  bool towrite, lastmosi = !(buffer[0] & startbit);
  uint8_t bitdelay_us = (1000000 / _freq) / 2;

  for (size_t i = 0; i < len; i++) {
    uint8_t reply = 0;
     656:	00 e0       	ldi	r16, 0x00	; 0
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:178
    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
        delayMicroseconds(bitdelay_us);
     658:	e2 2e       	mov	r14, r18
     65a:	f1 2c       	mov	r15, r1
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:177

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
     65c:	11 23       	and	r17, r17
     65e:	19 f0       	breq	.+6      	; 0x666 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x88>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:178
        delayMicroseconds(bitdelay_us);
     660:	c7 01       	movw	r24, r14
     662:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:181
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
     666:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <tempSensor+0xa>
     66a:	87 7f       	andi	r24, 0xF7	; 247
     66c:	09 f0       	breq	.+2      	; 0x670 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x92>
     66e:	54 c0       	rjmp	.+168    	; 0x718 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x13a>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:183
        towrite = send & b;
        if ((_mosi != -1) && (lastmosi != towrite)) {
     670:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tempSensor+0xd>
     674:	8f 3f       	cpi	r24, 0xFF	; 255
     676:	a1 f0       	breq	.+40     	; 0x6a0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xc2>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:182
      if (bitdelay_us) {
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
        towrite = send & b;
     678:	9d 2f       	mov	r25, r29
     67a:	9c 23       	and	r25, r28
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	09 f4       	brne	.+2      	; 0x682 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xa4>
     680:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:183
        if ((_mosi != -1) && (lastmosi != towrite)) {
     682:	8c 15       	cp	r24, r12
     684:	69 f0       	breq	.+26     	; 0x6a0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xc2>
     686:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <tempSensor+0xf>
     68a:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <tempSensor+0x10>
     68e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <tempSensor+0x17>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:185
#ifdef BUSIO_USE_FAST_PINIO
          if (towrite)
     692:	99 23       	and	r25, r25
     694:	d9 f1       	breq	.+118    	; 0x70c <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x12e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:186
            *mosiPort = *mosiPort | mosiPinMask;
     696:	90 81       	ld	r25, Z
     698:	89 2b       	or	r24, r25
     69a:	80 83       	st	Z, r24
     69c:	cc 24       	eor	r12, r12
     69e:	c3 94       	inc	r12
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:196
#endif
          lastmosi = towrite;
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
     6a0:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <tempSensor+0x11>
     6a4:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <tempSensor+0x12>
     6a8:	80 81       	ld	r24, Z
     6aa:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <tempSensor+0x19>
     6ae:	89 2b       	or	r24, r25
     6b0:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:201
#else
        digitalWrite(_sck, HIGH);
#endif

        if (bitdelay_us) {
     6b2:	11 23       	and	r17, r17
     6b4:	19 f0       	breq	.+6      	; 0x6bc <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xde>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:202
          delayMicroseconds(bitdelay_us);
     6b6:	c7 01       	movw	r24, r14
     6b8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:205
        }

        if (_miso != -1) {
     6bc:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <tempSensor+0xe>
     6c0:	8f 3f       	cpi	r24, 0xFF	; 255
     6c2:	51 f0       	breq	.+20     	; 0x6d8 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xfa>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:207
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
     6c4:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <tempSensor+0x13>
     6c8:	f0 91 62 03 	lds	r31, 0x0362	; 0x800362 <tempSensor+0x14>
     6cc:	80 81       	ld	r24, Z
     6ce:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <tempSensor+0x18>
     6d2:	89 23       	and	r24, r25
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xfa>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:211
#else
          if (digitalRead(_miso)) {
#endif
            reply |= b;
     6d6:	0c 2b       	or	r16, r28
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:216
          }
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
     6d8:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <tempSensor+0x11>
     6dc:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <tempSensor+0x12>
     6e0:	90 81       	ld	r25, Z
     6e2:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <tempSensor+0x19>
     6e6:	80 95       	com	r24
     6e8:	89 23       	and	r24, r25
     6ea:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:259
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
     6ec:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <tempSensor+0xe>
     6f0:	8f 3f       	cpi	r24, 0xFF	; 255
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x118>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:260
        buffer[i] = reply;
     6f4:	d0 2e       	mov	r13, r16
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:174
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
     6f6:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <tempSensor+0x8>
     6fa:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <tempSensor+0x9>
     6fe:	89 2b       	or	r24, r25
     700:	09 f0       	breq	.+2      	; 0x704 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x126>
     702:	47 c0       	rjmp	.+142    	; 0x792 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x1b4>
     704:	cc 0f       	add	r28, r28
     706:	c1 11       	cpse	r28, r1
     708:	a9 cf       	rjmp	.-174    	; 0x65c <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x7e>
     70a:	7c cf       	rjmp	.-264    	; 0x604 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x26>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:188
        if ((_mosi != -1) && (lastmosi != towrite)) {
#ifdef BUSIO_USE_FAST_PINIO
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     70c:	90 81       	ld	r25, Z
     70e:	80 95       	com	r24
     710:	89 23       	and	r24, r25
     712:	80 83       	st	Z, r24
     714:	c1 2c       	mov	r12, r1
     716:	c4 cf       	rjmp	.-120    	; 0x6a0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0xc2>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:223
        digitalWrite(_sck, LOW);
#endif
      } else { // if (_dataMode == SPI_MODE1 || _dataMode == SPI_MODE3)

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
     718:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <tempSensor+0x11>
     71c:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <tempSensor+0x12>
     720:	80 81       	ld	r24, Z
     722:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <tempSensor+0x19>
     726:	89 2b       	or	r24, r25
     728:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:228
#else
        digitalWrite(_sck, HIGH);
#endif

        if (bitdelay_us) {
     72a:	11 23       	and	r17, r17
     72c:	19 f0       	breq	.+6      	; 0x734 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x156>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:229
          delayMicroseconds(bitdelay_us);
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:232
        }

        if (_mosi != -1) {
     734:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tempSensor+0xd>
     738:	8f 3f       	cpi	r24, 0xFF	; 255
     73a:	61 f0       	breq	.+24     	; 0x754 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x176>
     73c:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <tempSensor+0xf>
     740:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <tempSensor+0x10>
     744:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <tempSensor+0x17>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:234
#ifdef BUSIO_USE_FAST_PINIO
          if (send & b)
     748:	9d 2f       	mov	r25, r29
     74a:	9c 23       	and	r25, r28
     74c:	f1 f0       	breq	.+60     	; 0x78a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x1ac>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:235
            *mosiPort = *mosiPort | mosiPinMask;
     74e:	90 81       	ld	r25, Z
     750:	89 2b       	or	r24, r25
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:237
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     752:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:244
          digitalWrite(_mosi, send & b);
#endif
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
     754:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <tempSensor+0x11>
     758:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <tempSensor+0x12>
     75c:	90 81       	ld	r25, Z
     75e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <tempSensor+0x19>
     762:	80 95       	com	r24
     764:	89 23       	and	r24, r25
     766:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:249
#else
        digitalWrite(_sck, LOW);
#endif

        if (_miso != -1) {
     768:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <tempSensor+0xe>
     76c:	8f 3f       	cpi	r24, 0xFF	; 255
     76e:	09 f4       	brne	.+2      	; 0x772 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x194>
     770:	bd cf       	rjmp	.-134    	; 0x6ec <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:251
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
     772:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <tempSensor+0x13>
     776:	f0 91 62 03 	lds	r31, 0x0362	; 0x800362 <tempSensor+0x14>
     77a:	80 81       	ld	r24, Z
     77c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <tempSensor+0x18>
     780:	89 23       	and	r24, r25
     782:	09 f4       	brne	.+2      	; 0x786 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x1a8>
     784:	b3 cf       	rjmp	.-154    	; 0x6ec <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:255
#else
          if (digitalRead(_miso)) {
#endif
            reply |= b;
     786:	0c 2b       	or	r16, r28
     788:	b1 cf       	rjmp	.-158    	; 0x6ec <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:237
        if (_mosi != -1) {
#ifdef BUSIO_USE_FAST_PINIO
          if (send & b)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     78a:	90 81       	ld	r25, Z
     78c:	80 95       	com	r24
     78e:	89 23       	and	r24, r25
     790:	e0 cf       	rjmp	.-64     	; 0x752 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x174>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:174
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
     792:	c6 95       	lsr	r28
     794:	b8 cf       	rjmp	.-144    	; 0x706 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]+0x128>

00000796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>:
_ZN17Adafruit_MAX3186514writeRegister8Ehh.constprop.23():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:342
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
}

void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	d8 2f       	mov	r29, r24
     79c:	c6 2f       	mov	r28, r22
write():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:346
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  beginTransactionWithAssertingCS();
     79e:	0e 94 95 02 	call	0x52a	; 0x52a <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.25]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:364
  {
    for (size_t i = 0; i < prefix_len; i++) {
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
      transfer(buffer[i]);
     7a2:	8d 2f       	mov	r24, r29
     7a4:	80 68       	ori	r24, 0x80	; 128
     7a6:	0e 94 ef 02 	call	0x5de	; 0x5de <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 ef 02 	call	0x5de	; 0x5de <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]>
_ZN17Adafruit_MAX3186514writeRegister8Ehh.constprop.23():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:347
  addr |= 0x80; // make sure top bit is set

  uint8_t buffer[2] = {addr, data};
  spi_dev.write(buffer, 2);
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
write():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:367
    }
  }
  endTransactionWithDeassertingCS();
     7b4:	0c 94 ab 02 	jmp	0x556	; 0x556 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.32]>

000007b8 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.22]>:
_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh.constprop.22():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:438
 *    @param  sendvalue The 8-bits of data to write when doing the data read,
 * defaults to 0xFF
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
     7c6:	7b 01       	movw	r14, r22
     7c8:	8a 01       	movw	r16, r20
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:441
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
  beginTransactionWithAssertingCS();
     7ca:	0e 94 95 02 	call	0x52a	; 0x52a <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.25]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:452
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
      transfer(write_buffer[i]);
     7ce:	88 81       	ld	r24, Y
     7d0:	0e 94 ef 02 	call	0x5de	; 0x5de <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]>
     7d4:	e7 01       	movw	r28, r14
     7d6:	0e 0d       	add	r16, r14
     7d8:	1f 1d       	adc	r17, r15
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:470
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
     7da:	c0 17       	cp	r28, r16
     7dc:	d1 07       	cpc	r29, r17
     7de:	29 f0       	breq	.+10     	; 0x7ea <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.22]+0x32>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:471
    read_buffer[i] = transfer(sendvalue);
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	0e 94 ef 02 	call	0x5de	; 0x5de <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.27]>
     7e6:	89 93       	st	Y+, r24
     7e8:	f8 cf       	rjmp	.-16     	; 0x7da <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.22]+0x22>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:487
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
     7ea:	0e 94 ab 02 	call	0x556	; 0x556 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.32]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:490

  return true;
}
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>:
_ZN17Adafruit_MAX3186513readRegister8Eh.constprop.20():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:317
  return rtd;
}

/**********************************************/

uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	1f 92       	push	r1
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:318
  uint8_t ret = 0;
     80a:	1a 82       	std	Y+2, r1	; 0x02
     80c:	19 82       	std	Y+1, r1	; 0x01
readRegisterN():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:339

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	be 01       	movw	r22, r28
     814:	6e 5f       	subi	r22, 0xFE	; 254
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.22]>
_ZN17Adafruit_MAX3186513readRegister8Eh.constprop.20():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:322
uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
  uint8_t ret = 0;
  readRegisterN(addr, &ret, 1);

  return ret;
}
     820:	8a 81       	ldd	r24, Y+2	; 0x02
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <Adafruit_MAX31865::clearFault() [clone .constprop.19]>:
_ZN17Adafruit_MAX3186510clearFaultEv.constprop.19():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:111
/*!
    @brief Clear all faults in FAULTSTAT
*/
/**************************************************************************/
void Adafruit_MAX31865::clearFault(void) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
     82c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:112
  t &= ~0x2C;
     830:	83 7d       	andi	r24, 0xD3	; 211
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:113
  t |= MAX31865_CONFIG_FAULTSTAT;
     832:	68 2f       	mov	r22, r24
     834:	62 60       	ori	r22, 0x02	; 2
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:114
  writeRegister8(MAX31865_CONFIG_REG, t);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0c 94 cb 03 	jmp	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>

0000083c <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]>:
_ZN17Adafruit_MAX3186510enableBiasEb.constprop.16():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:123
/*!
    @brief Enable the bias voltage on the RTD sensor
    @param b If true bias is enabled, else disabled
*/
/**************************************************************************/
void Adafruit_MAX31865::enableBias(bool b) {
     83c:	cf 93       	push	r28
     83e:	c8 2f       	mov	r28, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:124
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
     840:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:126
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
     844:	68 2f       	mov	r22, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:125
    @param b If true bias is enabled, else disabled
*/
/**************************************************************************/
void Adafruit_MAX31865::enableBias(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
  if (b) {
     846:	cc 23       	and	r28, r28
     848:	29 f0       	breq	.+10     	; 0x854 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]+0x18>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:126
    t |= MAX31865_CONFIG_BIAS; // enable bias
     84a:	60 68       	ori	r22, 0x80	; 128
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:130
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
     84c:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:131
}
     84e:	cf 91       	pop	r28
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:130
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
     850:	0c 94 cb 03 	jmp	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:128
void Adafruit_MAX31865::enableBias(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
     854:	6f 77       	andi	r22, 0x7F	; 127
     856:	fa cf       	rjmp	.-12     	; 0x84c <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]+0x10>

00000858 <micros>:
micros():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     858:	3f b7       	in	r19, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     85a:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     85c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_overflow_count>
     860:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_overflow_count+0x1>
     864:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <timer0_overflow_count+0x2>
     868:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     86c:	26 b5       	in	r18, 0x26	; 38
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     86e:	a8 9b       	sbis	0x15, 0	; 21
     870:	05 c0       	rjmp	.+10     	; 0x87c <micros+0x24>
     872:	2f 3f       	cpi	r18, 0xFF	; 255
     874:	19 f0       	breq	.+6      	; 0x87c <micros+0x24>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	a1 1d       	adc	r26, r1
     87a:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     87c:	3f bf       	out	0x3f, r19	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     87e:	ba 2f       	mov	r27, r26
     880:	a9 2f       	mov	r26, r25
     882:	98 2f       	mov	r25, r24
     884:	88 27       	eor	r24, r24
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	62 0f       	add	r22, r18
     88c:	71 1d       	adc	r23, r1
     88e:	81 1d       	adc	r24, r1
     890:	91 1d       	adc	r25, r1
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	66 0f       	add	r22, r22
     896:	77 1f       	adc	r23, r23
     898:	88 1f       	adc	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	4a 95       	dec	r20
     89e:	d1 f7       	brne	.-12     	; 0x894 <micros+0x3c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     8a0:	08 95       	ret

000008a2 <delay>:
delay():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	4b 01       	movw	r8, r22
     8b4:	5c 01       	movw	r10, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     8b6:	0e 94 2c 04 	call	0x858	; 0x858 <micros>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     8be:	0e 94 2c 04 	call	0x858	; 0x858 <micros>
     8c2:	6c 19       	sub	r22, r12
     8c4:	7d 09       	sbc	r23, r13
     8c6:	8e 09       	sbc	r24, r14
     8c8:	9f 09       	sbc	r25, r15
     8ca:	68 3e       	cpi	r22, 0xE8	; 232
     8cc:	73 40       	sbci	r23, 0x03	; 3
     8ce:	81 05       	cpc	r24, r1
     8d0:	91 05       	cpc	r25, r1
     8d2:	a8 f3       	brcs	.-22     	; 0x8be <delay+0x1c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	82 1a       	sub	r8, r18
     8d8:	91 08       	sbc	r9, r1
     8da:	a1 08       	sbc	r10, r1
     8dc:	b1 08       	sbc	r11, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     8de:	88 ee       	ldi	r24, 0xE8	; 232
     8e0:	c8 0e       	add	r12, r24
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	d8 1e       	adc	r13, r24
     8e6:	e1 1c       	adc	r14, r1
     8e8:	f1 1c       	adc	r15, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     8ea:	81 14       	cp	r8, r1
     8ec:	91 04       	cpc	r9, r1
     8ee:	a1 04       	cpc	r10, r1
     8f0:	b1 04       	cpc	r11, r1
     8f2:	29 f7       	brne	.-54     	; 0x8be <delay+0x1c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	9f 90       	pop	r9
     902:	8f 90       	pop	r8
     904:	08 95       	ret

00000906 <Adafruit_MAX31865::readRTD() [clone .constprop.5]>:
_ZN17Adafruit_MAX318657readRTDEv.constprop.5():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:296
/*!
    @brief Read the raw 16-bit value from the RTD_REG in one shot mode
    @return The raw unsigned 16-bit value, NOT temperature!
*/
/**************************************************************************/
uint16_t Adafruit_MAX31865::readRTD(void) {
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <Adafruit_MAX31865::readRTD() [clone .constprop.5]+0xa>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:297
  clearFault();
     914:	0e 94 16 04 	call	0x82c	; 0x82c <Adafruit_MAX31865::clearFault() [clone .constprop.19]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:298
  enableBias(true);
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 1e 04 	call	0x83c	; 0x83c <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:299
  delay(10);
     91e:	6a e0       	ldi	r22, 0x0A	; 10
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 51 04 	call	0x8a2	; 0x8a2 <delay>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:300
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
     92a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:301
  t |= MAX31865_CONFIG_1SHOT;
     92e:	68 2f       	mov	r22, r24
     930:	60 62       	ori	r22, 0x20	; 32
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:302
  writeRegister8(MAX31865_CONFIG_REG, t);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:303
  delay(65);
     938:	61 e4       	ldi	r22, 0x41	; 65
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 51 04 	call	0x8a2	; 0x8a2 <delay>
readRegister16():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:325

  return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
  uint8_t buffer[2] = {0, 0};
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	1a 82       	std	Y+2, r1	; 0x02
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	8b 83       	std	Y+3, r24	; 0x03
readRegisterN():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:339

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
     94c:	42 e0       	ldi	r20, 0x02	; 2
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	ce 01       	movw	r24, r28
     958:	03 96       	adiw	r24, 0x03	; 3
     95a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.22]>
     95e:	09 81       	ldd	r16, Y+1	; 0x01
     960:	1a 81       	ldd	r17, Y+2	; 0x02
     962:	10 27       	eor	r17, r16
     964:	01 27       	eor	r16, r17
     966:	10 27       	eor	r17, r16
_ZN17Adafruit_MAX318657readRTDEv.constprop.5():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:307
  writeRegister8(MAX31865_CONFIG_REG, t);
  delay(65);

  uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);

  enableBias(false); // Disable bias current again to reduce selfheating.
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 1e 04 	call	0x83c	; 0x83c <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:313

  // remove fault
  rtd >>= 1;

  return rtd;
}
     96e:	c8 01       	movw	r24, r16
     970:	96 95       	lsr	r25
     972:	87 95       	ror	r24
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	6c 01       	movw	r12, r24
     99a:	7b 01       	movw	r14, r22
     99c:	8b 01       	movw	r16, r22
     99e:	04 0f       	add	r16, r20
     9a0:	15 1f       	adc	r17, r21
     9a2:	eb 01       	movw	r28, r22
     9a4:	5e 01       	movw	r10, r28
     9a6:	ae 18       	sub	r10, r14
     9a8:	bf 08       	sbc	r11, r15
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     9aa:	c0 17       	cp	r28, r16
     9ac:	d1 07       	cpc	r29, r17
     9ae:	59 f0       	breq	.+22     	; 0x9c6 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     9b0:	69 91       	ld	r22, Y+
     9b2:	d6 01       	movw	r26, r12
     9b4:	ed 91       	ld	r30, X+
     9b6:	fc 91       	ld	r31, X
     9b8:	01 90       	ld	r0, Z+
     9ba:	f0 81       	ld	r31, Z
     9bc:	e0 2d       	mov	r30, r0
     9be:	c6 01       	movw	r24, r12
     9c0:	19 95       	eicall
     9c2:	89 2b       	or	r24, r25
     9c4:	79 f7       	brne	.-34     	; 0x9a4 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     9c6:	c5 01       	movw	r24, r10
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	08 95       	ret

000009de <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     9de:	fc 01       	movw	r30, r24
     9e0:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     9e2:	44 8d       	ldd	r20, Z+28	; 0x1c
     9e4:	25 2f       	mov	r18, r21
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	84 2f       	mov	r24, r20
     9ea:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     9ec:	82 1b       	sub	r24, r18
     9ee:	93 0b       	sbc	r25, r19
     9f0:	54 17       	cp	r21, r20
     9f2:	10 f0       	brcs	.+4      	; 0x9f8 <HardwareSerial::availableForWrite()+0x1a>
     9f4:	cf 96       	adiw	r24, 0x3f	; 63
     9f6:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     9f8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     9fa:	08 95       	ret

000009fc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     9fc:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9fe:	91 8d       	ldd	r25, Z+25	; 0x19
     a00:	82 8d       	ldd	r24, Z+26	; 0x1a
     a02:	98 17       	cp	r25, r24
     a04:	61 f0       	breq	.+24     	; 0xa1e <HardwareSerial::read()+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a06:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a08:	ae 0f       	add	r26, r30
     a0a:	bf 2f       	mov	r27, r31
     a0c:	b1 1d       	adc	r27, r1
     a0e:	5d 96       	adiw	r26, 0x1d	; 29
     a10:	8c 91       	ld	r24, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a12:	92 8d       	ldd	r25, Z+26	; 0x1a
     a14:	9f 5f       	subi	r25, 0xFF	; 255
     a16:	9f 73       	andi	r25, 0x3F	; 63
     a18:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a22:	08 95       	ret

00000a24 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     a24:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     a26:	91 8d       	ldd	r25, Z+25	; 0x19
     a28:	82 8d       	ldd	r24, Z+26	; 0x1a
     a2a:	98 17       	cp	r25, r24
     a2c:	31 f0       	breq	.+12     	; 0xa3a <HardwareSerial::peek()+0x16>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a2e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a30:	e8 0f       	add	r30, r24
     a32:	f1 1d       	adc	r31, r1
     a34:	85 8d       	ldd	r24, Z+29	; 0x1d
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a3e:	08 95       	ret

00000a40 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a40:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a42:	91 8d       	ldd	r25, Z+25	; 0x19
     a44:	22 8d       	ldd	r18, Z+26	; 0x1a
     a46:	89 2f       	mov	r24, r25
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	80 5c       	subi	r24, 0xC0	; 192
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	82 1b       	sub	r24, r18
     a50:	91 09       	sbc	r25, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     a52:	8f 73       	andi	r24, 0x3F	; 63
     a54:	99 27       	eor	r25, r25
     a56:	08 95       	ret

00000a58 <Serial3_available()>:
_Z17Serial3_availablev():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:54
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
     a58:	8f e9       	ldi	r24, 0x9F	; 159
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 20 05 	call	0xa40	; 0xa40 <HardwareSerial::available()>
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	89 2b       	or	r24, r25
     a64:	09 f4       	brne	.+2      	; 0xa68 <Serial3_available()+0x10>
     a66:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:55
}
     a68:	82 2f       	mov	r24, r18
     a6a:	08 95       	ret

00000a6c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a6c:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a6e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     a70:	a8 0f       	add	r26, r24
     a72:	b9 2f       	mov	r27, r25
     a74:	b1 1d       	adc	r27, r1
     a76:	a3 5a       	subi	r26, 0xA3	; 163
     a78:	bf 4f       	sbci	r27, 0xFF	; 255
     a7a:	2c 91       	ld	r18, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a7c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	8f 73       	andi	r24, 0x3F	; 63
     a84:	99 27       	eor	r25, r25
     a86:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     a88:	a6 89       	ldd	r26, Z+22	; 0x16
     a8a:	b7 89       	ldd	r27, Z+23	; 0x17
     a8c:	2c 93       	st	X, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a8e:	a0 89       	ldd	r26, Z+16	; 0x10
     a90:	b1 89       	ldd	r27, Z+17	; 0x11
     a92:	8c 91       	ld	r24, X
     a94:	83 70       	andi	r24, 0x03	; 3
     a96:	80 64       	ori	r24, 0x40	; 64
     a98:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a9a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a9e:	98 13       	cpse	r25, r24
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     aa2:	02 88       	ldd	r0, Z+18	; 0x12
     aa4:	f3 89       	ldd	r31, Z+19	; 0x13
     aa6:	e0 2d       	mov	r30, r0
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 7d       	andi	r24, 0xDF	; 223
     aac:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     aae:	08 95       	ret

00000ab0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ac2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ac4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac6:	98 13       	cpse	r25, r24
     ac8:	1a c0       	rjmp	.+52     	; 0xafe <HardwareSerial::write(unsigned char)+0x4e>
     aca:	e8 89       	ldd	r30, Y+16	; 0x10
     acc:	f9 89       	ldd	r31, Y+17	; 0x11
     ace:	80 81       	ld	r24, Z
     ad0:	85 ff       	sbrs	r24, 5
     ad2:	15 c0       	rjmp	.+42     	; 0xafe <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ad4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ad6:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     ad8:	ee 89       	ldd	r30, Y+22	; 0x16
     ada:	ff 89       	ldd	r31, Y+23	; 0x17
     adc:	60 83       	st	Z, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ade:	e8 89       	ldd	r30, Y+16	; 0x10
     ae0:	f9 89       	ldd	r31, Y+17	; 0x11
     ae2:	80 81       	ld	r24, Z
     ae4:	83 70       	andi	r24, 0x03	; 3
     ae6:	80 64       	ori	r24, 0x40	; 64
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     ae8:	80 83       	st	Z, r24
__iRestore():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aea:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret
     afe:	f6 2e       	mov	r15, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b00:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b02:	10 e0       	ldi	r17, 0x00	; 0
     b04:	0f 5f       	subi	r16, 0xFF	; 255
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	0f 73       	andi	r16, 0x3F	; 63
     b0a:	11 27       	eor	r17, r17
     b0c:	e0 2e       	mov	r14, r16
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b10:	8e 11       	cpse	r24, r14
     b12:	0c c0       	rjmp	.+24     	; 0xb2c <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	07 fc       	sbrc	r0, 7
     b18:	fa cf       	rjmp	.-12     	; 0xb0e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b1a:	e8 89       	ldd	r30, Y+16	; 0x10
     b1c:	f9 89       	ldd	r31, Y+17	; 0x11
     b1e:	80 81       	ld	r24, Z
     b20:	85 ff       	sbrs	r24, 5
     b22:	f5 cf       	rjmp	.-22     	; 0xb0e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 36 05 	call	0xa6c	; 0xa6c <HardwareSerial::_tx_udr_empty_irq()>
     b2a:	f1 cf       	rjmp	.-30     	; 0xb0e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b2e:	ec 0f       	add	r30, r28
     b30:	fd 2f       	mov	r31, r29
     b32:	f1 1d       	adc	r31, r1
     b34:	e3 5a       	subi	r30, 0xA3	; 163
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	f0 82       	st	Z, r15
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b3a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b3c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     b3e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     b40:	ea 89       	ldd	r30, Y+18	; 0x12
     b42:	fb 89       	ldd	r31, Y+19	; 0x13
     b44:	80 81       	ld	r24, Z
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	cf cf       	rjmp	.-98     	; 0xae8 <HardwareSerial::write(unsigned char)+0x38>

00000b4a <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b50:	88 8d       	ldd	r24, Y+24	; 0x18
     b52:	88 23       	and	r24, r24
     b54:	b9 f0       	breq	.+46     	; 0xb84 <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b56:	aa 89       	ldd	r26, Y+18	; 0x12
     b58:	bb 89       	ldd	r27, Y+19	; 0x13
     b5a:	e8 89       	ldd	r30, Y+16	; 0x10
     b5c:	f9 89       	ldd	r31, Y+17	; 0x11
     b5e:	8c 91       	ld	r24, X
     b60:	85 fd       	sbrc	r24, 5
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <HardwareSerial::flush()+0x20>
     b64:	80 81       	ld	r24, Z
     b66:	86 fd       	sbrc	r24, 6
     b68:	0d c0       	rjmp	.+26     	; 0xb84 <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	07 fc       	sbrc	r0, 7
     b6e:	f7 cf       	rjmp	.-18     	; 0xb5e <HardwareSerial::flush()+0x14>
     b70:	8c 91       	ld	r24, X
     b72:	85 ff       	sbrs	r24, 5
     b74:	f2 cf       	rjmp	.-28     	; 0xb5a <HardwareSerial::flush()+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     b76:	80 81       	ld	r24, Z
     b78:	85 ff       	sbrs	r24, 5
     b7a:	ed cf       	rjmp	.-38     	; 0xb56 <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     b7c:	ce 01       	movw	r24, r28
     b7e:	0e 94 36 05 	call	0xa6c	; 0xa6c <HardwareSerial::_tx_udr_empty_irq()>
     b82:	e9 cf       	rjmp	.-46     	; 0xb56 <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	89 2b       	or	r24, r25
     b90:	49 f0       	breq	.+18     	; 0xba4 <serialEventRun()+0x1a>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	89 2b       	or	r24, r25
     b98:	29 f0       	breq	.+10     	; 0xba4 <serialEventRun()+0x1a>
     b9a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b9e:	81 11       	cpse	r24, r1
     ba0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	89 2b       	or	r24, r25
     baa:	49 f0       	breq	.+18     	; 0xbbe <serialEventRun()+0x34>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	89 2b       	or	r24, r25
     bb2:	29 f0       	breq	.+10     	; 0xbbe <serialEventRun()+0x34>
     bb4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bb8:	81 11       	cpse	r24, r1
     bba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	89 2b       	or	r24, r25
     bc4:	49 f0       	breq	.+18     	; 0xbd8 <serialEventRun()+0x4e>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	89 2b       	or	r24, r25
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <serialEventRun()+0x4e>
     bce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bd2:	81 11       	cpse	r24, r1
     bd4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	89 2b       	or	r24, r25
     bde:	29 f0       	breq	.+10     	; 0xbea <serialEventRun()+0x60>
     be0:	0e 94 2c 05 	call	0xa58	; 0xa58 <Serial3_available()>
     be4:	81 11       	cpse	r24, r1
     be6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
     bea:	08 95       	ret

00000bec <twi_stop>:
twi_stop():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:430
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     bec:	85 ed       	ldi	r24, 0xD5	; 213
     bee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:450
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     bf2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     bf6:	84 fd       	sbrc	r24, 4
     bf8:	fc cf       	rjmp	.-8      	; 0xbf2 <twi_stop+0x6>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:456
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     bfa:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:457
}
     bfe:	08 95       	ret

00000c00 <twi_transmit>:
twi_transmit():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:365
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     c00:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <twi_txBufferLength>
     c04:	26 0f       	add	r18, r22
     c06:	33 27       	eor	r19, r19
     c08:	33 1f       	adc	r19, r19
     c0a:	21 32       	cpi	r18, 0x21	; 33
     c0c:	31 05       	cpc	r19, r1
     c0e:	ec f4       	brge	.+58     	; 0xc4a <twi_transmit+0x4a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:370
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     c10:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <twi_state>
     c14:	fc 01       	movw	r30, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	24 30       	cpi	r18, 0x04	; 4
     c1c:	69 f0       	breq	.+26     	; 0xc38 <twi_transmit+0x38>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:371
    return 2;
     c1e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:381
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     c20:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:376
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     c22:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <twi_txBufferLength>
     c26:	21 91       	ld	r18, Z+
     c28:	ac 01       	movw	r20, r24
     c2a:	4b 5b       	subi	r20, 0xBB	; 187
     c2c:	5d 4f       	sbci	r21, 0xFD	; 253
     c2e:	a4 0f       	add	r26, r20
     c30:	b5 2f       	mov	r27, r21
     c32:	b1 1d       	adc	r27, r1
     c34:	2c 93       	st	X, r18
     c36:	01 96       	adiw	r24, 0x01	; 1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:375
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     c38:	86 17       	cp	r24, r22
     c3a:	98 f3       	brcs	.-26     	; 0xc22 <twi_transmit+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:378
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     c3c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_txBufferLength>
     c40:	68 0f       	add	r22, r24
     c42:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <twi_txBufferLength>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:366
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	08 95       	ret

00000c4e <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:328
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     c4e:	08 95       	ret

00000c50 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:323
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	08 95       	ret

00000c56 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:309
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	9f ef       	ldi	r25, 0xFF	; 255
     c5a:	08 95       	ret

00000c5c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     c5c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <TwoWire::rxBufferIndex>
     c60:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:293
}
     c62:	91 95       	neg	r25
     c64:	81 95       	neg	r24
     c66:	91 09       	sbc	r25, r1
     c68:	08 95       	ret

00000c6a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:273

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cb 01       	movw	r24, r22
     c70:	ea 01       	movw	r28, r20
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:282
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     c72:	64 2f       	mov	r22, r20
     c74:	0e 94 00 06 	call	0xc00	; 0xc00 <twi_transmit>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:285
  }
  return quantity;
}
     c78:	ce 01       	movw	r24, r28
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:248

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	1f 92       	push	r1
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	69 83       	std	Y+1, r22	; 0x01
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:264
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	0e 94 00 06 	call	0xc00	; 0xc00 <twi_transmit>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:267
  }
  return 1;
}
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	08 95       	ret

00000ca8 <MovingAverage<float>::Insert(float)>:
_ZN13MovingAverageIfE6InsertEf():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:87
    return Average;
}


template<class T>
void MovingAverage<T>::Insert(T value){
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	6a 01       	movw	r12, r20
     cd0:	7b 01       	movw	r14, r22
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:88
    Average = value/MaxLength + Average - Element[++NextElement]/MaxLength;
     cd2:	68 85       	ldd	r22, Y+8	; 0x08
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 bc 12 	call	0x2578	; 0x2578 <__floatsisf>
     cde:	4b 01       	movw	r8, r22
     ce0:	5c 01       	movw	r10, r24
     ce2:	ac 01       	movw	r20, r24
     ce4:	9b 01       	movw	r18, r22
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 48 12 	call	0x2490	; 0x2490 <__divsf3>
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	4c 81       	ldd	r20, Y+4	; 0x04
     cf4:	5d 81       	ldd	r21, Y+5	; 0x05
     cf6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__addsf3>
     cfa:	2b 01       	movw	r4, r22
     cfc:	3c 01       	movw	r6, r24
     cfe:	88 81       	ld	r24, Y
     d00:	99 81       	ldd	r25, Y+1	; 0x01
     d02:	0e 81       	ldd	r16, Y+6	; 0x06
     d04:	1f 81       	ldd	r17, Y+7	; 0x07
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	1f 83       	std	Y+7, r17	; 0x07
     d0c:	0e 83       	std	Y+6, r16	; 0x06
     d0e:	18 01       	movw	r2, r16
     d10:	22 0c       	add	r2, r2
     d12:	33 1c       	adc	r3, r3
     d14:	22 0c       	add	r2, r2
     d16:	33 1c       	adc	r3, r3
     d18:	28 0e       	add	r2, r24
     d1a:	39 1e       	adc	r3, r25
     d1c:	a5 01       	movw	r20, r10
     d1e:	94 01       	movw	r18, r8
     d20:	f1 01       	movw	r30, r2
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	0e 94 48 12 	call	0x2490	; 0x2490 <__divsf3>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c3 01       	movw	r24, r6
     d34:	b2 01       	movw	r22, r4
     d36:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
     d3a:	6a 83       	std	Y+2, r22	; 0x02
     d3c:	7b 83       	std	Y+3, r23	; 0x03
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:89
    Element[NextElement] = value;
     d42:	f1 01       	movw	r30, r2
     d44:	c0 82       	st	Z, r12
     d46:	d1 82       	std	Z+1, r13	; 0x01
     d48:	e2 82       	std	Z+2, r14	; 0x02
     d4a:	f3 82       	std	Z+3, r15	; 0x03
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:90
    if(NextElement>=(MaxLength-1))   
     d4c:	88 85       	ldd	r24, Y+8	; 0x08
     d4e:	81 50       	subi	r24, 0x01	; 1
     d50:	99 0b       	sbc	r25, r25
     d52:	08 17       	cp	r16, r24
     d54:	19 07       	cpc	r17, r25
     d56:	10 f0       	brcs	.+4      	; 0xd5c <MovingAverage<float>::Insert(float)+0xb4>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:91
        NextElement=0;
     d58:	1f 82       	std	Y+7, r1	; 0x07
     d5a:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:93
    
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	8f 90       	pop	r8
     d74:	7f 90       	pop	r7
     d76:	6f 90       	pop	r6
     d78:	5f 90       	pop	r5
     d7a:	4f 90       	pop	r4
     d7c:	3f 90       	pop	r3
     d7e:	2f 90       	pop	r2
     d80:	08 95       	ret

00000d82 <Print::print(char const*)>:
_ZN5Print5printEPKc():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     d82:	fb 01       	movw	r30, r22
     d84:	01 90       	ld	r0, Z+
     d86:	00 20       	and	r0, r0
     d88:	e9 f7       	brne	.-6      	; 0xd84 <Print::print(char const*)+0x2>
     d8a:	31 97       	sbiw	r30, 0x01	; 1
     d8c:	af 01       	movw	r20, r30
     d8e:	46 1b       	sub	r20, r22
     d90:	57 0b       	sbc	r21, r23
     d92:	dc 01       	movw	r26, r24
     d94:	ed 91       	ld	r30, X+
     d96:	fc 91       	ld	r31, X
     d98:	02 80       	ldd	r0, Z+2	; 0x02
     d9a:	f3 81       	ldd	r31, Z+3	; 0x03
     d9c:	e0 2d       	mov	r30, r0
     d9e:	19 94       	eijmp

00000da0 <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.35]>:
_ZN14VFD_NEC_FC20X25PrintEPch.constprop.35():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:43

        void ClearDisplay() {
            _serPort->write(CLEAR_DISPLAY);
        }

        int  Print(char *text, uint8_t pos) {
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
     da8:	16 2f       	mov	r17, r22
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:44
            _serPort->write(ESCAPE);
     daa:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
     dae:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
     db2:	dc 01       	movw	r26, r24
     db4:	ed 91       	ld	r30, X+
     db6:	fc 91       	ld	r31, X
     db8:	01 90       	ld	r0, Z+
     dba:	f0 81       	ld	r31, Z
     dbc:	e0 2d       	mov	r30, r0
     dbe:	6b e1       	ldi	r22, 0x1B	; 27
     dc0:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:45
            _serPort->write(pos);
     dc2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
     dc6:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
     dca:	dc 01       	movw	r26, r24
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	01 90       	ld	r0, Z+
     dd2:	f0 81       	ld	r31, Z
     dd4:	e0 2d       	mov	r30, r0
     dd6:	61 2f       	mov	r22, r17
     dd8:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:46
            _serPort->print((char *)text);
     dda:	be 01       	movw	r22, r28
     ddc:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
     de0:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:47
        }
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:46
        }

        int  Print(char *text, uint8_t pos) {
            _serPort->write(ESCAPE);
            _serPort->write(pos);
            _serPort->print((char *)text);
     dea:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <Print::print(char const*)>

00000dee <__vector_23>:
__vector_23():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     e04:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <timer0_millis>
     e08:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <timer0_millis+0x1>
     e0c:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <timer0_millis+0x2>
     e10:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     e14:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     e18:	23 e0       	ldi	r18, 0x03	; 3
     e1a:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     e1c:	2d 37       	cpi	r18, 0x7D	; 125
     e1e:	68 f1       	brcs	.+90     	; 0xe7a <__vector_23+0x8c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     e20:	26 e8       	ldi	r18, 0x86	; 134
     e22:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     e24:	02 96       	adiw	r24, 0x02	; 2
     e26:	a1 1d       	adc	r26, r1
     e28:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     e2a:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     e2e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <timer0_millis>
     e32:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <timer0_millis+0x1>
     e36:	a0 93 97 02 	sts	0x0297, r26	; 0x800297 <timer0_millis+0x2>
     e3a:	b0 93 98 02 	sts	0x0298, r27	; 0x800298 <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     e3e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_overflow_count>
     e42:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_overflow_count+0x1>
     e46:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <timer0_overflow_count+0x2>
     e4a:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <timer0_overflow_count+0x3>
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	a1 1d       	adc	r26, r1
     e52:	b1 1d       	adc	r27, r1
     e54:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <timer0_overflow_count>
     e58:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <timer0_overflow_count+0x1>
     e5c:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <timer0_overflow_count+0x2>
     e60:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	a1 1d       	adc	r26, r1
     e7e:	b1 1d       	adc	r27, r1
     e80:	d4 cf       	rjmp	.-88     	; 0xe2a <__vector_23+0x3c>

00000e82 <__vector_55>:
__vector_55():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:45
{
  Serial3._rx_complete_irq();
}

ISR(USART3_UDRE_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	0b b6       	in	r0, 0x3b	; 59
     e8e:	0f 92       	push	r0
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:46
  Serial3._tx_udr_empty_irq();
     ea8:	8f e9       	ldi	r24, 0x9F	; 159
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 36 05 	call	0xa6c	; 0xa6c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:47
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0b be       	out	0x3b, r0	; 59
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_54>:
__vector_54():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:40
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	0b b6       	in	r0, 0x3b	; 59
     ee2:	0f 92       	push	r0
     ee4:	2f 93       	push	r18
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     eee:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <Serial3+0x10>
     ef2:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <Serial3+0x11>
     ef6:	80 81       	ld	r24, Z
     ef8:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <Serial3+0x16>
     efc:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <Serial3+0x17>
     f00:	82 fd       	sbrc	r24, 2
     f02:	1d c0       	rjmp	.+58     	; 0xf3e <__vector_54+0x68>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f04:	90 81       	ld	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f06:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <Serial3+0x19>
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f0e:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <Serial3+0x1a>
     f12:	82 17       	cp	r24, r18
     f14:	41 f0       	breq	.+16     	; 0xf26 <__vector_54+0x50>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     f16:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Serial3+0x19>
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	e1 56       	subi	r30, 0x61	; 97
     f1e:	fd 4f       	sbci	r31, 0xFD	; 253
     f20:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     f22:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <Serial3+0x19>
__vector_54():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:42
  Serial3._rx_complete_irq();
}
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0b be       	out	0x3b, r0	; 59
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f3e:	80 81       	ld	r24, Z
     f40:	f2 cf       	rjmp	.-28     	; 0xf26 <__vector_54+0x50>

00000f42 <__vector_39>:
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:528
  }
  return(flag);
}

ISR(TWI_vect)
{
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	0b b6       	in	r0, 0x3b	; 59
     f4e:	0f 92       	push	r0
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
     f68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	80 36       	cpi	r24, 0x60	; 96
     f70:	09 f4       	brne	.+2      	; 0xf74 <__vector_39+0x32>
     f72:	4d c0       	rjmp	.+154    	; 0x100e <__vector_39+0xcc>
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__vector_39+0x36>
     f76:	40 c0       	rjmp	.+128    	; 0xff8 <__vector_39+0xb6>
     f78:	88 32       	cpi	r24, 0x28	; 40
     f7a:	09 f4       	brne	.+2      	; 0xf7e <__vector_39+0x3c>
     f7c:	a7 c0       	rjmp	.+334    	; 0x10cc <__vector_39+0x18a>
     f7e:	28 f5       	brcc	.+74     	; 0xfca <__vector_39+0x88>
     f80:	80 31       	cpi	r24, 0x10	; 16
     f82:	09 f4       	brne	.+2      	; 0xf86 <__vector_39+0x44>
     f84:	9b c0       	rjmp	.+310    	; 0x10bc <__vector_39+0x17a>
     f86:	c8 f4       	brcc	.+50     	; 0xfba <__vector_39+0x78>
     f88:	88 23       	and	r24, r24
     f8a:	09 f4       	brne	.+2      	; 0xf8e <__vector_39+0x4c>
     f8c:	f1 c0       	rjmp	.+482    	; 0x1170 <__vector_39+0x22e>
     f8e:	88 30       	cpi	r24, 0x08	; 8
     f90:	09 f4       	brne	.+2      	; 0xf94 <__vector_39+0x52>
     f92:	94 c0       	rjmp	.+296    	; 0x10bc <__vector_39+0x17a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0b be       	out	0x3b, r0	; 59
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     fba:	88 31       	cpi	r24, 0x18	; 24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <__vector_39+0x7e>
     fbe:	86 c0       	rjmp	.+268    	; 0x10cc <__vector_39+0x18a>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	41 f7       	brne	.-48     	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     fc4:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_error>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <__vector_39+0xb0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     fca:	80 34       	cpi	r24, 0x40	; 64
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <__vector_39+0x8e>
     fce:	97 c0       	rjmp	.+302    	; 0x10fe <__vector_39+0x1bc>
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <__vector_39+0xa0>
     fd2:	80 33       	cpi	r24, 0x30	; 48
     fd4:	b9 f3       	breq	.-18     	; 0xfc4 <__vector_39+0x82>
     fd6:	88 33       	cpi	r24, 0x38	; 56
     fd8:	e9 f6       	brne	.-70     	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     fda:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_error>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     fde:	85 ec       	ldi	r24, 0xC5	; 197
     fe0:	a8 c0       	rjmp	.+336    	; 0x1132 <__vector_39+0x1f0>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     fe2:	80 35       	cpi	r24, 0x50	; 80
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <__vector_39+0xa6>
     fe6:	81 c0       	rjmp	.+258    	; 0x10ea <__vector_39+0x1a8>
     fe8:	88 35       	cpi	r24, 0x58	; 88
     fea:	09 f4       	brne	.+2      	; 0xfee <__vector_39+0xac>
     fec:	90 c0       	rjmp	.+288    	; 0x110e <__vector_39+0x1cc>
     fee:	88 34       	cpi	r24, 0x48	; 72
     ff0:	89 f6       	brne	.-94     	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     ff2:	0e 94 f6 05 	call	0xbec	; 0xbec <twi_stop>
     ff6:	ce cf       	rjmp	.-100    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     ff8:	88 39       	cpi	r24, 0x98	; 152
     ffa:	09 f4       	brne	.+2      	; 0xffe <__vector_39+0xbc>
     ffc:	86 c0       	rjmp	.+268    	; 0x110a <__vector_39+0x1c8>
     ffe:	38 f5       	brcc	.+78     	; 0x104e <__vector_39+0x10c>
    1000:	88 37       	cpi	r24, 0x78	; 120
    1002:	29 f0       	breq	.+10     	; 0x100e <__vector_39+0xcc>
    1004:	50 f4       	brcc	.+20     	; 0x101a <__vector_39+0xd8>
    1006:	88 36       	cpi	r24, 0x68	; 104
    1008:	11 f0       	breq	.+4      	; 0x100e <__vector_39+0xcc>
    100a:	80 37       	cpi	r24, 0x70	; 112
    100c:	19 f6       	brne	.-122    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1014:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <twi_rxBufferIndex>
    1018:	55 c0       	rjmp	.+170    	; 0x10c4 <__vector_39+0x182>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    101a:	88 38       	cpi	r24, 0x88	; 136
    101c:	09 f4       	brne	.+2      	; 0x1020 <__vector_39+0xde>
    101e:	75 c0       	rjmp	.+234    	; 0x110a <__vector_39+0x1c8>
    1020:	80 39       	cpi	r24, 0x90	; 144
    1022:	19 f0       	breq	.+6      	; 0x102a <__vector_39+0xe8>
    1024:	80 38       	cpi	r24, 0x80	; 128
    1026:	09 f0       	breq	.+2      	; 0x102a <__vector_39+0xe8>
    1028:	b5 cf       	rjmp	.-150    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    102a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_rxBufferIndex>
    102e:	80 32       	cpi	r24, 0x20	; 32
    1030:	08 f0       	brcs	.+2      	; 0x1034 <__vector_39+0xf2>
    1032:	6b c0       	rjmp	.+214    	; 0x110a <__vector_39+0x1c8>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1034:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <twi_rxBufferIndex>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	8e 0f       	add	r24, r30
    103c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <twi_rxBufferIndex>
    1040:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	e9 59       	subi	r30, 0x99	; 153
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
    104a:	80 83       	st	Z, r24
    104c:	3b c0       	rjmp	.+118    	; 0x10c4 <__vector_39+0x182>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    104e:	80 3b       	cpi	r24, 0xB0	; 176
    1050:	39 f0       	breq	.+14     	; 0x1060 <__vector_39+0x11e>
    1052:	d0 f4       	brcc	.+52     	; 0x1088 <__vector_39+0x146>
    1054:	80 3a       	cpi	r24, 0xA0	; 160
    1056:	09 f4       	brne	.+2      	; 0x105a <__vector_39+0x118>
    1058:	71 c0       	rjmp	.+226    	; 0x113c <__vector_39+0x1fa>
    105a:	88 3a       	cpi	r24, 0xA8	; 168
    105c:	09 f0       	breq	.+2      	; 0x1060 <__vector_39+0x11e>
    105e:	9a cf       	rjmp	.-204    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1066:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <twi_txBufferIndex>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    106a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <twi_txBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	e0 e0       	ldi	r30, 0x00	; 0
    1072:	19 95       	eicall
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1074:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_txBufferLength>
    1078:	81 11       	cpse	r24, r1
    107a:	0f c0       	rjmp	.+30     	; 0x109a <__vector_39+0x158>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <twi_txBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    1082:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_txBuffer>
    1086:	09 c0       	rjmp	.+18     	; 0x109a <__vector_39+0x158>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1088:	80 3c       	cpi	r24, 0xC0	; 192
    108a:	09 f4       	brne	.+2      	; 0x108e <__vector_39+0x14c>
    108c:	a8 cf       	rjmp	.-176    	; 0xfde <__vector_39+0x9c>
    108e:	88 3c       	cpi	r24, 0xC8	; 200
    1090:	09 f4       	brne	.+2      	; 0x1094 <__vector_39+0x152>
    1092:	a5 cf       	rjmp	.-182    	; 0xfde <__vector_39+0x9c>
    1094:	88 3b       	cpi	r24, 0xB8	; 184
    1096:	09 f0       	breq	.+2      	; 0x109a <__vector_39+0x158>
    1098:	7d cf       	rjmp	.-262    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    109a:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_txBufferIndex>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	8e 0f       	add	r24, r30
    10a2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_txBufferIndex>
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	eb 5b       	subi	r30, 0xBB	; 187
    10aa:	fd 4f       	sbci	r31, 0xFD	; 253
    10ac:	80 81       	ld	r24, Z
    10ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    10b2:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <twi_txBufferIndex>
    10b6:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_txBufferLength>
    10ba:	25 c0       	rjmp	.+74     	; 0x1106 <__vector_39+0x1c4>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    10bc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <twi_slarw>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    10c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10c4:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    10ca:	64 cf       	rjmp	.-312    	; 0xf94 <__vector_39+0x52>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10cc:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    10d0:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
    10d4:	98 17       	cp	r25, r24
    10d6:	28 f5       	brcc	.+74     	; 0x1122 <__vector_39+0x1e0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    10d8:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	8e 0f       	add	r24, r30
    10e0:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	eb cf       	rjmp	.-42     	; 0x10c0 <__vector_39+0x17e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    10ea:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	8e 0f       	add	r24, r30
    10f2:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    10f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10fe:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1102:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1106:	98 17       	cp	r25, r24
    1108:	e8 f2       	brcs	.-70     	; 0x10c4 <__vector_39+0x182>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    110a:	85 e8       	ldi	r24, 0x85	; 133
    110c:	dc cf       	rjmp	.-72     	; 0x10c6 <__vector_39+0x184>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    110e:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8e 0f       	add	r24, r30
    1116:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    111a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    1122:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <twi_sendStop>
    1126:	81 11       	cpse	r24, r1
    1128:	64 cf       	rjmp	.-312    	; 0xff2 <__vector_39+0xb0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_inRepStart>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1130:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1136:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <twi_state>
    113a:	2c cf       	rjmp	.-424    	; 0xf94 <__vector_39+0x52>
twi_releaseBus():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:468
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    113c:	85 ec       	ldi	r24, 0xC5	; 197
    113e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:471

  // update twi state
  twi_state = TWI_READY;
    1142:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <twi_state>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:631
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1146:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_rxBufferIndex>
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	30 f4       	brcc	.+12     	; 0x115a <__vector_39+0x218>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    114e:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <twi_rxBufferIndex>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	e9 59       	subi	r30, 0x99	; 153
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	10 82       	st	Z, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    115a:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <twi_rxBufferIndex>
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	87 e6       	ldi	r24, 0x67	; 103
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	e0 e0       	ldi	r30, 0x00	; 0
    1168:	19 95       	eicall
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    116a:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <twi_rxBufferIndex>
    116e:	12 cf       	rjmp	.-476    	; 0xf94 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1170:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_error>
    1174:	3e cf       	rjmp	.-388    	; 0xff2 <__vector_39+0xb0>

00001176 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2445>:
_GLOBAL__I_65535_0_MarketForge_Control.ino.cpp.o.2445():
    1176:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <Serial3+0x3>
    117a:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <Serial3+0x2>
    117e:	88 ee       	ldi	r24, 0xE8	; 232
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <Serial3+0x4>
    118a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <Serial3+0x5>
    118e:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <Serial3+0x6>
    1192:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <Serial3+0x7>
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <Serial3+0x1>
    119e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <Serial3>
    11a2:	85 e3       	ldi	r24, 0x35	; 53
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <Serial3+0xd>
    11aa:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <Serial3+0xc>
    11ae:	84 e3       	ldi	r24, 0x34	; 52
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <Serial3+0xf>
    11b6:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Serial3+0xe>
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <Serial3+0x11>
    11c2:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <Serial3+0x10>
    11c6:	81 e3       	ldi	r24, 0x31	; 49
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <Serial3+0x13>
    11ce:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <Serial3+0x12>
    11d2:	82 e3       	ldi	r24, 0x32	; 50
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <Serial3+0x15>
    11da:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <Serial3+0x14>
    11de:	86 e3       	ldi	r24, 0x36	; 54
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <Serial3+0x17>
    11e6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <Serial3+0x16>
    11ea:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <Serial3+0x19>
    11ee:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <Serial3+0x1a>
    11f2:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <Serial3+0x1b>
    11f6:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <Serial3+0x1c>
    11fa:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <tempSensor+0x1>
    11fe:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <tempSensor>
    1202:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <tempSensor+0x3>
    1206:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <tempSensor+0x2>
    120a:	80 e2       	ldi	r24, 0x20	; 32
    120c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <tempSensor+0xb>
    1210:	87 e1       	ldi	r24, 0x17	; 23
    1212:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tempSensor+0xc>
    1216:	8f e1       	ldi	r24, 0x1F	; 31
    1218:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <tempSensor+0xe>
    121c:	8e e1       	ldi	r24, 0x1E	; 30
    121e:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <tempSensor+0xd>
    1222:	e0 e6       	ldi	r30, 0x60	; 96
    1224:	f3 e0       	ldi	r31, 0x03	; 3
    1226:	e4 91       	lpm	r30, Z
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	ee 0f       	add	r30, r30
    122c:	ff 1f       	adc	r31, r31
    122e:	ea 5d       	subi	r30, 0xDA	; 218
    1230:	fc 4f       	sbci	r31, 0xFC	; 252
    1232:	85 91       	lpm	r24, Z+
    1234:	94 91       	lpm	r25, Z
    1236:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <tempSensor+0x16>
    123a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <tempSensor+0x15>
    123e:	e0 ef       	ldi	r30, 0xF0	; 240
    1240:	f2 e0       	ldi	r31, 0x02	; 2
    1242:	e4 91       	lpm	r30, Z
    1244:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <tempSensor+0x1a>
    1248:	ee e5       	ldi	r30, 0x5E	; 94
    124a:	f3 e0       	ldi	r31, 0x03	; 3
    124c:	e4 91       	lpm	r30, Z
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ea 5d       	subi	r30, 0xDA	; 218
    1256:	fc 4f       	sbci	r31, 0xFC	; 252
    1258:	85 91       	lpm	r24, Z+
    125a:	94 91       	lpm	r25, Z
    125c:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <tempSensor+0x10>
    1260:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <tempSensor+0xf>
    1264:	ee ee       	ldi	r30, 0xEE	; 238
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	e4 91       	lpm	r30, Z
    126a:	e0 93 65 03 	sts	0x0365, r30	; 0x800365 <tempSensor+0x17>
    126e:	ef e5       	ldi	r30, 0x5F	; 95
    1270:	f3 e0       	ldi	r31, 0x03	; 3
    1272:	e4 91       	lpm	r30, Z
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	ea 54       	subi	r30, 0x4A	; 74
    127c:	fd 4f       	sbci	r31, 0xFD	; 253
    127e:	85 91       	lpm	r24, Z+
    1280:	94 91       	lpm	r25, Z
    1282:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <tempSensor+0x14>
    1286:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <tempSensor+0x13>
    128a:	ef ee       	ldi	r30, 0xEF	; 239
    128c:	f2 e0       	ldi	r31, 0x02	; 2
    128e:	e4 91       	lpm	r30, Z
    1290:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <tempSensor+0x18>
    1294:	e7 e5       	ldi	r30, 0x57	; 87
    1296:	f3 e0       	ldi	r31, 0x03	; 3
    1298:	e4 91       	lpm	r30, Z
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ea 5d       	subi	r30, 0xDA	; 218
    12a2:	fc 4f       	sbci	r31, 0xFC	; 252
    12a4:	85 91       	lpm	r24, Z+
    12a6:	94 91       	lpm	r25, Z
    12a8:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <tempSensor+0x12>
    12ac:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <tempSensor+0x11>
    12b0:	e7 ee       	ldi	r30, 0xE7	; 231
    12b2:	f2 e0       	ldi	r31, 0x02	; 2
    12b4:	e4 91       	lpm	r30, Z
    12b6:	e0 93 67 03 	sts	0x0367, r30	; 0x800367 <tempSensor+0x19>
    12ba:	80 e4       	ldi	r24, 0x40	; 64
    12bc:	92 e4       	ldi	r25, 0x42	; 66
    12be:	af e0       	ldi	r26, 0x0F	; 15
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <tempSensor+0x4>
    12c6:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <tempSensor+0x5>
    12ca:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <tempSensor+0x6>
    12ce:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <tempSensor+0x7>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <tempSensor+0x9>
    12da:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <tempSensor+0x8>
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <tempSensor+0xa>
    12e4:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <tempSensor+0x1b>
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <avgTemp+0x8>
    12ee:	84 e2       	ldi	r24, 0x24	; 36
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <malloc>
    12f6:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <avgTemp>
    12fa:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <avgTemp+0x1>
    12fe:	fc 01       	movw	r30, r24
    1300:	84 96       	adiw	r24, 0x24	; 36
    1302:	11 92       	st	Z+, r1
    1304:	11 92       	st	Z+, r1
    1306:	11 92       	st	Z+, r1
    1308:	11 92       	st	Z+, r1
    130a:	8e 17       	cp	r24, r30
    130c:	9f 07       	cpc	r25, r31
    130e:	c9 f7       	brne	.-14     	; 0x1302 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2445+0x18c>
    1310:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <avgTemp+0x2>
    1314:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <avgTemp+0x3>
    1318:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <avgTemp+0x4>
    131c:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <avgTemp+0x5>
    1320:	8d e1       	ldi	r24, 0x1D	; 29
    1322:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <avgVolts+0x8>
    1326:	84 e7       	ldi	r24, 0x74	; 116
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <malloc>
    132e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <avgVolts>
    1332:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <avgVolts+0x1>
    1336:	fc 01       	movw	r30, r24
    1338:	8c 58       	subi	r24, 0x8C	; 140
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	11 92       	st	Z+, r1
    133e:	11 92       	st	Z+, r1
    1340:	11 92       	st	Z+, r1
    1342:	11 92       	st	Z+, r1
    1344:	e8 17       	cp	r30, r24
    1346:	f9 07       	cpc	r31, r25
    1348:	c9 f7       	brne	.-14     	; 0x133c <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2445+0x1c6>
    134a:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <avgVolts+0x2>
    134e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <avgVolts+0x3>
    1352:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <avgVolts+0x4>
    1356:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <avgVolts+0x5>
    135a:	08 95       	ret

0000135c <main>:
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	c0 54       	subi	r28, 0x40	; 64
    1366:	d1 09       	sbc	r29, r1
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1372:	78 94       	sei
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1374:	84 b5       	in	r24, 0x24	; 36
    1376:	83 60       	ori	r24, 0x03	; 3
    1378:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    137a:	85 b5       	in	r24, 0x25	; 37
    137c:	83 60       	ori	r24, 0x03	; 3
    137e:	85 bd       	out	0x25, r24	; 37
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1380:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1390:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    1394:	81 60       	ori	r24, 0x01	; 1
    1396:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    139a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    13a4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    13a8:	84 60       	ori	r24, 0x04	; 4
    13aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    13ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    13b8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    13bc:	83 60       	ori	r24, 0x03	; 3
    13be:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    13c2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    13c6:	81 60       	ori	r24, 0x01	; 1
    13c8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    13cc:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    13d0:	83 60       	ori	r24, 0x03	; 3
    13d2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    13d6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    13e0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    13e4:	83 60       	ori	r24, 0x03	; 3
    13e6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    13ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    13f4:	87 e8       	ldi	r24, 0x87	; 135
    13f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    13fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:93
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
  if (_cs != -1) {
    13fe:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <tempSensor+0xb>
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	41 f0       	breq	.+16     	; 0x1416 <main+0xba>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:94
    pinMode(_cs, OUTPUT);
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:95
    digitalWrite(_cs, HIGH);
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <tempSensor+0xb>
    1412:	0e 94 67 02 	call	0x4ce	; 0x4ce <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:98
  }

  if (_spi) { // hardware SPI
    1416:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <tempSensor>
    141a:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <tempSensor+0x1>
    141e:	89 2b       	or	r24, r25
    1420:	09 f4       	brne	.+2      	; 0x1424 <main+0xc8>
    1422:	87 c2       	rjmp	.+1294   	; 0x1932 <main+0x5d6>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    1424:	ff b6       	in	r15, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1426:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    1428:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <SPIClass::initialized>
    142c:	81 11       	cpse	r24, r1
    142e:	27 c0       	rjmp	.+78     	; 0x147e <main+0x122>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1430:	e5 e7       	ldi	r30, 0x75	; 117
    1432:	f3 e0       	ldi	r31, 0x03	; 3
    1434:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    1436:	e5 e0       	ldi	r30, 0x05	; 5
    1438:	f3 e0       	ldi	r31, 0x03	; 3
    143a:	94 91       	lpm	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    143c:	e8 2f       	mov	r30, r24
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ea 5b       	subi	r30, 0xBA	; 186
    1446:	fd 4f       	sbci	r31, 0xFD	; 253
    1448:	a5 91       	lpm	r26, Z+
    144a:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    144c:	ec 91       	ld	r30, X
    144e:	e9 23       	and	r30, r25
    1450:	21 f4       	brne	.+8      	; 0x145a <main+0xfe>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	85 e3       	ldi	r24, 0x35	; 53
    1456:	0e 94 67 02 	call	0x4ce	; 0x4ce <digitalWrite>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	85 e3       	ldi	r24, 0x35	; 53
    145e:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1462:	8c b5       	in	r24, 0x2c	; 44
    1464:	80 61       	ori	r24, 0x10	; 16
    1466:	8c bd       	out	0x2c, r24	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    1468:	8c b5       	in	r24, 0x2c	; 44
    146a:	80 64       	ori	r24, 0x40	; 64
    146c:	8c bd       	out	0x2c, r24	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	84 e3       	ldi	r24, 0x34	; 52
    1472:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	83 e3       	ldi	r24, 0x33	; 51
    147a:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    147e:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <SPIClass::initialized>
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <SPIClass::initialized>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    1488:	ff be       	out	0x3f, r15	; 63
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:121
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <tempSensor+0x1b>
setWires():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:209
    MAX31865_3WIRE, or MAX31865_4WIRE
    @param wires The number of wires in enum format
*/
/**************************************************************************/
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
    1490:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:214
  if (wires == MAX31865_3WIRE) {
    t |= MAX31865_CONFIG_3WIRE;
  } else {
    // 2 or 4 wire
    t &= ~MAX31865_CONFIG_3WIRE;
    1494:	68 2f       	mov	r22, r24
    1496:	6f 7e       	andi	r22, 0xEF	; 239
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:216
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:63
/**************************************************************************/
bool Adafruit_MAX31865::begin(max31865_numwires_t wires) {
  spi_dev.begin();

  setWires(wires);
  enableBias(false);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	0e 94 1e 04 	call	0x83c	; 0x83c <Adafruit_MAX31865::enableBias(bool) [clone .constprop.16]>
autoConvert():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:140
    @brief Whether we want to have continuous conversions (50/60 Hz)
    @param b If true, auto conversion is enabled
*/
/**************************************************************************/
void Adafruit_MAX31865::autoConvert(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
    14a4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:144
  if (b) {
    t |= MAX31865_CONFIG_MODEAUTO; // enable autoconvert
  } else {
    t &= ~MAX31865_CONFIG_MODEAUTO; // disable autoconvert
    14a8:	68 2f       	mov	r22, r24
    14aa:	6f 7b       	andi	r22, 0xBF	; 191
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:146
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
setThresholds():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:175
    @param lower raw lower threshold
    @param upper raw upper threshold
*/
/**************************************************************************/
void Adafruit_MAX31865::setThresholds(uint16_t lower, uint16_t upper) {
  writeRegister8(MAX31865_LFAULTLSB_REG, lower & 0xFF);
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:176
  writeRegister8(MAX31865_LFAULTMSB_REG, lower >> 8);
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:177
  writeRegister8(MAX31865_HFAULTLSB_REG, upper & 0xFF);
    14c2:	6f ef       	ldi	r22, 0xFF	; 255
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:178
  writeRegister8(MAX31865_HFAULTMSB_REG, upper >> 8);
    14ca:	6f ef       	ldi	r22, 0xFF	; 255
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	0e 94 cb 03 	call	0x796	; 0x796 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.23]>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:66

  setWires(wires);
  enableBias(false);
  autoConvert(false);
  setThresholds(0, 0xFFFF);
  clearFault();
    14d2:	0e 94 16 04 	call	0x82c	; 0x82c <Adafruit_MAX31865::clearFault() [clone .constprop.19]>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14d6:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <Serial3+0x10>
    14da:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <Serial3+0x11>
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14e2:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <Serial3+0xc>
    14e6:	f0 91 ac 02 	lds	r31, 0x02AC	; 0x8002ac <Serial3+0xd>
    14ea:	10 82       	st	Z, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    14ec:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <Serial3+0xe>
    14f0:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <Serial3+0xf>
    14f4:	8f ec       	ldi	r24, 0xCF	; 207
    14f6:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    14f8:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <Serial3+0x18>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14fc:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <Serial3+0x14>
    1500:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <Serial3+0x15>
    1504:	86 e0       	ldi	r24, 0x06	; 6
    1506:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1508:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <Serial3+0x12>
    150c:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <Serial3+0x13>
    1510:	80 81       	ld	r24, Z
    1512:	88 69       	ori	r24, 0x98	; 152
    1514:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    1516:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <Serial3+0x12>
    151a:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <Serial3+0x13>
    151e:	80 81       	ld	r24, Z
    1520:	8f 7d       	andi	r24, 0xDF	; 223
    1522:	80 83       	st	Z, r24
setup():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:41
void setup() {
  // put your setup code here, to run once:

  bool res = tempSensor.begin(MAX31865_4WIRE);
  Serial3.begin(9600);
  Serial3.print(("Test"));
    1524:	68 e1       	ldi	r22, 0x18	; 24
    1526:	72 e0       	ldi	r23, 0x02	; 2
    1528:	8f e9       	ldi	r24, 0x9F	; 159
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	0e 94 c1 06 	call	0xd82	; 0xd82 <Print::print(char const*)>
_ZN14VFD_NEC_FC20X213setSerialPortEP6Stream():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:29
#define ESCAPE              0x1B    //Used to position the cursor at specific pos.

class VFD_NEC_FC20X2 {
    public:
        void setSerialPort(Stream * streamObject) {
            _serPort = streamObject;
    1530:	8f e9       	ldi	r24, 0x9F	; 159
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <vfd+0x1>
    1538:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <vfd>
Init():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:33
        }

        void Init() {
            _serPort->write(CURSOR_OFF);
    153c:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <Serial3>
    1540:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <Serial3+0x1>
    1544:	01 90       	ld	r0, Z+
    1546:	f0 81       	ld	r31, Z
    1548:	e0 2d       	mov	r30, r0
    154a:	64 e1       	ldi	r22, 0x14	; 20
    154c:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:34
            _serPort->write(NORMAL_write);
    154e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
    1552:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
    1556:	dc 01       	movw	r26, r24
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	01 90       	ld	r0, Z+
    155e:	f0 81       	ld	r31, Z
    1560:	e0 2d       	mov	r30, r0
    1562:	61 e1       	ldi	r22, 0x11	; 17
    1564:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:35
            _serPort->write(BRIGTHNESS_75);
    1566:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
    156a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
    156e:	dc 01       	movw	r26, r24
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	01 90       	ld	r0, Z+
    1576:	f0 81       	ld	r31, Z
    1578:	e0 2d       	mov	r30, r0
    157a:	62 e0       	ldi	r22, 0x02	; 2
    157c:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:36
            _serPort->write(CLEAR_DISPLAY);
    157e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vfd>
    1582:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <vfd+0x1>
    1586:	dc 01       	movw	r26, r24
    1588:	ed 91       	ld	r30, X+
    158a:	fc 91       	ld	r31, X
    158c:	01 90       	ld	r0, Z+
    158e:	f0 81       	ld	r31, Z
    1590:	e0 2d       	mov	r30, r0
    1592:	6c e0       	ldi	r22, 0x0C	; 12
    1594:	19 95       	eicall
setup():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:45
  vfd.setSerialPort(&Serial3);
  vfd.Init();

  pinMode(BTN_START, INPUT);
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	89 e1       	ldi	r24, 0x19	; 25
    159a:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:46
  pinMode(BTN_STOP, INPUT);
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	8b e1       	ldi	r24, 0x1B	; 27
    15a2:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:49

  //LED
  pinMode(LED_OC, OUTPUT);
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	8a e2       	ldi	r24, 0x2A	; 42
    15aa:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:69
  float   Resistance = 0.0;
  Resistance = RREF * ratio;
  avgTemp.Insert(tempSensor.temperature(RNOMINAL, RREF));
  
  char fValue[10];
  dtostrf(avgVolts.GetAverage(), 5, 3, fValue);
    15ae:	1e 01       	movw	r2, r28
    15b0:	b3 e3       	ldi	r27, 0x33	; 51
    15b2:	2b 0e       	add	r2, r27
    15b4:	31 1c       	adc	r3, r1
analogRead():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:61
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    15b6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    15ba:	87 7f       	andi	r24, 0xF7	; 247
    15bc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    15c0:	e0 e4       	ldi	r30, 0x40	; 64
    15c2:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    15c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    15ca:	80 64       	ori	r24, 0x40	; 64
    15cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    15d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    15d4:	86 fd       	sbrc	r24, 6
    15d6:	fc cf       	rjmp	.-8      	; 0x15d0 <main+0x274>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    15d8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    15dc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:55
}

void loop() {
  char txt[50];
  //Test Analog Voltage
  float voltage = analogRead(analogVoltPin) * ANALAOG_RES;
    15e0:	07 2e       	mov	r0, r23
    15e2:	00 0c       	add	r0, r0
    15e4:	88 0b       	sbc	r24, r24
    15e6:	99 0b       	sbc	r25, r25
    15e8:	0e 94 bc 12 	call	0x2578	; 0x2578 <__floatsisf>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 ea       	ldi	r20, 0xA0	; 160
    15f2:	5b e3       	ldi	r21, 0x3B	; 59
    15f4:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    15f8:	ab 01       	movw	r20, r22
    15fa:	bc 01       	movw	r22, r24
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:56
  avgVolts.Insert(voltage); 
    15fc:	8c e3       	ldi	r24, 0x3C	; 60
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0e 94 54 06 	call	0xca8	; 0xca8 <MovingAverage<float>::Insert(float)>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:57
  Pressure = (7.5 * avgVolts.GetAverage()) - 3.9; 
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 ef       	ldi	r20, 0xF0	; 240
    160a:	50 e4       	ldi	r21, 0x40	; 64
    160c:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <avgVolts+0x2>
    1610:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <avgVolts+0x3>
    1614:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <avgVolts+0x4>
    1618:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <avgVolts+0x5>
    161c:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1620:	2a e9       	ldi	r18, 0x9A	; 154
    1622:	39 e9       	ldi	r19, 0x99	; 153
    1624:	49 e7       	ldi	r20, 0x79	; 121
    1626:	50 e4       	ldi	r21, 0x40	; 64
    1628:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:58
  Pressure = (1.044227 * Pressure) +  0.061628;
    162c:	2b e3       	ldi	r18, 0x3B	; 59
    162e:	39 ea       	ldi	r19, 0xA9	; 169
    1630:	45 e8       	ldi	r20, 0x85	; 133
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1638:	24 ea       	ldi	r18, 0xA4	; 164
    163a:	3d e6       	ldi	r19, 0x6D	; 109
    163c:	4c e7       	ldi	r20, 0x7C	; 124
    163e:	5d e3       	ldi	r21, 0x3D	; 61
    1640:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__addsf3>
    1644:	60 93 90 02 	sts	0x0290, r22	; 0x800290 <Pressure>
    1648:	70 93 91 02 	sts	0x0291, r23	; 0x800291 <Pressure+0x1>
    164c:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <Pressure+0x2>
    1650:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <Pressure+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:61

  ////Read MAX31865
  uint16_t getMAX31865 = tempSensor.readRTD();
    1654:	0e 94 83 04 	call	0x906	; 0x906 <Adafruit_MAX31865::readRTD() [clone .constprop.5]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:62
  float    ratio = getMAX31865;
    1658:	bc 01       	movw	r22, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 ba 12 	call	0x2574	; 0x2574 <__floatunsisf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:63
  ratio /= 32768;
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	58 e3       	ldi	r21, 0x38	; 56
    166a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:65
  float   Resistance = 0.0;
  Resistance = RREF * ratio;
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	47 ed       	ldi	r20, 0xD7	; 215
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    167a:	21 96       	adiw	r28, 0x01	; 1
    167c:	6c af       	std	Y+60, r22	; 0x3c
    167e:	7d af       	std	Y+61, r23	; 0x3d
    1680:	8e af       	std	Y+62, r24	; 0x3e
    1682:	9f af       	std	Y+63, r25	; 0x3f
    1684:	21 97       	sbiw	r28, 0x01	; 1
temperature():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:233
    430 or 4300
    @returns Temperature in C
*/
/**************************************************************************/
float Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
  return calculateTemperature(readRTD(), RTDnominal, refResistor);
    1686:	0e 94 83 04 	call	0x906	; 0x906 <Adafruit_MAX31865::readRTD() [clone .constprop.5]>
calculateTemperature():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:253
/**************************************************************************/
float Adafruit_MAX31865::calculateTemperature(uint16_t RTDraw, float RTDnominal,
                                              float refResistor) {
  float Z1, Z2, Z3, Z4, Rt, temp;

  Rt = RTDraw;
    168a:	bc 01       	movw	r22, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 ba 12 	call	0x2574	; 0x2574 <__floatunsisf>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:254
  Rt /= 32768;
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	58 e3       	ldi	r21, 0x38	; 56
    169c:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:255
  Rt *= refResistor;
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	47 ed       	ldi	r20, 0xD7	; 215
    16a6:	53 e4       	ldi	r21, 0x43	; 67
    16a8:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    16ac:	4b 01       	movw	r8, r22
    16ae:	5c 01       	movw	r10, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:264
  Z1 = -RTD_A;
  Z2 = RTD_A * RTD_A - (4 * RTD_B);
  Z3 = (4 * RTD_B) / RTDnominal;
  Z4 = 2 * RTD_B;

  temp = Z2 + (Z3 * Rt);
    16b0:	2f e6       	ldi	r18, 0x6F	; 111
    16b2:	3d e6       	ldi	r19, 0x6D	; 109
    16b4:	46 ec       	ldi	r20, 0xC6	; 198
    16b6:	52 eb       	ldi	r21, 0xB2	; 178
    16b8:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    16bc:	26 e1       	ldi	r18, 0x16	; 22
    16be:	33 e8       	ldi	r19, 0x83	; 131
    16c0:	43 e9       	ldi	r20, 0x93	; 147
    16c2:	57 e3       	ldi	r21, 0x37	; 55
    16c4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__addsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:265
  temp = (sqrt(temp) + Z1) / Z4;
    16c8:	0e 94 c0 13 	call	0x2780	; 0x2780 <sqrt>
    16cc:	22 e3       	ldi	r18, 0x32	; 50
    16ce:	31 e1       	ldi	r19, 0x11	; 17
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5b e3       	ldi	r21, 0x3B	; 59
    16d4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
    16d8:	2f e7       	ldi	r18, 0x7F	; 127
    16da:	35 e0       	ldi	r19, 0x05	; 5
    16dc:	4b e9       	ldi	r20, 0x9B	; 155
    16de:	55 eb       	ldi	r21, 0xB5	; 181
    16e0:	0e 94 48 12 	call	0x2490	; 0x2490 <__divsf3>
    16e4:	6b 01       	movw	r12, r22
    16e6:	7c 01       	movw	r14, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:267

  if (temp >= 0)
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	0e 94 48 13 	call	0x2690	; 0x2690 <__gesf2>
    16f2:	87 ff       	sbrs	r24, 7
    16f4:	70 c0       	rjmp	.+224    	; 0x17d6 <main+0x47a>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:271
    return temp;

  // ugh.
  Rt /= RTDnominal;
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	48 ec       	ldi	r20, 0xC8	; 200
    16fc:	52 e4       	ldi	r21, 0x42	; 66
    16fe:	c5 01       	movw	r24, r10
    1700:	b4 01       	movw	r22, r8
    1702:	0e 94 48 12 	call	0x2490	; 0x2490 <__divsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:272
  Rt *= 100; // normalize to 100 ohm
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	48 ec       	ldi	r20, 0xC8	; 200
    170c:	52 e4       	ldi	r21, 0x42	; 66
    170e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1712:	6b 01       	movw	r12, r22
    1714:	7c 01       	movw	r14, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:277

  float rpoly = Rt;

  temp = -242.02;
  temp += 2.2228 * rpoly;
    1716:	2b e5       	ldi	r18, 0x5B	; 91
    1718:	32 e4       	ldi	r19, 0x42	; 66
    171a:	4e e0       	ldi	r20, 0x0E	; 14
    171c:	50 e4       	ldi	r21, 0x40	; 64
    171e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1722:	2f e1       	ldi	r18, 0x1F	; 31
    1724:	35 e0       	ldi	r19, 0x05	; 5
    1726:	42 e7       	ldi	r20, 0x72	; 114
    1728:	53 e4       	ldi	r21, 0x43	; 67
    172a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
    172e:	2b 01       	movw	r4, r22
    1730:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:278
  rpoly *= Rt; // square
    1732:	a7 01       	movw	r20, r14
    1734:	96 01       	movw	r18, r12
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    173e:	4b 01       	movw	r8, r22
    1740:	5c 01       	movw	r10, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:279
  temp += 2.5859e-3 * rpoly;
    1742:	24 e3       	ldi	r18, 0x34	; 52
    1744:	38 e7       	ldi	r19, 0x78	; 120
    1746:	49 e2       	ldi	r20, 0x29	; 41
    1748:	5b e3       	ldi	r21, 0x3B	; 59
    174a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    174e:	a3 01       	movw	r20, r6
    1750:	92 01       	movw	r18, r4
    1752:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__addsf3>
    1756:	2b 01       	movw	r4, r22
    1758:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:280
  rpoly *= Rt; // ^3
    175a:	a5 01       	movw	r20, r10
    175c:	94 01       	movw	r18, r8
    175e:	c7 01       	movw	r24, r14
    1760:	b6 01       	movw	r22, r12
    1762:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1766:	4b 01       	movw	r8, r22
    1768:	5c 01       	movw	r10, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:281
  temp -= 4.8260e-6 * rpoly;
    176a:	26 e0       	ldi	r18, 0x06	; 6
    176c:	3f ee       	ldi	r19, 0xEF	; 239
    176e:	41 ea       	ldi	r20, 0xA1	; 161
    1770:	56 e3       	ldi	r21, 0x36	; 54
    1772:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1776:	9b 01       	movw	r18, r22
    1778:	ac 01       	movw	r20, r24
    177a:	c3 01       	movw	r24, r6
    177c:	b2 01       	movw	r22, r4
    177e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
    1782:	2b 01       	movw	r4, r22
    1784:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:282
  rpoly *= Rt; // ^4
    1786:	a5 01       	movw	r20, r10
    1788:	94 01       	movw	r18, r8
    178a:	c7 01       	movw	r24, r14
    178c:	b6 01       	movw	r22, r12
    178e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1792:	4b 01       	movw	r8, r22
    1794:	5c 01       	movw	r10, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:283
  temp -= 2.8183e-8 * rpoly;
    1796:	23 e1       	ldi	r18, 0x13	; 19
    1798:	37 e1       	ldi	r19, 0x17	; 23
    179a:	42 ef       	ldi	r20, 0xF2	; 242
    179c:	52 e3       	ldi	r21, 0x32	; 50
    179e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__subsf3>
    17ae:	2b 01       	movw	r4, r22
    17b0:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:284
  rpoly *= Rt; // ^5
    17b2:	a5 01       	movw	r20, r10
    17b4:	94 01       	movw	r18, r8
    17b6:	c7 01       	movw	r24, r14
    17b8:	b6 01       	movw	r22, r12
    17ba:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:285
  temp += 1.5243e-10 * rpoly;
    17be:	2b e3       	ldi	r18, 0x3B	; 59
    17c0:	39 e9       	ldi	r19, 0x99	; 153
    17c2:	47 e2       	ldi	r20, 0x27	; 39
    17c4:	5f e2       	ldi	r21, 0x2F	; 47
    17c6:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    17ca:	a3 01       	movw	r20, r6
    17cc:	92 01       	movw	r18, r4
    17ce:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__addsf3>
    17d2:	6b 01       	movw	r12, r22
    17d4:	7c 01       	movw	r14, r24
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:66
  avgTemp.Insert(tempSensor.temperature(RNOMINAL, RREF));
    17d6:	b7 01       	movw	r22, r14
    17d8:	a6 01       	movw	r20, r12
    17da:	85 e4       	ldi	r24, 0x45	; 69
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 54 06 	call	0xca8	; 0xca8 <MovingAverage<float>::Insert(float)>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:69
  
  char fValue[10];
  dtostrf(avgVolts.GetAverage(), 5, 3, fValue);
    17e2:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <avgVolts+0x2>
    17e6:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <avgVolts+0x3>
    17ea:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <avgVolts+0x4>
    17ee:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <avgVolts+0x5>
    17f2:	81 01       	movw	r16, r2
    17f4:	23 e0       	ldi	r18, 0x03	; 3
    17f6:	45 e0       	ldi	r20, 0x05	; 5
    17f8:	0e 94 c6 0c 	call	0x198c	; 0x198c <dtostrf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:70
  sprintf(txt,"V:%s", fValue);
    17fc:	3f 92       	push	r3
    17fe:	2f 92       	push	r2
    1800:	2d e1       	ldi	r18, 0x1D	; 29
    1802:	32 e0       	ldi	r19, 0x02	; 2
    1804:	3f 93       	push	r19
    1806:	2f 93       	push	r18
    1808:	a1 e0       	ldi	r26, 0x01	; 1
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ac 0f       	add	r26, r28
    180e:	bd 1f       	adc	r27, r29
    1810:	bf 93       	push	r27
    1812:	af 93       	push	r26
    1814:	0e 94 88 15 	call	0x2b10	; 0x2b10 <sprintf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:71
  dtostrf(Pressure, 5,2, fValue);
    1818:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <Pressure>
    181c:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <Pressure+0x1>
    1820:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <Pressure+0x2>
    1824:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <Pressure+0x3>
    1828:	22 e0       	ldi	r18, 0x02	; 2
    182a:	45 e0       	ldi	r20, 0x05	; 5
    182c:	0e 94 c6 0c 	call	0x198c	; 0x198c <dtostrf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:72
  sprintf(txt, "%s, P:%s  ", txt, fValue);
    1830:	3f 92       	push	r3
    1832:	2f 92       	push	r2
    1834:	e1 e0       	ldi	r30, 0x01	; 1
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	ec 0f       	add	r30, r28
    183a:	fd 1f       	adc	r31, r29
    183c:	ff 93       	push	r31
    183e:	ef 93       	push	r30
    1840:	22 e2       	ldi	r18, 0x22	; 34
    1842:	32 e0       	ldi	r19, 0x02	; 2
    1844:	3f 93       	push	r19
    1846:	2f 93       	push	r18
    1848:	ff 93       	push	r31
    184a:	ef 93       	push	r30
    184c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <sprintf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:73
  vfd.Print(txt,0);
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 d0 06 	call	0xda0	; 0xda0 <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.35]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:76

  //sprintf(txt,"Resist: %1.2f, Temp: %1.2f  ", Resistance, /* tempSensor.temperature(RNOMINAL, RREF) */ 2.12 );
  dtostrf(Resistance, 5, 2, fValue);
    185a:	22 e0       	ldi	r18, 0x02	; 2
    185c:	45 e0       	ldi	r20, 0x05	; 5
    185e:	21 96       	adiw	r28, 0x01	; 1
    1860:	6c ad       	ldd	r22, Y+60	; 0x3c
    1862:	7d ad       	ldd	r23, Y+61	; 0x3d
    1864:	8e ad       	ldd	r24, Y+62	; 0x3e
    1866:	9f ad       	ldd	r25, Y+63	; 0x3f
    1868:	21 97       	sbiw	r28, 0x01	; 1
    186a:	0e 94 c6 0c 	call	0x198c	; 0x198c <dtostrf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:77
  sprintf(txt,"R:%s", fValue);
    186e:	3f 92       	push	r3
    1870:	2f 92       	push	r2
    1872:	ad e2       	ldi	r26, 0x2D	; 45
    1874:	b2 e0       	ldi	r27, 0x02	; 2
    1876:	bf 93       	push	r27
    1878:	af 93       	push	r26
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	2c 0f       	add	r18, r28
    1880:	3d 1f       	adc	r19, r29
    1882:	3f 93       	push	r19
    1884:	2f 93       	push	r18
    1886:	0e 94 88 15 	call	0x2b10	; 0x2b10 <sprintf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:78
  dtostrf(avgTemp.GetAverage(), 5,2, fValue);
    188a:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <avgTemp+0x2>
    188e:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <avgTemp+0x3>
    1892:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <avgTemp+0x4>
    1896:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <avgTemp+0x5>
    189a:	22 e0       	ldi	r18, 0x02	; 2
    189c:	45 e0       	ldi	r20, 0x05	; 5
    189e:	0e 94 c6 0c 	call	0x198c	; 0x198c <dtostrf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:79
  sprintf(txt, "%s, T:%s  ", txt, fValue);
    18a2:	3f 92       	push	r3
    18a4:	2f 92       	push	r2
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	8c 0f       	add	r24, r28
    18ac:	9d 1f       	adc	r25, r29
    18ae:	9f 93       	push	r25
    18b0:	8f 93       	push	r24
    18b2:	a2 e3       	ldi	r26, 0x32	; 50
    18b4:	b2 e0       	ldi	r27, 0x02	; 2
    18b6:	bf 93       	push	r27
    18b8:	af 93       	push	r26
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	0e 94 88 15 	call	0x2b10	; 0x2b10 <sprintf>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:80
  vfd.Print(txt, 20);
    18c2:	64 e1       	ldi	r22, 0x14	; 20
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	0e 94 d0 06 	call	0xda0	; 0xda0 <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.35]>
digitalRead():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    18cc:	ea e8       	ldi	r30, 0x8A	; 138
    18ce:	f2 e0       	ldi	r31, 0x02	; 2
    18d0:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    18d2:	ea ef       	ldi	r30, 0xFA	; 250
    18d4:	f2 e0       	ldi	r31, 0x02	; 2
    18d6:	f4 90       	lpm	r15, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    18d8:	ea e6       	ldi	r30, 0x6A	; 106
    18da:	f3 e0       	ldi	r31, 0x03	; 3
    18dc:	e4 90       	lpm	r14, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
main():
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	60 e0       	ldi	r22, 0x00	; 0
digitalRead():
    18ec:	ee 20       	and	r14, r14
    18ee:	99 f0       	breq	.+38     	; 0x1916 <main+0x5ba>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18f0:	81 11       	cpse	r24, r1
    18f2:	0e 94 00 02 	call	0x400	; 0x400 <turnOffPWM>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    18f6:	ee 2d       	mov	r30, r14
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ea 54       	subi	r30, 0x4A	; 74
    1900:	fd 4f       	sbci	r31, 0xFD	; 253
    1902:	a5 91       	lpm	r26, Z+
    1904:	b4 91       	lpm	r27, Z
    1906:	8c 91       	ld	r24, X
    1908:	f8 22       	and	r15, r24
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <main+0x5b6>
    1910:	90 e0       	ldi	r25, 0x00	; 0
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1912:	69 2f       	mov	r22, r25
    1914:	78 2f       	mov	r23, r24
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:82

  digitalWrite(LED_OC, !digitalRead(LED_OC));
    1916:	31 e0       	ldi	r19, 0x01	; 1
    1918:	63 27       	eor	r22, r19
    191a:	8a e2       	ldi	r24, 0x2A	; 42
    191c:	0e 94 67 02 	call	0x4ce	; 0x4ce <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:83
  delay(100);
    1920:	64 e6       	ldi	r22, 0x64	; 100
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 51 04 	call	0x8a2	; 0x8a2 <delay>
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    192c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <serialEventRun()>
    1930:	42 ce       	rjmp	.-892    	; 0x15b6 <main+0x25a>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:103
  if (_spi) { // hardware SPI
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
#endif
  } else {
    pinMode(_sck, OUTPUT);
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <tempSensor+0xc>
    1938:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:105

    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
    193c:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <tempSensor+0xa>
    1940:	8b 7f       	andi	r24, 0xFB	; 251
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:107
      // idle low on mode 0 and 1
      digitalWrite(_sck, LOW);
    1942:	60 e0       	ldi	r22, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:105
    _spi->begin();
#endif
  } else {
    pinMode(_sck, OUTPUT);

    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
    1944:	09 f0       	breq	.+2      	; 0x1948 <main+0x5ec>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:110
      // idle low on mode 0 and 1
      digitalWrite(_sck, LOW);
    } else {
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <tempSensor+0xc>
    194c:	0e 94 67 02 	call	0x4ce	; 0x4ce <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:112
    }
    if (_mosi != -1) {
    1950:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tempSensor+0xd>
    1954:	8f 3f       	cpi	r24, 0xFF	; 255
    1956:	41 f0       	breq	.+16     	; 0x1968 <main+0x60c>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:113
      pinMode(_mosi, OUTPUT);
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:114
      digitalWrite(_mosi, HIGH);
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tempSensor+0xd>
    1964:	0e 94 67 02 	call	0x4ce	; 0x4ce <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:116
    }
    if (_miso != -1) {
    1968:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <tempSensor+0xe>
    196c:	8f 3f       	cpi	r24, 0xFF	; 255
    196e:	09 f4       	brne	.+2      	; 0x1972 <main+0x616>
    1970:	8c cd       	rjmp	.-1256   	; 0x148a <main+0x12e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:117
      pinMode(_miso, INPUT);
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	0e 94 b3 02 	call	0x566	; 0x566 <pinMode>
    1978:	88 cd       	rjmp	.-1264   	; 0x148a <main+0x12e>

0000197a <_GLOBAL__sub_D_tempSensor>:
_GLOBAL__sub_D_tempSensor():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:83

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
  if (_spiSetting)
    197a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <tempSensor+0x2>
    197e:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <tempSensor+0x3>
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	11 f0       	breq	.+4      	; 0x198a <_GLOBAL__sub_D_tempSensor+0x10>
operator delete():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    1986:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <free>
_GLOBAL__sub_D_tempSensor():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:87
  //digitalWrite(LED_OC, 1);
  //delay(500);

}
    198a:	08 95       	ret

0000198c <dtostrf>:
dtostrf():
    198c:	ef 92       	push	r14
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	e8 01       	movw	r28, r16
    1998:	34 e0       	ldi	r19, 0x04	; 4
    199a:	47 fd       	sbrc	r20, 7
    199c:	34 e1       	ldi	r19, 0x14	; 20
    199e:	04 2e       	mov	r0, r20
    19a0:	00 0c       	add	r0, r0
    19a2:	55 0b       	sbc	r21, r21
    19a4:	57 ff       	sbrs	r21, 7
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <dtostrf+0x22>
    19a8:	51 95       	neg	r21
    19aa:	41 95       	neg	r20
    19ac:	51 09       	sbc	r21, r1
    19ae:	e3 2e       	mov	r14, r19
    19b0:	02 2f       	mov	r16, r18
    19b2:	24 2f       	mov	r18, r20
    19b4:	ae 01       	movw	r20, r28
    19b6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <dtoa_prf>
    19ba:	ce 01       	movw	r24, r28
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ef 90       	pop	r14
    19c6:	08 95       	ret

000019c8 <vfprintf>:
vfprintf():
    19c8:	2f 92       	push	r2
    19ca:	3f 92       	push	r3
    19cc:	4f 92       	push	r4
    19ce:	5f 92       	push	r5
    19d0:	6f 92       	push	r6
    19d2:	7f 92       	push	r7
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <vfprintf+0x26>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <vfprintf+0x28>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <vfprintf+0x2a>
    19f2:	1f 92       	push	r1
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	7c 01       	movw	r14, r24
    19fc:	3b 01       	movw	r6, r22
    19fe:	8a 01       	movw	r16, r20
    1a00:	fc 01       	movw	r30, r24
    1a02:	17 82       	std	Z+7, r1	; 0x07
    1a04:	16 82       	std	Z+6, r1	; 0x06
    1a06:	83 81       	ldd	r24, Z+3	; 0x03
    1a08:	81 ff       	sbrs	r24, 1
    1a0a:	dd c1       	rjmp	.+954    	; 0x1dc6 <vfprintf+0x3fe>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	5c 01       	movw	r10, r24
    1a12:	f7 01       	movw	r30, r14
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	f3 01       	movw	r30, r6
    1a18:	93 fd       	sbrc	r25, 3
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	93 ff       	sbrs	r25, 3
    1a1e:	81 91       	ld	r24, Z+
    1a20:	3f 01       	movw	r6, r30
    1a22:	88 23       	and	r24, r24
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <vfprintf+0x60>
    1a26:	53 c1       	rjmp	.+678    	; 0x1cce <vfprintf+0x306>
    1a28:	85 32       	cpi	r24, 0x25	; 37
    1a2a:	39 f4       	brne	.+14     	; 0x1a3a <vfprintf+0x72>
    1a2c:	93 fd       	sbrc	r25, 3
    1a2e:	85 91       	lpm	r24, Z+
    1a30:	93 ff       	sbrs	r25, 3
    1a32:	81 91       	ld	r24, Z+
    1a34:	3f 01       	movw	r6, r30
    1a36:	85 32       	cpi	r24, 0x25	; 37
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <vfprintf+0x7c>
    1a3a:	b7 01       	movw	r22, r14
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1a42:	e7 cf       	rjmp	.-50     	; 0x1a12 <vfprintf+0x4a>
    1a44:	91 2c       	mov	r9, r1
    1a46:	21 2c       	mov	r2, r1
    1a48:	31 2c       	mov	r3, r1
    1a4a:	ff e1       	ldi	r31, 0x1F	; 31
    1a4c:	f3 15       	cp	r31, r3
    1a4e:	38 f0       	brcs	.+14     	; 0x1a5e <vfprintf+0x96>
    1a50:	8b 32       	cpi	r24, 0x2B	; 43
    1a52:	11 f1       	breq	.+68     	; 0x1a98 <vfprintf+0xd0>
    1a54:	90 f4       	brcc	.+36     	; 0x1a7a <vfprintf+0xb2>
    1a56:	80 32       	cpi	r24, 0x20	; 32
    1a58:	09 f1       	breq	.+66     	; 0x1a9c <vfprintf+0xd4>
    1a5a:	83 32       	cpi	r24, 0x23	; 35
    1a5c:	29 f1       	breq	.+74     	; 0x1aa8 <vfprintf+0xe0>
    1a5e:	37 fc       	sbrc	r3, 7
    1a60:	3c c0       	rjmp	.+120    	; 0x1ada <vfprintf+0x112>
    1a62:	20 ed       	ldi	r18, 0xD0	; 208
    1a64:	28 0f       	add	r18, r24
    1a66:	2a 30       	cpi	r18, 0x0A	; 10
    1a68:	50 f5       	brcc	.+84     	; 0x1abe <vfprintf+0xf6>
    1a6a:	36 fe       	sbrs	r3, 6
    1a6c:	20 c0       	rjmp	.+64     	; 0x1aae <vfprintf+0xe6>
    1a6e:	8a e0       	ldi	r24, 0x0A	; 10
    1a70:	98 9e       	mul	r9, r24
    1a72:	20 0d       	add	r18, r0
    1a74:	11 24       	eor	r1, r1
    1a76:	92 2e       	mov	r9, r18
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <vfprintf+0xbe>
    1a7a:	8d 32       	cpi	r24, 0x2D	; 45
    1a7c:	91 f0       	breq	.+36     	; 0x1aa2 <vfprintf+0xda>
    1a7e:	80 33       	cpi	r24, 0x30	; 48
    1a80:	71 f7       	brne	.-36     	; 0x1a5e <vfprintf+0x96>
    1a82:	68 94       	set
    1a84:	30 f8       	bld	r3, 0
    1a86:	f3 01       	movw	r30, r6
    1a88:	93 fd       	sbrc	r25, 3
    1a8a:	85 91       	lpm	r24, Z+
    1a8c:	93 ff       	sbrs	r25, 3
    1a8e:	81 91       	ld	r24, Z+
    1a90:	3f 01       	movw	r6, r30
    1a92:	81 11       	cpse	r24, r1
    1a94:	da cf       	rjmp	.-76     	; 0x1a4a <vfprintf+0x82>
    1a96:	21 c0       	rjmp	.+66     	; 0x1ada <vfprintf+0x112>
    1a98:	68 94       	set
    1a9a:	31 f8       	bld	r3, 1
    1a9c:	68 94       	set
    1a9e:	32 f8       	bld	r3, 2
    1aa0:	f2 cf       	rjmp	.-28     	; 0x1a86 <vfprintf+0xbe>
    1aa2:	68 94       	set
    1aa4:	33 f8       	bld	r3, 3
    1aa6:	ef cf       	rjmp	.-34     	; 0x1a86 <vfprintf+0xbe>
    1aa8:	68 94       	set
    1aaa:	34 f8       	bld	r3, 4
    1aac:	ec cf       	rjmp	.-40     	; 0x1a86 <vfprintf+0xbe>
    1aae:	ea e0       	ldi	r30, 0x0A	; 10
    1ab0:	2e 9e       	mul	r2, r30
    1ab2:	20 0d       	add	r18, r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	22 2e       	mov	r2, r18
    1ab8:	68 94       	set
    1aba:	35 f8       	bld	r3, 5
    1abc:	e4 cf       	rjmp	.-56     	; 0x1a86 <vfprintf+0xbe>
    1abe:	8e 32       	cpi	r24, 0x2E	; 46
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <vfprintf+0x104>
    1ac2:	36 fc       	sbrc	r3, 6
    1ac4:	04 c1       	rjmp	.+520    	; 0x1cce <vfprintf+0x306>
    1ac6:	68 94       	set
    1ac8:	36 f8       	bld	r3, 6
    1aca:	dd cf       	rjmp	.-70     	; 0x1a86 <vfprintf+0xbe>
    1acc:	8c 36       	cpi	r24, 0x6C	; 108
    1ace:	19 f4       	brne	.+6      	; 0x1ad6 <vfprintf+0x10e>
    1ad0:	68 94       	set
    1ad2:	37 f8       	bld	r3, 7
    1ad4:	d8 cf       	rjmp	.-80     	; 0x1a86 <vfprintf+0xbe>
    1ad6:	88 36       	cpi	r24, 0x68	; 104
    1ad8:	b1 f2       	breq	.-84     	; 0x1a86 <vfprintf+0xbe>
    1ada:	98 2f       	mov	r25, r24
    1adc:	9f 7d       	andi	r25, 0xDF	; 223
    1ade:	95 54       	subi	r25, 0x45	; 69
    1ae0:	93 30       	cpi	r25, 0x03	; 3
    1ae2:	e0 f0       	brcs	.+56     	; 0x1b1c <vfprintf+0x154>
    1ae4:	83 36       	cpi	r24, 0x63	; 99
    1ae6:	a1 f1       	breq	.+104    	; 0x1b50 <vfprintf+0x188>
    1ae8:	83 37       	cpi	r24, 0x73	; 115
    1aea:	c1 f1       	breq	.+112    	; 0x1b5c <vfprintf+0x194>
    1aec:	83 35       	cpi	r24, 0x53	; 83
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <vfprintf+0x12a>
    1af0:	63 c0       	rjmp	.+198    	; 0x1bb8 <vfprintf+0x1f0>
    1af2:	28 01       	movw	r4, r16
    1af4:	f2 e0       	ldi	r31, 0x02	; 2
    1af6:	4f 0e       	add	r4, r31
    1af8:	51 1c       	adc	r5, r1
    1afa:	f8 01       	movw	r30, r16
    1afc:	c0 80       	ld	r12, Z
    1afe:	d1 80       	ldd	r13, Z+1	; 0x01
    1b00:	69 2d       	mov	r22, r9
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	36 fc       	sbrc	r3, 6
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <vfprintf+0x144>
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	c6 01       	movw	r24, r12
    1b0e:	0e 94 37 11 	call	0x226e	; 0x226e <strnlen_P>
    1b12:	4c 01       	movw	r8, r24
    1b14:	68 94       	set
    1b16:	37 f8       	bld	r3, 7
    1b18:	82 01       	movw	r16, r4
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <vfprintf+0x168>
    1b1c:	0c 5f       	subi	r16, 0xFC	; 252
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	ff e3       	ldi	r31, 0x3F	; 63
    1b22:	f9 83       	std	Y+1, r31	; 0x01
    1b24:	88 24       	eor	r8, r8
    1b26:	83 94       	inc	r8
    1b28:	91 2c       	mov	r9, r1
    1b2a:	65 01       	movw	r12, r10
    1b2c:	e8 94       	clt
    1b2e:	37 f8       	bld	r3, 7
    1b30:	33 fe       	sbrs	r3, 3
    1b32:	2d c0       	rjmp	.+90     	; 0x1b8e <vfprintf+0x1c6>
    1b34:	52 2c       	mov	r5, r2
    1b36:	81 14       	cp	r8, r1
    1b38:	91 04       	cpc	r9, r1
    1b3a:	71 f5       	brne	.+92     	; 0x1b98 <vfprintf+0x1d0>
    1b3c:	55 20       	and	r5, r5
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <vfprintf+0x17a>
    1b40:	68 cf       	rjmp	.-304    	; 0x1a12 <vfprintf+0x4a>
    1b42:	b7 01       	movw	r22, r14
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1b4c:	5a 94       	dec	r5
    1b4e:	f6 cf       	rjmp	.-20     	; 0x1b3c <vfprintf+0x174>
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 81       	ld	r24, Z
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	0e 5f       	subi	r16, 0xFE	; 254
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	e4 cf       	rjmp	.-56     	; 0x1b24 <vfprintf+0x15c>
    1b5c:	28 01       	movw	r4, r16
    1b5e:	f2 e0       	ldi	r31, 0x02	; 2
    1b60:	4f 0e       	add	r4, r31
    1b62:	51 1c       	adc	r5, r1
    1b64:	f8 01       	movw	r30, r16
    1b66:	c0 80       	ld	r12, Z
    1b68:	d1 80       	ldd	r13, Z+1	; 0x01
    1b6a:	69 2d       	mov	r22, r9
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	36 fc       	sbrc	r3, 6
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <vfprintf+0x1ae>
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	7f ef       	ldi	r23, 0xFF	; 255
    1b76:	c6 01       	movw	r24, r12
    1b78:	0e 94 42 11 	call	0x2284	; 0x2284 <strnlen>
    1b7c:	4c 01       	movw	r8, r24
    1b7e:	82 01       	movw	r16, r4
    1b80:	d5 cf       	rjmp	.-86     	; 0x1b2c <vfprintf+0x164>
    1b82:	b7 01       	movw	r22, r14
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1b8c:	2a 94       	dec	r2
    1b8e:	28 14       	cp	r2, r8
    1b90:	19 04       	cpc	r1, r9
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <vfprintf+0x1ce>
    1b94:	b0 f7       	brcc	.-20     	; 0x1b82 <vfprintf+0x1ba>
    1b96:	ce cf       	rjmp	.-100    	; 0x1b34 <vfprintf+0x16c>
    1b98:	f6 01       	movw	r30, r12
    1b9a:	37 fc       	sbrc	r3, 7
    1b9c:	85 91       	lpm	r24, Z+
    1b9e:	37 fe       	sbrs	r3, 7
    1ba0:	81 91       	ld	r24, Z+
    1ba2:	6f 01       	movw	r12, r30
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1bac:	51 10       	cpse	r5, r1
    1bae:	5a 94       	dec	r5
    1bb0:	f1 e0       	ldi	r31, 0x01	; 1
    1bb2:	8f 1a       	sub	r8, r31
    1bb4:	91 08       	sbc	r9, r1
    1bb6:	bf cf       	rjmp	.-130    	; 0x1b36 <vfprintf+0x16e>
    1bb8:	84 36       	cpi	r24, 0x64	; 100
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <vfprintf+0x1fa>
    1bbc:	89 36       	cpi	r24, 0x69	; 105
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <vfprintf+0x1fa>
    1bc0:	77 c0       	rjmp	.+238    	; 0x1cb0 <vfprintf+0x2e8>
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	37 fe       	sbrs	r3, 7
    1bc6:	6b c0       	rjmp	.+214    	; 0x1c9e <vfprintf+0x2d6>
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0c 5f       	subi	r16, 0xFC	; 252
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	f3 2d       	mov	r31, r3
    1bd6:	ff 76       	andi	r31, 0x6F	; 111
    1bd8:	3f 2e       	mov	r3, r31
    1bda:	97 ff       	sbrs	r25, 7
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <vfprintf+0x228>
    1bde:	90 95       	com	r25
    1be0:	80 95       	com	r24
    1be2:	70 95       	com	r23
    1be4:	61 95       	neg	r22
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	68 94       	set
    1bee:	37 f8       	bld	r3, 7
    1bf0:	2a e0       	ldi	r18, 0x0A	; 10
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	a5 01       	movw	r20, r10
    1bf6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__ultoa_invert>
    1bfa:	c8 2e       	mov	r12, r24
    1bfc:	ca 18       	sub	r12, r10
    1bfe:	8c 2c       	mov	r8, r12
    1c00:	43 2c       	mov	r4, r3
    1c02:	36 fe       	sbrs	r3, 6
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <vfprintf+0x256>
    1c06:	e8 94       	clt
    1c08:	40 f8       	bld	r4, 0
    1c0a:	c9 14       	cp	r12, r9
    1c0c:	40 f4       	brcc	.+16     	; 0x1c1e <vfprintf+0x256>
    1c0e:	34 fe       	sbrs	r3, 4
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <vfprintf+0x254>
    1c12:	32 fc       	sbrc	r3, 2
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x254>
    1c16:	f3 2d       	mov	r31, r3
    1c18:	fe 7e       	andi	r31, 0xEE	; 238
    1c1a:	4f 2e       	mov	r4, r31
    1c1c:	89 2c       	mov	r8, r9
    1c1e:	44 fe       	sbrs	r4, 4
    1c20:	aa c0       	rjmp	.+340    	; 0x1d76 <vfprintf+0x3ae>
    1c22:	fe 01       	movw	r30, r28
    1c24:	ec 0d       	add	r30, r12
    1c26:	f1 1d       	adc	r31, r1
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 33       	cpi	r24, 0x30	; 48
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <vfprintf+0x268>
    1c2e:	9c c0       	rjmp	.+312    	; 0x1d68 <vfprintf+0x3a0>
    1c30:	24 2d       	mov	r18, r4
    1c32:	29 7e       	andi	r18, 0xE9	; 233
    1c34:	42 2e       	mov	r4, r18
    1c36:	84 2d       	mov	r24, r4
    1c38:	88 70       	andi	r24, 0x08	; 8
    1c3a:	58 2e       	mov	r5, r24
    1c3c:	43 fc       	sbrc	r4, 3
    1c3e:	aa c0       	rjmp	.+340    	; 0x1d94 <vfprintf+0x3cc>
    1c40:	40 fe       	sbrs	r4, 0
    1c42:	a4 c0       	rjmp	.+328    	; 0x1d8c <vfprintf+0x3c4>
    1c44:	9c 2c       	mov	r9, r12
    1c46:	82 14       	cp	r8, r2
    1c48:	18 f4       	brcc	.+6      	; 0x1c50 <vfprintf+0x288>
    1c4a:	2c 0c       	add	r2, r12
    1c4c:	92 2c       	mov	r9, r2
    1c4e:	98 18       	sub	r9, r8
    1c50:	44 fe       	sbrs	r4, 4
    1c52:	a6 c0       	rjmp	.+332    	; 0x1da0 <vfprintf+0x3d8>
    1c54:	b7 01       	movw	r22, r14
    1c56:	80 e3       	ldi	r24, 0x30	; 48
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1c5e:	42 fe       	sbrs	r4, 2
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <vfprintf+0x2ac>
    1c62:	88 e7       	ldi	r24, 0x78	; 120
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	41 fe       	sbrs	r4, 1
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <vfprintf+0x2a6>
    1c6a:	88 e5       	ldi	r24, 0x58	; 88
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	b7 01       	movw	r22, r14
    1c70:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1c74:	c9 14       	cp	r12, r9
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <vfprintf+0x2b2>
    1c78:	9f c0       	rjmp	.+318    	; 0x1db8 <vfprintf+0x3f0>
    1c7a:	ca 94       	dec	r12
    1c7c:	d1 2c       	mov	r13, r1
    1c7e:	9f ef       	ldi	r25, 0xFF	; 255
    1c80:	c9 1a       	sub	r12, r25
    1c82:	d9 0a       	sbc	r13, r25
    1c84:	ca 0c       	add	r12, r10
    1c86:	db 1c       	adc	r13, r11
    1c88:	f6 01       	movw	r30, r12
    1c8a:	82 91       	ld	r24, -Z
    1c8c:	6f 01       	movw	r12, r30
    1c8e:	b7 01       	movw	r22, r14
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1c96:	ac 14       	cp	r10, r12
    1c98:	bd 04       	cpc	r11, r13
    1c9a:	b1 f7       	brne	.-20     	; 0x1c88 <vfprintf+0x2c0>
    1c9c:	4f cf       	rjmp	.-354    	; 0x1b3c <vfprintf+0x174>
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	07 2e       	mov	r0, r23
    1ca4:	00 0c       	add	r0, r0
    1ca6:	88 0b       	sbc	r24, r24
    1ca8:	99 0b       	sbc	r25, r25
    1caa:	0e 5f       	subi	r16, 0xFE	; 254
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
    1cae:	92 cf       	rjmp	.-220    	; 0x1bd4 <vfprintf+0x20c>
    1cb0:	d3 2c       	mov	r13, r3
    1cb2:	e8 94       	clt
    1cb4:	d4 f8       	bld	r13, 4
    1cb6:	2a e0       	ldi	r18, 0x0A	; 10
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	85 37       	cpi	r24, 0x75	; 117
    1cbc:	e1 f1       	breq	.+120    	; 0x1d36 <vfprintf+0x36e>
    1cbe:	23 2d       	mov	r18, r3
    1cc0:	29 7f       	andi	r18, 0xF9	; 249
    1cc2:	d2 2e       	mov	r13, r18
    1cc4:	8f 36       	cpi	r24, 0x6F	; 111
    1cc6:	a9 f1       	breq	.+106    	; 0x1d32 <vfprintf+0x36a>
    1cc8:	f0 f4       	brcc	.+60     	; 0x1d06 <vfprintf+0x33e>
    1cca:	88 35       	cpi	r24, 0x58	; 88
    1ccc:	51 f1       	breq	.+84     	; 0x1d22 <vfprintf+0x35a>
    1cce:	f7 01       	movw	r30, r14
    1cd0:	86 81       	ldd	r24, Z+6	; 0x06
    1cd2:	97 81       	ldd	r25, Z+7	; 0x07
    1cd4:	2b 96       	adiw	r28, 0x0b	; 11
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	7f 90       	pop	r7
    1cfa:	6f 90       	pop	r6
    1cfc:	5f 90       	pop	r5
    1cfe:	4f 90       	pop	r4
    1d00:	3f 90       	pop	r3
    1d02:	2f 90       	pop	r2
    1d04:	08 95       	ret
    1d06:	80 37       	cpi	r24, 0x70	; 112
    1d08:	49 f0       	breq	.+18     	; 0x1d1c <vfprintf+0x354>
    1d0a:	88 37       	cpi	r24, 0x78	; 120
    1d0c:	01 f7       	brne	.-64     	; 0x1cce <vfprintf+0x306>
    1d0e:	d4 fe       	sbrs	r13, 4
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x34e>
    1d12:	68 94       	set
    1d14:	d2 f8       	bld	r13, 2
    1d16:	20 e1       	ldi	r18, 0x10	; 16
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	0d c0       	rjmp	.+26     	; 0x1d36 <vfprintf+0x36e>
    1d1c:	68 94       	set
    1d1e:	d4 f8       	bld	r13, 4
    1d20:	f6 cf       	rjmp	.-20     	; 0x1d0e <vfprintf+0x346>
    1d22:	34 fe       	sbrs	r3, 4
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <vfprintf+0x364>
    1d26:	82 2f       	mov	r24, r18
    1d28:	86 60       	ori	r24, 0x06	; 6
    1d2a:	d8 2e       	mov	r13, r24
    1d2c:	20 e1       	ldi	r18, 0x10	; 16
    1d2e:	32 e0       	ldi	r19, 0x02	; 2
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <vfprintf+0x36e>
    1d32:	28 e0       	ldi	r18, 0x08	; 8
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f8 01       	movw	r30, r16
    1d38:	d7 fe       	sbrs	r13, 7
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <vfprintf+0x392>
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0c 5f       	subi	r16, 0xFC	; 252
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	a5 01       	movw	r20, r10
    1d4a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__ultoa_invert>
    1d4e:	c8 2e       	mov	r12, r24
    1d50:	ca 18       	sub	r12, r10
    1d52:	3d 2c       	mov	r3, r13
    1d54:	e8 94       	clt
    1d56:	37 f8       	bld	r3, 7
    1d58:	52 cf       	rjmp	.-348    	; 0x1bfe <vfprintf+0x236>
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	0e 5f       	subi	r16, 0xFE	; 254
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	f0 cf       	rjmp	.-32     	; 0x1d48 <vfprintf+0x380>
    1d68:	42 fc       	sbrc	r4, 2
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <vfprintf+0x3a8>
    1d6c:	83 94       	inc	r8
    1d6e:	63 cf       	rjmp	.-314    	; 0x1c36 <vfprintf+0x26e>
    1d70:	83 94       	inc	r8
    1d72:	83 94       	inc	r8
    1d74:	60 cf       	rjmp	.-320    	; 0x1c36 <vfprintf+0x26e>
    1d76:	84 2d       	mov	r24, r4
    1d78:	86 78       	andi	r24, 0x86	; 134
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <vfprintf+0x3b6>
    1d7c:	5c cf       	rjmp	.-328    	; 0x1c36 <vfprintf+0x26e>
    1d7e:	f6 cf       	rjmp	.-20     	; 0x1d6c <vfprintf+0x3a4>
    1d80:	b7 01       	movw	r22, r14
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1d8a:	83 94       	inc	r8
    1d8c:	82 14       	cp	r8, r2
    1d8e:	c0 f3       	brcs	.-16     	; 0x1d80 <vfprintf+0x3b8>
    1d90:	51 2c       	mov	r5, r1
    1d92:	5e cf       	rjmp	.-324    	; 0x1c50 <vfprintf+0x288>
    1d94:	52 2c       	mov	r5, r2
    1d96:	58 18       	sub	r5, r8
    1d98:	82 14       	cp	r8, r2
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <vfprintf+0x3d6>
    1d9c:	59 cf       	rjmp	.-334    	; 0x1c50 <vfprintf+0x288>
    1d9e:	f8 cf       	rjmp	.-16     	; 0x1d90 <vfprintf+0x3c8>
    1da0:	84 2d       	mov	r24, r4
    1da2:	86 78       	andi	r24, 0x86	; 134
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <vfprintf+0x3e0>
    1da6:	66 cf       	rjmp	.-308    	; 0x1c74 <vfprintf+0x2ac>
    1da8:	8b e2       	ldi	r24, 0x2B	; 43
    1daa:	41 fe       	sbrs	r4, 1
    1dac:	80 e2       	ldi	r24, 0x20	; 32
    1dae:	47 fc       	sbrc	r4, 7
    1db0:	8d e2       	ldi	r24, 0x2D	; 45
    1db2:	b7 01       	movw	r22, r14
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	5c cf       	rjmp	.-328    	; 0x1c70 <vfprintf+0x2a8>
    1db8:	b7 01       	movw	r22, r14
    1dba:	80 e3       	ldi	r24, 0x30	; 48
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 4d 11 	call	0x229a	; 0x229a <fputc>
    1dc2:	9a 94       	dec	r9
    1dc4:	57 cf       	rjmp	.-338    	; 0x1c74 <vfprintf+0x2ac>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	84 cf       	rjmp	.-248    	; 0x1cd4 <vfprintf+0x30c>

00001dcc <dtoa_prf>:
dtoa_prf():
    1dcc:	8f 92       	push	r8
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <dtoa_prf+0x1a>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <dtoa_prf+0x1c>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <dtoa_prf+0x1e>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	6a 01       	movw	r12, r20
    1df0:	f2 2e       	mov	r15, r18
    1df2:	b0 2e       	mov	r11, r16
    1df4:	10 2f       	mov	r17, r16
    1df6:	fb e3       	ldi	r31, 0x3B	; 59
    1df8:	af 2e       	mov	r10, r31
    1dfa:	a0 16       	cp	r10, r16
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <dtoa_prf+0x34>
    1dfe:	1b e3       	ldi	r17, 0x3B	; 59
    1e00:	1f 5f       	subi	r17, 0xFF	; 255
    1e02:	01 2f       	mov	r16, r17
    1e04:	27 e0       	ldi	r18, 0x07	; 7
    1e06:	ae 01       	movw	r20, r28
    1e08:	4f 5f       	subi	r20, 0xFF	; 255
    1e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0c:	0e 94 5f 10 	call	0x20be	; 0x20be <__ftoa_engine>
    1e10:	bc 01       	movw	r22, r24
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	98 2f       	mov	r25, r24
    1e16:	99 70       	andi	r25, 0x09	; 9
    1e18:	91 30       	cpi	r25, 0x01	; 1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <dtoa_prf+0x52>
    1e1c:	4e c0       	rjmp	.+156    	; 0x1eba <dtoa_prf+0xee>
    1e1e:	9b e2       	ldi	r25, 0x2B	; 43
    1e20:	e1 fc       	sbrc	r14, 1
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <dtoa_prf+0x60>
    1e24:	9e 2d       	mov	r25, r14
    1e26:	91 70       	andi	r25, 0x01	; 1
    1e28:	e0 fc       	sbrc	r14, 0
    1e2a:	49 c0       	rjmp	.+146    	; 0x1ebe <dtoa_prf+0xf2>
    1e2c:	5e 2d       	mov	r21, r14
    1e2e:	50 71       	andi	r21, 0x10	; 16
    1e30:	e8 2f       	mov	r30, r24
    1e32:	e8 70       	andi	r30, 0x08	; 8
    1e34:	83 ff       	sbrs	r24, 3
    1e36:	55 c0       	rjmp	.+170    	; 0x1ee2 <dtoa_prf+0x116>
    1e38:	84 e0       	ldi	r24, 0x04	; 4
    1e3a:	91 11       	cpse	r25, r1
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <dtoa_prf+0x74>
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	ef 2d       	mov	r30, r15
    1e42:	e8 1b       	sub	r30, r24
    1e44:	8f 15       	cp	r24, r15
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <dtoa_prf+0x7e>
    1e48:	e0 e0       	ldi	r30, 0x00	; 0
    1e4a:	d6 01       	movw	r26, r12
    1e4c:	8e 2f       	mov	r24, r30
    1e4e:	20 e2       	ldi	r18, 0x20	; 32
    1e50:	55 23       	and	r21, r21
    1e52:	c9 f1       	breq	.+114    	; 0x1ec6 <dtoa_prf+0xfa>
    1e54:	99 23       	and	r25, r25
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <dtoa_prf+0x96>
    1e58:	d6 01       	movw	r26, r12
    1e5a:	9c 93       	st	X, r25
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	6c 01       	movw	r12, r24
    1e62:	96 01       	movw	r18, r12
    1e64:	2d 5f       	subi	r18, 0xFD	; 253
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	e2 fe       	sbrs	r14, 2
    1e6a:	33 c0       	rjmp	.+102    	; 0x1ed2 <dtoa_prf+0x106>
    1e6c:	8e e4       	ldi	r24, 0x4E	; 78
    1e6e:	d6 01       	movw	r26, r12
    1e70:	8c 93       	st	X, r24
    1e72:	91 e4       	ldi	r25, 0x41	; 65
    1e74:	11 96       	adiw	r26, 0x01	; 1
    1e76:	9c 93       	st	X, r25
    1e78:	11 97       	sbiw	r26, 0x01	; 1
    1e7a:	12 96       	adiw	r26, 0x02	; 2
    1e7c:	8c 93       	st	X, r24
    1e7e:	d9 01       	movw	r26, r18
    1e80:	8e 2f       	mov	r24, r30
    1e82:	90 e2       	ldi	r25, 0x20	; 32
    1e84:	81 11       	cpse	r24, r1
    1e86:	2a c0       	rjmp	.+84     	; 0x1edc <dtoa_prf+0x110>
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 2f       	mov	r31, r19
    1e8c:	f1 1d       	adc	r31, r1
    1e8e:	10 82       	st	Z, r1
    1e90:	8e ef       	ldi	r24, 0xFE	; 254
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	29 96       	adiw	r28, 0x09	; 9
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	bf 90       	pop	r11
    1eb2:	af 90       	pop	r10
    1eb4:	9f 90       	pop	r9
    1eb6:	8f 90       	pop	r8
    1eb8:	08 95       	ret
    1eba:	9d e2       	ldi	r25, 0x2D	; 45
    1ebc:	b7 cf       	rjmp	.-146    	; 0x1e2c <dtoa_prf+0x60>
    1ebe:	90 e2       	ldi	r25, 0x20	; 32
    1ec0:	b5 cf       	rjmp	.-150    	; 0x1e2c <dtoa_prf+0x60>
    1ec2:	2d 93       	st	X+, r18
    1ec4:	81 50       	subi	r24, 0x01	; 1
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	fc cf       	rjmp	.-8      	; 0x1ec2 <dtoa_prf+0xf6>
    1eca:	ce 0e       	add	r12, r30
    1ecc:	d1 1c       	adc	r13, r1
    1ece:	e0 e0       	ldi	r30, 0x00	; 0
    1ed0:	c1 cf       	rjmp	.-126    	; 0x1e54 <dtoa_prf+0x88>
    1ed2:	8e e6       	ldi	r24, 0x6E	; 110
    1ed4:	d6 01       	movw	r26, r12
    1ed6:	8c 93       	st	X, r24
    1ed8:	91 e6       	ldi	r25, 0x61	; 97
    1eda:	cc cf       	rjmp	.-104    	; 0x1e74 <dtoa_prf+0xa8>
    1edc:	9d 93       	st	X+, r25
    1ede:	81 50       	subi	r24, 0x01	; 1
    1ee0:	d1 cf       	rjmp	.-94     	; 0x1e84 <dtoa_prf+0xb8>
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	44 70       	andi	r20, 0x04	; 4
    1ee6:	82 ff       	sbrs	r24, 2
    1ee8:	3d c0       	rjmp	.+122    	; 0x1f64 <dtoa_prf+0x198>
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	91 11       	cpse	r25, r1
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <dtoa_prf+0x126>
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	8f 15       	cp	r24, r15
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <dtoa_prf+0x12e>
    1ef6:	ef 2d       	mov	r30, r15
    1ef8:	e8 1b       	sub	r30, r24
    1efa:	d6 01       	movw	r26, r12
    1efc:	8e 2f       	mov	r24, r30
    1efe:	20 e2       	ldi	r18, 0x20	; 32
    1f00:	55 23       	and	r21, r21
    1f02:	09 f1       	breq	.+66     	; 0x1f46 <dtoa_prf+0x17a>
    1f04:	99 23       	and	r25, r25
    1f06:	29 f0       	breq	.+10     	; 0x1f12 <dtoa_prf+0x146>
    1f08:	d6 01       	movw	r26, r12
    1f0a:	9c 93       	st	X, r25
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	6c 01       	movw	r12, r24
    1f12:	96 01       	movw	r18, r12
    1f14:	2d 5f       	subi	r18, 0xFD	; 253
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	e2 fe       	sbrs	r14, 2
    1f1a:	1b c0       	rjmp	.+54     	; 0x1f52 <dtoa_prf+0x186>
    1f1c:	89 e4       	ldi	r24, 0x49	; 73
    1f1e:	d6 01       	movw	r26, r12
    1f20:	8c 93       	st	X, r24
    1f22:	8e e4       	ldi	r24, 0x4E	; 78
    1f24:	11 96       	adiw	r26, 0x01	; 1
    1f26:	8c 93       	st	X, r24
    1f28:	11 97       	sbiw	r26, 0x01	; 1
    1f2a:	86 e4       	ldi	r24, 0x46	; 70
    1f2c:	12 96       	adiw	r26, 0x02	; 2
    1f2e:	8c 93       	st	X, r24
    1f30:	d9 01       	movw	r26, r18
    1f32:	8e 2f       	mov	r24, r30
    1f34:	90 e2       	ldi	r25, 0x20	; 32
    1f36:	88 23       	and	r24, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <dtoa_prf+0x170>
    1f3a:	a6 cf       	rjmp	.-180    	; 0x1e88 <dtoa_prf+0xbc>
    1f3c:	9d 93       	st	X+, r25
    1f3e:	81 50       	subi	r24, 0x01	; 1
    1f40:	fa cf       	rjmp	.-12     	; 0x1f36 <dtoa_prf+0x16a>
    1f42:	2d 93       	st	X+, r18
    1f44:	81 50       	subi	r24, 0x01	; 1
    1f46:	81 11       	cpse	r24, r1
    1f48:	fc cf       	rjmp	.-8      	; 0x1f42 <dtoa_prf+0x176>
    1f4a:	ce 0e       	add	r12, r30
    1f4c:	d1 1c       	adc	r13, r1
    1f4e:	e0 e0       	ldi	r30, 0x00	; 0
    1f50:	d9 cf       	rjmp	.-78     	; 0x1f04 <dtoa_prf+0x138>
    1f52:	89 e6       	ldi	r24, 0x69	; 105
    1f54:	d6 01       	movw	r26, r12
    1f56:	8c 93       	st	X, r24
    1f58:	8e e6       	ldi	r24, 0x6E	; 110
    1f5a:	11 96       	adiw	r26, 0x01	; 1
    1f5c:	8c 93       	st	X, r24
    1f5e:	11 97       	sbiw	r26, 0x01	; 1
    1f60:	86 e6       	ldi	r24, 0x66	; 102
    1f62:	e4 cf       	rjmp	.-56     	; 0x1f2c <dtoa_prf+0x160>
    1f64:	9b 01       	movw	r18, r22
    1f66:	77 ff       	sbrs	r23, 7
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <dtoa_prf+0x1a2>
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	a1 e0       	ldi	r26, 0x01	; 1
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	91 11       	cpse	r25, r1
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <dtoa_prf+0x1ae>
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	31 96       	adiw	r30, 0x01	; 1
    1f7e:	ae 0f       	add	r26, r30
    1f80:	bf 1f       	adc	r27, r31
    1f82:	8b 2c       	mov	r8, r11
    1f84:	91 2c       	mov	r9, r1
    1f86:	bb 20       	and	r11, r11
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <dtoa_prf+0x1c0>
    1f8a:	61 c0       	rjmp	.+194    	; 0x204e <dtoa_prf+0x282>
    1f8c:	54 01       	movw	r10, r8
    1f8e:	ef ef       	ldi	r30, 0xFF	; 255
    1f90:	ae 1a       	sub	r10, r30
    1f92:	be 0a       	sbc	r11, r30
    1f94:	aa 0d       	add	r26, r10
    1f96:	bb 1d       	adc	r27, r11
    1f98:	fa 16       	cp	r15, r26
    1f9a:	1b 06       	cpc	r1, r27
    1f9c:	19 f0       	breq	.+6      	; 0x1fa4 <dtoa_prf+0x1d8>
    1f9e:	14 f0       	brlt	.+4      	; 0x1fa4 <dtoa_prf+0x1d8>
    1fa0:	4f 2d       	mov	r20, r15
    1fa2:	4a 1b       	sub	r20, r26
    1fa4:	51 11       	cpse	r21, r1
    1fa6:	88 c0       	rjmp	.+272    	; 0x20b8 <dtoa_prf+0x2ec>
    1fa8:	e3 fc       	sbrc	r14, 3
    1faa:	59 c0       	rjmp	.+178    	; 0x205e <dtoa_prf+0x292>
    1fac:	76 01       	movw	r14, r12
    1fae:	a4 2f       	mov	r26, r20
    1fb0:	b0 e2       	ldi	r27, 0x20	; 32
    1fb2:	a1 11       	cpse	r26, r1
    1fb4:	4f c0       	rjmp	.+158    	; 0x2054 <dtoa_prf+0x288>
    1fb6:	c4 0e       	add	r12, r20
    1fb8:	d1 1c       	adc	r13, r1
    1fba:	99 23       	and	r25, r25
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <dtoa_prf+0x1f4>
    1fbe:	5b c0       	rjmp	.+182    	; 0x2076 <dtoa_prf+0x2aa>
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	d6 01       	movw	r26, r12
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	90 83       	st	Z, r25
    1fca:	6d 01       	movw	r12, r26
    1fcc:	55 23       	and	r21, r21
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <dtoa_prf+0x206>
    1fd0:	48 c0       	rjmp	.+144    	; 0x2062 <dtoa_prf+0x296>
    1fd2:	01 2f       	mov	r16, r17
    1fd4:	06 0f       	add	r16, r22
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	58 2f       	mov	r21, r24
    1fda:	50 71       	andi	r21, 0x10	; 16
    1fdc:	84 ff       	sbrs	r24, 4
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <dtoa_prf+0x21a>
    1fe0:	91 33       	cpi	r25, 0x31	; 49
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <dtoa_prf+0x21a>
    1fe4:	01 50       	subi	r16, 0x01	; 1
    1fe6:	10 16       	cp	r1, r16
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <dtoa_prf+0x220>
    1fea:	47 c0       	rjmp	.+142    	; 0x207a <dtoa_prf+0x2ae>
    1fec:	09 30       	cpi	r16, 0x09	; 9
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <dtoa_prf+0x226>
    1ff0:	08 e0       	ldi	r16, 0x08	; 8
    1ff2:	ee e2       	ldi	r30, 0x2E	; 46
    1ff4:	fe 2e       	mov	r15, r30
    1ff6:	5b 01       	movw	r10, r22
    1ff8:	a0 1a       	sub	r10, r16
    1ffa:	b1 08       	sbc	r11, r1
    1ffc:	85 01       	movw	r16, r10
    1ffe:	91 94       	neg	r9
    2000:	81 94       	neg	r8
    2002:	91 08       	sbc	r9, r1
    2004:	2f 3f       	cpi	r18, 0xFF	; 255
    2006:	32 07       	cpc	r19, r18
    2008:	29 f4       	brne	.+10     	; 0x2014 <dtoa_prf+0x248>
    200a:	d6 01       	movw	r26, r12
    200c:	fc 92       	st	X, r15
    200e:	f6 01       	movw	r30, r12
    2010:	31 96       	adiw	r30, 0x01	; 1
    2012:	6f 01       	movw	r12, r30
    2014:	62 17       	cp	r22, r18
    2016:	73 07       	cpc	r23, r19
    2018:	94 f1       	brlt	.+100    	; 0x207e <dtoa_prf+0x2b2>
    201a:	02 17       	cp	r16, r18
    201c:	13 07       	cpc	r17, r19
    201e:	7c f5       	brge	.+94     	; 0x207e <dtoa_prf+0x2b2>
    2020:	db 01       	movw	r26, r22
    2022:	a2 1b       	sub	r26, r18
    2024:	b3 0b       	sbc	r27, r19
    2026:	aa 24       	eor	r10, r10
    2028:	a3 94       	inc	r10
    202a:	b1 2c       	mov	r11, r1
    202c:	ac 0e       	add	r10, r28
    202e:	bd 1e       	adc	r11, r29
    2030:	aa 0d       	add	r26, r10
    2032:	bb 1d       	adc	r27, r11
    2034:	11 96       	adiw	r26, 0x01	; 1
    2036:	8c 91       	ld	r24, X
    2038:	21 50       	subi	r18, 0x01	; 1
    203a:	31 09       	sbc	r19, r1
    203c:	d6 01       	movw	r26, r12
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	28 15       	cp	r18, r8
    2042:	39 05       	cpc	r19, r9
    2044:	f4 f0       	brlt	.+60     	; 0x2082 <dtoa_prf+0x2b6>
    2046:	f6 01       	movw	r30, r12
    2048:	80 83       	st	Z, r24
    204a:	6d 01       	movw	r12, r26
    204c:	db cf       	rjmp	.-74     	; 0x2004 <dtoa_prf+0x238>
    204e:	b1 2c       	mov	r11, r1
    2050:	a1 2c       	mov	r10, r1
    2052:	a0 cf       	rjmp	.-192    	; 0x1f94 <dtoa_prf+0x1c8>
    2054:	f7 01       	movw	r30, r14
    2056:	b1 93       	st	Z+, r27
    2058:	7f 01       	movw	r14, r30
    205a:	a1 50       	subi	r26, 0x01	; 1
    205c:	aa cf       	rjmp	.-172    	; 0x1fb2 <dtoa_prf+0x1e6>
    205e:	91 11       	cpse	r25, r1
    2060:	b0 cf       	rjmp	.-160    	; 0x1fc2 <dtoa_prf+0x1f6>
    2062:	d6 01       	movw	r26, r12
    2064:	94 2f       	mov	r25, r20
    2066:	50 e3       	ldi	r21, 0x30	; 48
    2068:	02 c0       	rjmp	.+4      	; 0x206e <dtoa_prf+0x2a2>
    206a:	5d 93       	st	X+, r21
    206c:	91 50       	subi	r25, 0x01	; 1
    206e:	91 11       	cpse	r25, r1
    2070:	fc cf       	rjmp	.-8      	; 0x206a <dtoa_prf+0x29e>
    2072:	c4 0e       	add	r12, r20
    2074:	d1 1c       	adc	r13, r1
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	ac cf       	rjmp	.-168    	; 0x1fd2 <dtoa_prf+0x206>
    207a:	01 e0       	ldi	r16, 0x01	; 1
    207c:	ba cf       	rjmp	.-140    	; 0x1ff2 <dtoa_prf+0x226>
    207e:	80 e3       	ldi	r24, 0x30	; 48
    2080:	db cf       	rjmp	.-74     	; 0x2038 <dtoa_prf+0x26c>
    2082:	62 17       	cp	r22, r18
    2084:	73 07       	cpc	r23, r19
    2086:	31 f4       	brne	.+12     	; 0x2094 <dtoa_prf+0x2c8>
    2088:	96 33       	cpi	r25, 0x36	; 54
    208a:	88 f4       	brcc	.+34     	; 0x20ae <dtoa_prf+0x2e2>
    208c:	95 33       	cpi	r25, 0x35	; 53
    208e:	11 f4       	brne	.+4      	; 0x2094 <dtoa_prf+0x2c8>
    2090:	55 23       	and	r21, r21
    2092:	69 f0       	breq	.+26     	; 0x20ae <dtoa_prf+0x2e2>
    2094:	f6 01       	movw	r30, r12
    2096:	80 83       	st	Z, r24
    2098:	fd 01       	movw	r30, r26
    209a:	84 2f       	mov	r24, r20
    209c:	90 e2       	ldi	r25, 0x20	; 32
    209e:	81 11       	cpse	r24, r1
    20a0:	08 c0       	rjmp	.+16     	; 0x20b2 <dtoa_prf+0x2e6>
    20a2:	a4 0f       	add	r26, r20
    20a4:	b1 1d       	adc	r27, r1
    20a6:	1c 92       	st	X, r1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	f3 ce       	rjmp	.-538    	; 0x1e94 <dtoa_prf+0xc8>
    20ae:	81 e3       	ldi	r24, 0x31	; 49
    20b0:	f1 cf       	rjmp	.-30     	; 0x2094 <dtoa_prf+0x2c8>
    20b2:	91 93       	st	Z+, r25
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	f3 cf       	rjmp	.-26     	; 0x209e <dtoa_prf+0x2d2>
    20b8:	91 11       	cpse	r25, r1
    20ba:	83 cf       	rjmp	.-250    	; 0x1fc2 <dtoa_prf+0x1f6>
    20bc:	8a cf       	rjmp	.-236    	; 0x1fd2 <dtoa_prf+0x206>

000020be <__ftoa_engine>:
__ftoa_engine():
    20be:	28 30       	cpi	r18, 0x08	; 8
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <__ftoa_engine+0x6>
    20c2:	27 e0       	ldi	r18, 0x07	; 7
    20c4:	33 27       	eor	r19, r19
    20c6:	da 01       	movw	r26, r20
    20c8:	99 0f       	add	r25, r25
    20ca:	31 1d       	adc	r19, r1
    20cc:	87 fd       	sbrc	r24, 7
    20ce:	91 60       	ori	r25, 0x01	; 1
    20d0:	00 96       	adiw	r24, 0x00	; 0
    20d2:	61 05       	cpc	r22, r1
    20d4:	71 05       	cpc	r23, r1
    20d6:	39 f4       	brne	.+14     	; 0x20e6 <__ftoa_engine+0x28>
    20d8:	32 60       	ori	r19, 0x02	; 2
    20da:	2e 5f       	subi	r18, 0xFE	; 254
    20dc:	3d 93       	st	X+, r19
    20de:	30 e3       	ldi	r19, 0x30	; 48
    20e0:	2a 95       	dec	r18
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <__ftoa_engine+0x1e>
    20e4:	08 95       	ret
    20e6:	9f 3f       	cpi	r25, 0xFF	; 255
    20e8:	30 f0       	brcs	.+12     	; 0x20f6 <__ftoa_engine+0x38>
    20ea:	80 38       	cpi	r24, 0x80	; 128
    20ec:	71 05       	cpc	r23, r1
    20ee:	61 05       	cpc	r22, r1
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <__ftoa_engine+0x36>
    20f2:	3c 5f       	subi	r19, 0xFC	; 252
    20f4:	3c 5f       	subi	r19, 0xFC	; 252
    20f6:	3d 93       	st	X+, r19
    20f8:	91 30       	cpi	r25, 0x01	; 1
    20fa:	08 f0       	brcs	.+2      	; 0x20fe <__ftoa_engine+0x40>
    20fc:	80 68       	ori	r24, 0x80	; 128
    20fe:	91 1d       	adc	r25, r1
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	1f 93       	push	r17
    2106:	0f 93       	push	r16
    2108:	ff 92       	push	r15
    210a:	ef 92       	push	r14
    210c:	19 2f       	mov	r17, r25
    210e:	98 7f       	andi	r25, 0xF8	; 248
    2110:	96 95       	lsr	r25
    2112:	e9 2f       	mov	r30, r25
    2114:	96 95       	lsr	r25
    2116:	96 95       	lsr	r25
    2118:	e9 0f       	add	r30, r25
    211a:	ff 27       	eor	r31, r31
    211c:	ea 55       	subi	r30, 0x5A	; 90
    211e:	fe 4f       	sbci	r31, 0xFE	; 254
    2120:	99 27       	eor	r25, r25
    2122:	33 27       	eor	r19, r19
    2124:	ee 24       	eor	r14, r14
    2126:	ff 24       	eor	r15, r15
    2128:	a7 01       	movw	r20, r14
    212a:	e7 01       	movw	r28, r14
    212c:	05 90       	lpm	r0, Z+
    212e:	08 94       	sec
    2130:	07 94       	ror	r0
    2132:	28 f4       	brcc	.+10     	; 0x213e <__ftoa_engine+0x80>
    2134:	36 0f       	add	r19, r22
    2136:	e7 1e       	adc	r14, r23
    2138:	f8 1e       	adc	r15, r24
    213a:	49 1f       	adc	r20, r25
    213c:	51 1d       	adc	r21, r1
    213e:	66 0f       	add	r22, r22
    2140:	77 1f       	adc	r23, r23
    2142:	88 1f       	adc	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	06 94       	lsr	r0
    2148:	a1 f7       	brne	.-24     	; 0x2132 <__ftoa_engine+0x74>
    214a:	05 90       	lpm	r0, Z+
    214c:	07 94       	ror	r0
    214e:	28 f4       	brcc	.+10     	; 0x215a <__ftoa_engine+0x9c>
    2150:	e7 0e       	add	r14, r23
    2152:	f8 1e       	adc	r15, r24
    2154:	49 1f       	adc	r20, r25
    2156:	56 1f       	adc	r21, r22
    2158:	c1 1d       	adc	r28, r1
    215a:	77 0f       	add	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	66 1f       	adc	r22, r22
    2162:	06 94       	lsr	r0
    2164:	a1 f7       	brne	.-24     	; 0x214e <__ftoa_engine+0x90>
    2166:	05 90       	lpm	r0, Z+
    2168:	07 94       	ror	r0
    216a:	28 f4       	brcc	.+10     	; 0x2176 <__ftoa_engine+0xb8>
    216c:	f8 0e       	add	r15, r24
    216e:	49 1f       	adc	r20, r25
    2170:	56 1f       	adc	r21, r22
    2172:	c7 1f       	adc	r28, r23
    2174:	d1 1d       	adc	r29, r1
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	66 1f       	adc	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	06 94       	lsr	r0
    2180:	a1 f7       	brne	.-24     	; 0x216a <__ftoa_engine+0xac>
    2182:	05 90       	lpm	r0, Z+
    2184:	07 94       	ror	r0
    2186:	20 f4       	brcc	.+8      	; 0x2190 <__ftoa_engine+0xd2>
    2188:	49 0f       	add	r20, r25
    218a:	56 1f       	adc	r21, r22
    218c:	c7 1f       	adc	r28, r23
    218e:	d8 1f       	adc	r29, r24
    2190:	99 0f       	add	r25, r25
    2192:	66 1f       	adc	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	88 1f       	adc	r24, r24
    2198:	06 94       	lsr	r0
    219a:	a9 f7       	brne	.-22     	; 0x2186 <__ftoa_engine+0xc8>
    219c:	84 91       	lpm	r24, Z
    219e:	10 95       	com	r17
    21a0:	17 70       	andi	r17, 0x07	; 7
    21a2:	41 f0       	breq	.+16     	; 0x21b4 <__ftoa_engine+0xf6>
    21a4:	d6 95       	lsr	r29
    21a6:	c7 95       	ror	r28
    21a8:	57 95       	ror	r21
    21aa:	47 95       	ror	r20
    21ac:	f7 94       	ror	r15
    21ae:	e7 94       	ror	r14
    21b0:	1a 95       	dec	r17
    21b2:	c1 f7       	brne	.-16     	; 0x21a4 <__ftoa_engine+0xe6>
    21b4:	ec e4       	ldi	r30, 0x4C	; 76
    21b6:	f1 e0       	ldi	r31, 0x01	; 1
    21b8:	68 94       	set
    21ba:	15 90       	lpm	r1, Z+
    21bc:	15 91       	lpm	r17, Z+
    21be:	35 91       	lpm	r19, Z+
    21c0:	65 91       	lpm	r22, Z+
    21c2:	95 91       	lpm	r25, Z+
    21c4:	05 90       	lpm	r0, Z+
    21c6:	7f e2       	ldi	r23, 0x2F	; 47
    21c8:	73 95       	inc	r23
    21ca:	e1 18       	sub	r14, r1
    21cc:	f1 0a       	sbc	r15, r17
    21ce:	43 0b       	sbc	r20, r19
    21d0:	56 0b       	sbc	r21, r22
    21d2:	c9 0b       	sbc	r28, r25
    21d4:	d0 09       	sbc	r29, r0
    21d6:	c0 f7       	brcc	.-16     	; 0x21c8 <__ftoa_engine+0x10a>
    21d8:	e1 0c       	add	r14, r1
    21da:	f1 1e       	adc	r15, r17
    21dc:	43 1f       	adc	r20, r19
    21de:	56 1f       	adc	r21, r22
    21e0:	c9 1f       	adc	r28, r25
    21e2:	d0 1d       	adc	r29, r0
    21e4:	7e f4       	brtc	.+30     	; 0x2204 <__stack+0x5>
    21e6:	70 33       	cpi	r23, 0x30	; 48
    21e8:	11 f4       	brne	.+4      	; 0x21ee <__ftoa_engine+0x130>
    21ea:	8a 95       	dec	r24
    21ec:	e6 cf       	rjmp	.-52     	; 0x21ba <__ftoa_engine+0xfc>
    21ee:	e8 94       	clt
    21f0:	01 50       	subi	r16, 0x01	; 1
    21f2:	30 f0       	brcs	.+12     	; 0x2200 <__stack+0x1>
    21f4:	08 0f       	add	r16, r24
    21f6:	0a f4       	brpl	.+2      	; 0x21fa <__ftoa_engine+0x13c>
    21f8:	00 27       	eor	r16, r16
    21fa:	02 17       	cp	r16, r18
    21fc:	08 f4       	brcc	.+2      	; 0x2200 <__stack+0x1>
    21fe:	20 2f       	mov	r18, r16
    2200:	23 95       	inc	r18
    2202:	02 2f       	mov	r16, r18
    2204:	7a 33       	cpi	r23, 0x3A	; 58
    2206:	28 f0       	brcs	.+10     	; 0x2212 <__stack+0x13>
    2208:	79 e3       	ldi	r23, 0x39	; 57
    220a:	7d 93       	st	X+, r23
    220c:	2a 95       	dec	r18
    220e:	e9 f7       	brne	.-6      	; 0x220a <__stack+0xb>
    2210:	10 c0       	rjmp	.+32     	; 0x2232 <__stack+0x33>
    2212:	7d 93       	st	X+, r23
    2214:	2a 95       	dec	r18
    2216:	89 f6       	brne	.-94     	; 0x21ba <__ftoa_engine+0xfc>
    2218:	06 94       	lsr	r0
    221a:	97 95       	ror	r25
    221c:	67 95       	ror	r22
    221e:	37 95       	ror	r19
    2220:	17 95       	ror	r17
    2222:	17 94       	ror	r1
    2224:	e1 18       	sub	r14, r1
    2226:	f1 0a       	sbc	r15, r17
    2228:	43 0b       	sbc	r20, r19
    222a:	56 0b       	sbc	r21, r22
    222c:	c9 0b       	sbc	r28, r25
    222e:	d0 09       	sbc	r29, r0
    2230:	98 f0       	brcs	.+38     	; 0x2258 <__stack+0x59>
    2232:	23 95       	inc	r18
    2234:	7e 91       	ld	r23, -X
    2236:	73 95       	inc	r23
    2238:	7a 33       	cpi	r23, 0x3A	; 58
    223a:	08 f0       	brcs	.+2      	; 0x223e <__stack+0x3f>
    223c:	70 e3       	ldi	r23, 0x30	; 48
    223e:	7c 93       	st	X, r23
    2240:	20 13       	cpse	r18, r16
    2242:	b8 f7       	brcc	.-18     	; 0x2232 <__stack+0x33>
    2244:	7e 91       	ld	r23, -X
    2246:	70 61       	ori	r23, 0x10	; 16
    2248:	7d 93       	st	X+, r23
    224a:	30 f0       	brcs	.+12     	; 0x2258 <__stack+0x59>
    224c:	83 95       	inc	r24
    224e:	71 e3       	ldi	r23, 0x31	; 49
    2250:	7d 93       	st	X+, r23
    2252:	70 e3       	ldi	r23, 0x30	; 48
    2254:	2a 95       	dec	r18
    2256:	e1 f7       	brne	.-8      	; 0x2250 <__stack+0x51>
    2258:	11 24       	eor	r1, r1
    225a:	ef 90       	pop	r14
    225c:	ff 90       	pop	r15
    225e:	0f 91       	pop	r16
    2260:	1f 91       	pop	r17
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	99 27       	eor	r25, r25
    2268:	87 fd       	sbrc	r24, 7
    226a:	90 95       	com	r25
    226c:	08 95       	ret

0000226e <strnlen_P>:
strnlen_P():
    226e:	fc 01       	movw	r30, r24
    2270:	05 90       	lpm	r0, Z+
    2272:	61 50       	subi	r22, 0x01	; 1
    2274:	70 40       	sbci	r23, 0x00	; 0
    2276:	01 10       	cpse	r0, r1
    2278:	d8 f7       	brcc	.-10     	; 0x2270 <strnlen_P+0x2>
    227a:	80 95       	com	r24
    227c:	90 95       	com	r25
    227e:	8e 0f       	add	r24, r30
    2280:	9f 1f       	adc	r25, r31
    2282:	08 95       	ret

00002284 <strnlen>:
strnlen():
    2284:	fc 01       	movw	r30, r24
    2286:	61 50       	subi	r22, 0x01	; 1
    2288:	70 40       	sbci	r23, 0x00	; 0
    228a:	01 90       	ld	r0, Z+
    228c:	01 10       	cpse	r0, r1
    228e:	d8 f7       	brcc	.-10     	; 0x2286 <strnlen+0x2>
    2290:	80 95       	com	r24
    2292:	90 95       	com	r25
    2294:	8e 0f       	add	r24, r30
    2296:	9f 1f       	adc	r25, r31
    2298:	08 95       	ret

0000229a <fputc>:
fputc():
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	18 2f       	mov	r17, r24
    22a4:	09 2f       	mov	r16, r25
    22a6:	eb 01       	movw	r28, r22
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	81 fd       	sbrc	r24, 1
    22ac:	09 c0       	rjmp	.+18     	; 0x22c0 <fputc+0x26>
    22ae:	1f ef       	ldi	r17, 0xFF	; 255
    22b0:	0f ef       	ldi	r16, 0xFF	; 255
    22b2:	81 2f       	mov	r24, r17
    22b4:	90 2f       	mov	r25, r16
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	08 95       	ret
    22c0:	82 ff       	sbrs	r24, 2
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <fputc+0x52>
    22c4:	2e 81       	ldd	r18, Y+6	; 0x06
    22c6:	3f 81       	ldd	r19, Y+7	; 0x07
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	28 17       	cp	r18, r24
    22ce:	39 07       	cpc	r19, r25
    22d0:	3c f4       	brge	.+14     	; 0x22e0 <fputc+0x46>
    22d2:	e8 81       	ld	r30, Y
    22d4:	f9 81       	ldd	r31, Y+1	; 0x01
    22d6:	cf 01       	movw	r24, r30
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	99 83       	std	Y+1, r25	; 0x01
    22dc:	88 83       	st	Y, r24
    22de:	10 83       	st	Z, r17
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	9f 81       	ldd	r25, Y+7	; 0x07
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	9f 83       	std	Y+7, r25	; 0x07
    22e8:	8e 83       	std	Y+6, r24	; 0x06
    22ea:	e3 cf       	rjmp	.-58     	; 0x22b2 <fputc+0x18>
    22ec:	e8 85       	ldd	r30, Y+8	; 0x08
    22ee:	f9 85       	ldd	r31, Y+9	; 0x09
    22f0:	81 2f       	mov	r24, r17
    22f2:	19 95       	eicall
    22f4:	89 2b       	or	r24, r25
    22f6:	a1 f3       	breq	.-24     	; 0x22e0 <fputc+0x46>
    22f8:	da cf       	rjmp	.-76     	; 0x22ae <fputc+0x14>

000022fa <__ultoa_invert>:
__ultoa_invert():
    22fa:	fa 01       	movw	r30, r20
    22fc:	aa 27       	eor	r26, r26
    22fe:	28 30       	cpi	r18, 0x08	; 8
    2300:	51 f1       	breq	.+84     	; 0x2356 <__ultoa_invert+0x5c>
    2302:	20 31       	cpi	r18, 0x10	; 16
    2304:	81 f1       	breq	.+96     	; 0x2366 <__ultoa_invert+0x6c>
    2306:	e8 94       	clt
    2308:	6f 93       	push	r22
    230a:	6e 7f       	andi	r22, 0xFE	; 254
    230c:	6e 5f       	subi	r22, 0xFE	; 254
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	8f 4f       	sbci	r24, 0xFF	; 255
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	af 4f       	sbci	r26, 0xFF	; 255
    2316:	b1 e0       	ldi	r27, 0x01	; 1
    2318:	3e d0       	rcall	.+124    	; 0x2396 <__ultoa_invert+0x9c>
    231a:	b4 e0       	ldi	r27, 0x04	; 4
    231c:	3c d0       	rcall	.+120    	; 0x2396 <__ultoa_invert+0x9c>
    231e:	67 0f       	add	r22, r23
    2320:	78 1f       	adc	r23, r24
    2322:	89 1f       	adc	r24, r25
    2324:	9a 1f       	adc	r25, r26
    2326:	a1 1d       	adc	r26, r1
    2328:	68 0f       	add	r22, r24
    232a:	79 1f       	adc	r23, r25
    232c:	8a 1f       	adc	r24, r26
    232e:	91 1d       	adc	r25, r1
    2330:	a1 1d       	adc	r26, r1
    2332:	6a 0f       	add	r22, r26
    2334:	71 1d       	adc	r23, r1
    2336:	81 1d       	adc	r24, r1
    2338:	91 1d       	adc	r25, r1
    233a:	a1 1d       	adc	r26, r1
    233c:	20 d0       	rcall	.+64     	; 0x237e <__ultoa_invert+0x84>
    233e:	09 f4       	brne	.+2      	; 0x2342 <__ultoa_invert+0x48>
    2340:	68 94       	set
    2342:	3f 91       	pop	r19
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	26 9f       	mul	r18, r22
    2348:	11 24       	eor	r1, r1
    234a:	30 19       	sub	r19, r0
    234c:	30 5d       	subi	r19, 0xD0	; 208
    234e:	31 93       	st	Z+, r19
    2350:	de f6       	brtc	.-74     	; 0x2308 <__ultoa_invert+0xe>
    2352:	cf 01       	movw	r24, r30
    2354:	08 95       	ret
    2356:	46 2f       	mov	r20, r22
    2358:	47 70       	andi	r20, 0x07	; 7
    235a:	40 5d       	subi	r20, 0xD0	; 208
    235c:	41 93       	st	Z+, r20
    235e:	b3 e0       	ldi	r27, 0x03	; 3
    2360:	0f d0       	rcall	.+30     	; 0x2380 <__ultoa_invert+0x86>
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__ultoa_invert+0x5c>
    2364:	f6 cf       	rjmp	.-20     	; 0x2352 <__ultoa_invert+0x58>
    2366:	46 2f       	mov	r20, r22
    2368:	4f 70       	andi	r20, 0x0F	; 15
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	4a 33       	cpi	r20, 0x3A	; 58
    236e:	18 f0       	brcs	.+6      	; 0x2376 <__ultoa_invert+0x7c>
    2370:	49 5d       	subi	r20, 0xD9	; 217
    2372:	31 fd       	sbrc	r19, 1
    2374:	40 52       	subi	r20, 0x20	; 32
    2376:	41 93       	st	Z+, r20
    2378:	02 d0       	rcall	.+4      	; 0x237e <__ultoa_invert+0x84>
    237a:	a9 f7       	brne	.-22     	; 0x2366 <__ultoa_invert+0x6c>
    237c:	ea cf       	rjmp	.-44     	; 0x2352 <__ultoa_invert+0x58>
    237e:	b4 e0       	ldi	r27, 0x04	; 4
    2380:	a6 95       	lsr	r26
    2382:	97 95       	ror	r25
    2384:	87 95       	ror	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	ba 95       	dec	r27
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__ultoa_invert+0x86>
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	61 05       	cpc	r22, r1
    2392:	71 05       	cpc	r23, r1
    2394:	08 95       	ret
    2396:	9b 01       	movw	r18, r22
    2398:	ac 01       	movw	r20, r24
    239a:	0a 2e       	mov	r0, r26
    239c:	06 94       	lsr	r0
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	37 95       	ror	r19
    23a4:	27 95       	ror	r18
    23a6:	ba 95       	dec	r27
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0xa2>
    23aa:	62 0f       	add	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	84 1f       	adc	r24, r20
    23b0:	95 1f       	adc	r25, r21
    23b2:	a0 1d       	adc	r26, r0
    23b4:	08 95       	ret

000023b6 <__subsf3>:
__subsf3():
    23b6:	50 58       	subi	r21, 0x80	; 128

000023b8 <__addsf3>:
    23b8:	bb 27       	eor	r27, r27
    23ba:	aa 27       	eor	r26, r26
    23bc:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__addsf3x>
    23c0:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
__addsf3():
    23c4:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    23c8:	38 f0       	brcs	.+14     	; 0x23d8 <__addsf3+0x20>
    23ca:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    23ce:	20 f0       	brcs	.+8      	; 0x23d8 <__addsf3+0x20>
    23d0:	39 f4       	brne	.+14     	; 0x23e0 <__addsf3+0x28>
    23d2:	9f 3f       	cpi	r25, 0xFF	; 255
    23d4:	19 f4       	brne	.+6      	; 0x23dc <__addsf3+0x24>
    23d6:	26 f4       	brtc	.+8      	; 0x23e0 <__addsf3+0x28>
    23d8:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    23dc:	0e f4       	brtc	.+2      	; 0x23e0 <__addsf3+0x28>
    23de:	e0 95       	com	r30
    23e0:	e7 fb       	bst	r30, 7
    23e2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>

000023e6 <__addsf3x>:
__addsf3x():
    23e6:	e9 2f       	mov	r30, r25
    23e8:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    23ec:	58 f3       	brcs	.-42     	; 0x23c4 <__addsf3+0xc>
    23ee:	ba 17       	cp	r27, r26
    23f0:	62 07       	cpc	r22, r18
    23f2:	73 07       	cpc	r23, r19
    23f4:	84 07       	cpc	r24, r20
    23f6:	95 07       	cpc	r25, r21
    23f8:	20 f0       	brcs	.+8      	; 0x2402 <__addsf3x+0x1c>
    23fa:	79 f4       	brne	.+30     	; 0x241a <__addsf3x+0x34>
    23fc:	a6 f5       	brtc	.+104    	; 0x2466 <__addsf3x+0x80>
    23fe:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_zero>
    2402:	0e f4       	brtc	.+2      	; 0x2406 <__addsf3x+0x20>
    2404:	e0 95       	com	r30
    2406:	0b 2e       	mov	r0, r27
    2408:	ba 2f       	mov	r27, r26
    240a:	a0 2d       	mov	r26, r0
    240c:	0b 01       	movw	r0, r22
    240e:	b9 01       	movw	r22, r18
    2410:	90 01       	movw	r18, r0
    2412:	0c 01       	movw	r0, r24
    2414:	ca 01       	movw	r24, r20
    2416:	a0 01       	movw	r20, r0
    2418:	11 24       	eor	r1, r1
    241a:	ff 27       	eor	r31, r31
    241c:	59 1b       	sub	r21, r25
    241e:	99 f0       	breq	.+38     	; 0x2446 <__addsf3x+0x60>
    2420:	59 3f       	cpi	r21, 0xF9	; 249
    2422:	50 f4       	brcc	.+20     	; 0x2438 <__addsf3x+0x52>
    2424:	50 3e       	cpi	r21, 0xE0	; 224
    2426:	68 f1       	brcs	.+90     	; 0x2482 <__addsf3x+0x9c>
    2428:	1a 16       	cp	r1, r26
    242a:	f0 40       	sbci	r31, 0x00	; 0
    242c:	a2 2f       	mov	r26, r18
    242e:	23 2f       	mov	r18, r19
    2430:	34 2f       	mov	r19, r20
    2432:	44 27       	eor	r20, r20
    2434:	58 5f       	subi	r21, 0xF8	; 248
    2436:	f3 cf       	rjmp	.-26     	; 0x241e <__addsf3x+0x38>
    2438:	46 95       	lsr	r20
    243a:	37 95       	ror	r19
    243c:	27 95       	ror	r18
    243e:	a7 95       	ror	r26
    2440:	f0 40       	sbci	r31, 0x00	; 0
    2442:	53 95       	inc	r21
    2444:	c9 f7       	brne	.-14     	; 0x2438 <__addsf3x+0x52>
    2446:	7e f4       	brtc	.+30     	; 0x2466 <__addsf3x+0x80>
    2448:	1f 16       	cp	r1, r31
    244a:	ba 0b       	sbc	r27, r26
    244c:	62 0b       	sbc	r22, r18
    244e:	73 0b       	sbc	r23, r19
    2450:	84 0b       	sbc	r24, r20
    2452:	ba f0       	brmi	.+46     	; 0x2482 <__addsf3x+0x9c>
    2454:	91 50       	subi	r25, 0x01	; 1
    2456:	a1 f0       	breq	.+40     	; 0x2480 <__addsf3x+0x9a>
    2458:	ff 0f       	add	r31, r31
    245a:	bb 1f       	adc	r27, r27
    245c:	66 1f       	adc	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	c2 f7       	brpl	.-16     	; 0x2454 <__addsf3x+0x6e>
    2464:	0e c0       	rjmp	.+28     	; 0x2482 <__addsf3x+0x9c>
    2466:	ba 0f       	add	r27, r26
    2468:	62 1f       	adc	r22, r18
    246a:	73 1f       	adc	r23, r19
    246c:	84 1f       	adc	r24, r20
    246e:	48 f4       	brcc	.+18     	; 0x2482 <__addsf3x+0x9c>
    2470:	87 95       	ror	r24
    2472:	77 95       	ror	r23
    2474:	67 95       	ror	r22
    2476:	b7 95       	ror	r27
    2478:	f7 95       	ror	r31
    247a:	9e 3f       	cpi	r25, 0xFE	; 254
    247c:	08 f0       	brcs	.+2      	; 0x2480 <__addsf3x+0x9a>
    247e:	b0 cf       	rjmp	.-160    	; 0x23e0 <__addsf3+0x28>
    2480:	93 95       	inc	r25
    2482:	88 0f       	add	r24, r24
    2484:	08 f0       	brcs	.+2      	; 0x2488 <__addsf3x+0xa2>
    2486:	99 27       	eor	r25, r25
    2488:	ee 0f       	add	r30, r30
    248a:	97 95       	ror	r25
    248c:	87 95       	ror	r24
    248e:	08 95       	ret

00002490 <__divsf3>:
    2490:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__divsf3x>
    2494:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    2498:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    249c:	58 f0       	brcs	.+22     	; 0x24b4 <__divsf3+0x24>
    249e:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    24a2:	40 f0       	brcs	.+16     	; 0x24b4 <__divsf3+0x24>
    24a4:	29 f4       	brne	.+10     	; 0x24b0 <__divsf3+0x20>
    24a6:	5f 3f       	cpi	r21, 0xFF	; 255
    24a8:	29 f0       	breq	.+10     	; 0x24b4 <__divsf3+0x24>
    24aa:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    24ae:	51 11       	cpse	r21, r1
    24b0:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
__divsf3():
    24b4:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>

000024b8 <__divsf3x>:
__divsf3x():
    24b8:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    24bc:	68 f3       	brcs	.-38     	; 0x2498 <__divsf3+0x8>

000024be <__divsf3_pse>:
    24be:	99 23       	and	r25, r25
    24c0:	b1 f3       	breq	.-20     	; 0x24ae <__divsf3+0x1e>
    24c2:	55 23       	and	r21, r21
    24c4:	91 f3       	breq	.-28     	; 0x24aa <__divsf3+0x1a>
    24c6:	95 1b       	sub	r25, r21
    24c8:	55 0b       	sbc	r21, r21
    24ca:	bb 27       	eor	r27, r27
    24cc:	aa 27       	eor	r26, r26
    24ce:	62 17       	cp	r22, r18
    24d0:	73 07       	cpc	r23, r19
    24d2:	84 07       	cpc	r24, r20
    24d4:	38 f0       	brcs	.+14     	; 0x24e4 <__divsf3_pse+0x26>
    24d6:	9f 5f       	subi	r25, 0xFF	; 255
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	44 1f       	adc	r20, r20
    24e0:	aa 1f       	adc	r26, r26
    24e2:	a9 f3       	breq	.-22     	; 0x24ce <__divsf3_pse+0x10>
    24e4:	35 d0       	rcall	.+106    	; 0x2550 <__divsf3_pse+0x92>
    24e6:	0e 2e       	mov	r0, r30
    24e8:	3a f0       	brmi	.+14     	; 0x24f8 <__divsf3_pse+0x3a>
    24ea:	e0 e8       	ldi	r30, 0x80	; 128
    24ec:	32 d0       	rcall	.+100    	; 0x2552 <__divsf3_pse+0x94>
    24ee:	91 50       	subi	r25, 0x01	; 1
    24f0:	50 40       	sbci	r21, 0x00	; 0
    24f2:	e6 95       	lsr	r30
    24f4:	00 1c       	adc	r0, r0
    24f6:	ca f7       	brpl	.-14     	; 0x24ea <__divsf3_pse+0x2c>
    24f8:	2b d0       	rcall	.+86     	; 0x2550 <__divsf3_pse+0x92>
    24fa:	fe 2f       	mov	r31, r30
    24fc:	29 d0       	rcall	.+82     	; 0x2550 <__divsf3_pse+0x92>
    24fe:	66 0f       	add	r22, r22
    2500:	77 1f       	adc	r23, r23
    2502:	88 1f       	adc	r24, r24
    2504:	bb 1f       	adc	r27, r27
    2506:	26 17       	cp	r18, r22
    2508:	37 07       	cpc	r19, r23
    250a:	48 07       	cpc	r20, r24
    250c:	ab 07       	cpc	r26, r27
    250e:	b0 e8       	ldi	r27, 0x80	; 128
    2510:	09 f0       	breq	.+2      	; 0x2514 <__divsf3_pse+0x56>
    2512:	bb 0b       	sbc	r27, r27
    2514:	80 2d       	mov	r24, r0
    2516:	bf 01       	movw	r22, r30
    2518:	ff 27       	eor	r31, r31
    251a:	93 58       	subi	r25, 0x83	; 131
    251c:	5f 4f       	sbci	r21, 0xFF	; 255
    251e:	3a f0       	brmi	.+14     	; 0x252e <__divsf3_pse+0x70>
    2520:	9e 3f       	cpi	r25, 0xFE	; 254
    2522:	51 05       	cpc	r21, r1
    2524:	78 f0       	brcs	.+30     	; 0x2544 <__divsf3_pse+0x86>
    2526:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    252a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    252e:	5f 3f       	cpi	r21, 0xFF	; 255
    2530:	e4 f3       	brlt	.-8      	; 0x252a <__divsf3_pse+0x6c>
    2532:	98 3e       	cpi	r25, 0xE8	; 232
    2534:	d4 f3       	brlt	.-12     	; 0x252a <__divsf3_pse+0x6c>
    2536:	86 95       	lsr	r24
    2538:	77 95       	ror	r23
    253a:	67 95       	ror	r22
    253c:	b7 95       	ror	r27
    253e:	f7 95       	ror	r31
    2540:	9f 5f       	subi	r25, 0xFF	; 255
    2542:	c9 f7       	brne	.-14     	; 0x2536 <__divsf3_pse+0x78>
    2544:	88 0f       	add	r24, r24
    2546:	91 1d       	adc	r25, r1
    2548:	96 95       	lsr	r25
    254a:	87 95       	ror	r24
    254c:	97 f9       	bld	r25, 7
    254e:	08 95       	ret
    2550:	e1 e0       	ldi	r30, 0x01	; 1
    2552:	66 0f       	add	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	88 1f       	adc	r24, r24
    2558:	bb 1f       	adc	r27, r27
    255a:	62 17       	cp	r22, r18
    255c:	73 07       	cpc	r23, r19
    255e:	84 07       	cpc	r24, r20
    2560:	ba 07       	cpc	r27, r26
    2562:	20 f0       	brcs	.+8      	; 0x256c <__divsf3_pse+0xae>
    2564:	62 1b       	sub	r22, r18
    2566:	73 0b       	sbc	r23, r19
    2568:	84 0b       	sbc	r24, r20
    256a:	ba 0b       	sbc	r27, r26
    256c:	ee 1f       	adc	r30, r30
    256e:	88 f7       	brcc	.-30     	; 0x2552 <__divsf3_pse+0x94>
    2570:	e0 95       	com	r30
    2572:	08 95       	ret

00002574 <__floatunsisf>:
    2574:	e8 94       	clt
    2576:	09 c0       	rjmp	.+18     	; 0x258a <__floatsisf+0x12>

00002578 <__floatsisf>:
    2578:	97 fb       	bst	r25, 7
    257a:	3e f4       	brtc	.+14     	; 0x258a <__floatsisf+0x12>
    257c:	90 95       	com	r25
    257e:	80 95       	com	r24
    2580:	70 95       	com	r23
    2582:	61 95       	neg	r22
    2584:	7f 4f       	sbci	r23, 0xFF	; 255
    2586:	8f 4f       	sbci	r24, 0xFF	; 255
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	99 23       	and	r25, r25
    258c:	a9 f0       	breq	.+42     	; 0x25b8 <__floatsisf+0x40>
    258e:	f9 2f       	mov	r31, r25
    2590:	96 e9       	ldi	r25, 0x96	; 150
    2592:	bb 27       	eor	r27, r27
__floatsisf():
    2594:	93 95       	inc	r25
    2596:	f6 95       	lsr	r31
    2598:	87 95       	ror	r24
    259a:	77 95       	ror	r23
    259c:	67 95       	ror	r22
    259e:	b7 95       	ror	r27
    25a0:	f1 11       	cpse	r31, r1
    25a2:	f8 cf       	rjmp	.-16     	; 0x2594 <__floatsisf+0x1c>
    25a4:	fa f4       	brpl	.+62     	; 0x25e4 <__floatsisf+0x6c>
    25a6:	bb 0f       	add	r27, r27
    25a8:	11 f4       	brne	.+4      	; 0x25ae <__floatsisf+0x36>
    25aa:	60 ff       	sbrs	r22, 0
    25ac:	1b c0       	rjmp	.+54     	; 0x25e4 <__floatsisf+0x6c>
    25ae:	6f 5f       	subi	r22, 0xFF	; 255
    25b0:	7f 4f       	sbci	r23, 0xFF	; 255
    25b2:	8f 4f       	sbci	r24, 0xFF	; 255
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	16 c0       	rjmp	.+44     	; 0x25e4 <__floatsisf+0x6c>
    25b8:	88 23       	and	r24, r24
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <__floatsisf+0x48>
    25bc:	96 e9       	ldi	r25, 0x96	; 150
    25be:	11 c0       	rjmp	.+34     	; 0x25e2 <__floatsisf+0x6a>
    25c0:	77 23       	and	r23, r23
    25c2:	21 f0       	breq	.+8      	; 0x25cc <__floatsisf+0x54>
    25c4:	9e e8       	ldi	r25, 0x8E	; 142
    25c6:	87 2f       	mov	r24, r23
    25c8:	76 2f       	mov	r23, r22
    25ca:	05 c0       	rjmp	.+10     	; 0x25d6 <__floatsisf+0x5e>
    25cc:	66 23       	and	r22, r22
    25ce:	71 f0       	breq	.+28     	; 0x25ec <__floatsisf+0x74>
    25d0:	96 e8       	ldi	r25, 0x86	; 134
    25d2:	86 2f       	mov	r24, r22
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	2a f0       	brmi	.+10     	; 0x25e4 <__floatsisf+0x6c>
    25da:	9a 95       	dec	r25
    25dc:	66 0f       	add	r22, r22
    25de:	77 1f       	adc	r23, r23
    25e0:	88 1f       	adc	r24, r24
    25e2:	da f7       	brpl	.-10     	; 0x25da <__floatsisf+0x62>
    25e4:	88 0f       	add	r24, r24
    25e6:	96 95       	lsr	r25
    25e8:	87 95       	ror	r24
    25ea:	97 f9       	bld	r25, 7
    25ec:	08 95       	ret

000025ee <__fp_inf>:
__fp_inf():
    25ee:	97 f9       	bld	r25, 7
    25f0:	9f 67       	ori	r25, 0x7F	; 127
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	08 95       	ret

000025fa <__fp_nan>:
__fp_nan():
    25fa:	9f ef       	ldi	r25, 0xFF	; 255
    25fc:	80 ec       	ldi	r24, 0xC0	; 192
    25fe:	08 95       	ret

00002600 <__fp_pscA>:
__fp_pscA():
    2600:	00 24       	eor	r0, r0
    2602:	0a 94       	dec	r0
    2604:	16 16       	cp	r1, r22
    2606:	17 06       	cpc	r1, r23
    2608:	18 06       	cpc	r1, r24
    260a:	09 06       	cpc	r0, r25
    260c:	08 95       	ret

0000260e <__fp_pscB>:
__fp_pscB():
    260e:	00 24       	eor	r0, r0
    2610:	0a 94       	dec	r0
    2612:	12 16       	cp	r1, r18
    2614:	13 06       	cpc	r1, r19
    2616:	14 06       	cpc	r1, r20
    2618:	05 06       	cpc	r0, r21
    261a:	08 95       	ret

0000261c <__fp_round>:
__fp_round():
    261c:	09 2e       	mov	r0, r25
    261e:	03 94       	inc	r0
    2620:	00 0c       	add	r0, r0
    2622:	11 f4       	brne	.+4      	; 0x2628 <__fp_round+0xc>
    2624:	88 23       	and	r24, r24
    2626:	52 f0       	brmi	.+20     	; 0x263c <__fp_round+0x20>
    2628:	bb 0f       	add	r27, r27
    262a:	40 f4       	brcc	.+16     	; 0x263c <__fp_round+0x20>
    262c:	bf 2b       	or	r27, r31
    262e:	11 f4       	brne	.+4      	; 0x2634 <__fp_round+0x18>
    2630:	60 ff       	sbrs	r22, 0
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__fp_round+0x20>
    2634:	6f 5f       	subi	r22, 0xFF	; 255
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	08 95       	ret

0000263e <__fp_split3>:
__fp_split3():
    263e:	57 fd       	sbrc	r21, 7
    2640:	90 58       	subi	r25, 0x80	; 128
    2642:	44 0f       	add	r20, r20
    2644:	55 1f       	adc	r21, r21
    2646:	59 f0       	breq	.+22     	; 0x265e <__fp_splitA+0x10>
    2648:	5f 3f       	cpi	r21, 0xFF	; 255
    264a:	71 f0       	breq	.+28     	; 0x2668 <__fp_splitA+0x1a>
    264c:	47 95       	ror	r20

0000264e <__fp_splitA>:
    264e:	88 0f       	add	r24, r24
    2650:	97 fb       	bst	r25, 7
    2652:	99 1f       	adc	r25, r25
    2654:	61 f0       	breq	.+24     	; 0x266e <__fp_splitA+0x20>
    2656:	9f 3f       	cpi	r25, 0xFF	; 255
    2658:	79 f0       	breq	.+30     	; 0x2678 <__fp_splitA+0x2a>
    265a:	87 95       	ror	r24
    265c:	08 95       	ret
    265e:	12 16       	cp	r1, r18
    2660:	13 06       	cpc	r1, r19
    2662:	14 06       	cpc	r1, r20
    2664:	55 1f       	adc	r21, r21
    2666:	f2 cf       	rjmp	.-28     	; 0x264c <__fp_split3+0xe>
    2668:	46 95       	lsr	r20
    266a:	f1 df       	rcall	.-30     	; 0x264e <__fp_splitA>
    266c:	08 c0       	rjmp	.+16     	; 0x267e <__fp_splitA+0x30>
    266e:	16 16       	cp	r1, r22
    2670:	17 06       	cpc	r1, r23
    2672:	18 06       	cpc	r1, r24
    2674:	99 1f       	adc	r25, r25
    2676:	f1 cf       	rjmp	.-30     	; 0x265a <__fp_splitA+0xc>
    2678:	86 95       	lsr	r24
    267a:	71 05       	cpc	r23, r1
    267c:	61 05       	cpc	r22, r1
    267e:	08 94       	sec
    2680:	08 95       	ret

00002682 <__fp_zero>:
__fp_zero():
    2682:	e8 94       	clt

00002684 <__fp_szero>:
    2684:	bb 27       	eor	r27, r27
    2686:	66 27       	eor	r22, r22
    2688:	77 27       	eor	r23, r23
    268a:	cb 01       	movw	r24, r22
    268c:	97 f9       	bld	r25, 7
    268e:	08 95       	ret

00002690 <__gesf2>:
__gesf2():
    2690:	0e 94 00 14 	call	0x2800	; 0x2800 <__fp_cmp>
    2694:	08 f4       	brcc	.+2      	; 0x2698 <__gesf2+0x8>
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	08 95       	ret

0000269a <__mulsf3>:
__mulsf3():
    269a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__mulsf3x>
    269e:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    26a2:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    26a6:	38 f0       	brcs	.+14     	; 0x26b6 <__mulsf3+0x1c>
    26a8:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    26ac:	20 f0       	brcs	.+8      	; 0x26b6 <__mulsf3+0x1c>
    26ae:	95 23       	and	r25, r21
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <__mulsf3+0x1c>
    26b2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    26b6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    26ba:	11 24       	eor	r1, r1
    26bc:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>

000026c0 <__mulsf3x>:
__mulsf3x():
    26c0:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    26c4:	70 f3       	brcs	.-36     	; 0x26a2 <__mulsf3+0x8>

000026c6 <__mulsf3_pse>:
    26c6:	95 9f       	mul	r25, r21
    26c8:	c1 f3       	breq	.-16     	; 0x26ba <__mulsf3+0x20>
    26ca:	95 0f       	add	r25, r21
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	55 1f       	adc	r21, r21
    26d0:	62 9f       	mul	r22, r18
    26d2:	f0 01       	movw	r30, r0
    26d4:	72 9f       	mul	r23, r18
    26d6:	bb 27       	eor	r27, r27
    26d8:	f0 0d       	add	r31, r0
    26da:	b1 1d       	adc	r27, r1
    26dc:	63 9f       	mul	r22, r19
    26de:	aa 27       	eor	r26, r26
    26e0:	f0 0d       	add	r31, r0
    26e2:	b1 1d       	adc	r27, r1
    26e4:	aa 1f       	adc	r26, r26
    26e6:	64 9f       	mul	r22, r20
    26e8:	66 27       	eor	r22, r22
    26ea:	b0 0d       	add	r27, r0
    26ec:	a1 1d       	adc	r26, r1
    26ee:	66 1f       	adc	r22, r22
    26f0:	82 9f       	mul	r24, r18
    26f2:	22 27       	eor	r18, r18
    26f4:	b0 0d       	add	r27, r0
    26f6:	a1 1d       	adc	r26, r1
    26f8:	62 1f       	adc	r22, r18
    26fa:	73 9f       	mul	r23, r19
    26fc:	b0 0d       	add	r27, r0
    26fe:	a1 1d       	adc	r26, r1
    2700:	62 1f       	adc	r22, r18
    2702:	83 9f       	mul	r24, r19
    2704:	a0 0d       	add	r26, r0
    2706:	61 1d       	adc	r22, r1
    2708:	22 1f       	adc	r18, r18
    270a:	74 9f       	mul	r23, r20
    270c:	33 27       	eor	r19, r19
    270e:	a0 0d       	add	r26, r0
    2710:	61 1d       	adc	r22, r1
    2712:	23 1f       	adc	r18, r19
    2714:	84 9f       	mul	r24, r20
    2716:	60 0d       	add	r22, r0
    2718:	21 1d       	adc	r18, r1
    271a:	82 2f       	mov	r24, r18
    271c:	76 2f       	mov	r23, r22
    271e:	6a 2f       	mov	r22, r26
    2720:	11 24       	eor	r1, r1
    2722:	9f 57       	subi	r25, 0x7F	; 127
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	9a f0       	brmi	.+38     	; 0x274e <__mulsf3_pse+0x88>
    2728:	f1 f0       	breq	.+60     	; 0x2766 <__mulsf3_pse+0xa0>
    272a:	88 23       	and	r24, r24
    272c:	4a f0       	brmi	.+18     	; 0x2740 <__mulsf3_pse+0x7a>
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	bb 1f       	adc	r27, r27
    2734:	66 1f       	adc	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	50 40       	sbci	r21, 0x00	; 0
    273e:	a9 f7       	brne	.-22     	; 0x272a <__mulsf3_pse+0x64>
    2740:	9e 3f       	cpi	r25, 0xFE	; 254
    2742:	51 05       	cpc	r21, r1
    2744:	80 f0       	brcs	.+32     	; 0x2766 <__mulsf3_pse+0xa0>
    2746:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    274a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    274e:	5f 3f       	cpi	r21, 0xFF	; 255
    2750:	e4 f3       	brlt	.-8      	; 0x274a <__mulsf3_pse+0x84>
    2752:	98 3e       	cpi	r25, 0xE8	; 232
    2754:	d4 f3       	brlt	.-12     	; 0x274a <__mulsf3_pse+0x84>
    2756:	86 95       	lsr	r24
    2758:	77 95       	ror	r23
    275a:	67 95       	ror	r22
    275c:	b7 95       	ror	r27
    275e:	f7 95       	ror	r31
    2760:	e7 95       	ror	r30
    2762:	9f 5f       	subi	r25, 0xFF	; 255
    2764:	c1 f7       	brne	.-16     	; 0x2756 <__mulsf3_pse+0x90>
    2766:	fe 2b       	or	r31, r30
    2768:	88 0f       	add	r24, r24
    276a:	91 1d       	adc	r25, r1
    276c:	96 95       	lsr	r25
    276e:	87 95       	ror	r24
    2770:	97 f9       	bld	r25, 7
    2772:	08 95       	ret
    2774:	19 f4       	brne	.+6      	; 0x277c <__mulsf3_pse+0xb6>
    2776:	16 f4       	brtc	.+4      	; 0x277c <__mulsf3_pse+0xb6>
    2778:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    277c:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__fp_mpack>

00002780 <sqrt>:
    2780:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_splitA>
    2784:	b8 f3       	brcs	.-18     	; 0x2774 <__mulsf3_pse+0xae>
    2786:	99 23       	and	r25, r25
    2788:	c9 f3       	breq	.-14     	; 0x277c <__mulsf3_pse+0xb6>
    278a:	b6 f3       	brts	.-20     	; 0x2778 <__mulsf3_pse+0xb2>
    278c:	9f 57       	subi	r25, 0x7F	; 127
    278e:	55 0b       	sbc	r21, r21
    2790:	87 ff       	sbrs	r24, 7
sqrt():
    2792:	0e 94 32 14 	call	0x2864	; 0x2864 <__fp_norm2>
    2796:	00 24       	eor	r0, r0
    2798:	a0 e6       	ldi	r26, 0x60	; 96
    279a:	40 ea       	ldi	r20, 0xA0	; 160
    279c:	90 01       	movw	r18, r0
    279e:	80 58       	subi	r24, 0x80	; 128
    27a0:	56 95       	lsr	r21
    27a2:	97 95       	ror	r25
    27a4:	28 f4       	brcc	.+10     	; 0x27b0 <sqrt+0x30>
    27a6:	80 5c       	subi	r24, 0xC0	; 192
    27a8:	66 0f       	add	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	20 f0       	brcs	.+8      	; 0x27b8 <sqrt+0x38>
    27b0:	26 17       	cp	r18, r22
    27b2:	37 07       	cpc	r19, r23
    27b4:	48 07       	cpc	r20, r24
    27b6:	30 f4       	brcc	.+12     	; 0x27c4 <sqrt+0x44>
    27b8:	62 1b       	sub	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	20 29       	or	r18, r0
    27c0:	31 29       	or	r19, r1
    27c2:	4a 2b       	or	r20, r26
    27c4:	a6 95       	lsr	r26
    27c6:	17 94       	ror	r1
    27c8:	07 94       	ror	r0
    27ca:	20 25       	eor	r18, r0
    27cc:	31 25       	eor	r19, r1
    27ce:	4a 27       	eor	r20, r26
    27d0:	58 f7       	brcc	.-42     	; 0x27a8 <sqrt+0x28>
    27d2:	66 0f       	add	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	88 1f       	adc	r24, r24
    27d8:	20 f0       	brcs	.+8      	; 0x27e2 <sqrt+0x62>
    27da:	26 17       	cp	r18, r22
    27dc:	37 07       	cpc	r19, r23
    27de:	48 07       	cpc	r20, r24
    27e0:	30 f4       	brcc	.+12     	; 0x27ee <sqrt+0x6e>
    27e2:	62 0b       	sbc	r22, r18
    27e4:	73 0b       	sbc	r23, r19
    27e6:	84 0b       	sbc	r24, r20
    27e8:	20 0d       	add	r18, r0
    27ea:	31 1d       	adc	r19, r1
    27ec:	41 1d       	adc	r20, r1
    27ee:	a0 95       	com	r26
    27f0:	81 f7       	brne	.-32     	; 0x27d2 <sqrt+0x52>
    27f2:	b9 01       	movw	r22, r18
    27f4:	84 2f       	mov	r24, r20
    27f6:	91 58       	subi	r25, 0x81	; 129
    27f8:	88 0f       	add	r24, r24
    27fa:	96 95       	lsr	r25
    27fc:	87 95       	ror	r24
    27fe:	08 95       	ret

00002800 <__fp_cmp>:
    2800:	99 0f       	add	r25, r25
    2802:	00 08       	sbc	r0, r0
    2804:	55 0f       	add	r21, r21
    2806:	aa 0b       	sbc	r26, r26
    2808:	e0 e8       	ldi	r30, 0x80	; 128
    280a:	fe ef       	ldi	r31, 0xFE	; 254
__fp_cmp():
    280c:	16 16       	cp	r1, r22
    280e:	17 06       	cpc	r1, r23
    2810:	e8 07       	cpc	r30, r24
    2812:	f9 07       	cpc	r31, r25
    2814:	c0 f0       	brcs	.+48     	; 0x2846 <__fp_cmp+0x46>
    2816:	12 16       	cp	r1, r18
    2818:	13 06       	cpc	r1, r19
    281a:	e4 07       	cpc	r30, r20
    281c:	f5 07       	cpc	r31, r21
    281e:	98 f0       	brcs	.+38     	; 0x2846 <__fp_cmp+0x46>
    2820:	62 1b       	sub	r22, r18
    2822:	73 0b       	sbc	r23, r19
    2824:	84 0b       	sbc	r24, r20
    2826:	95 0b       	sbc	r25, r21
    2828:	39 f4       	brne	.+14     	; 0x2838 <__fp_cmp+0x38>
    282a:	0a 26       	eor	r0, r26
    282c:	61 f0       	breq	.+24     	; 0x2846 <__fp_cmp+0x46>
    282e:	23 2b       	or	r18, r19
    2830:	24 2b       	or	r18, r20
    2832:	25 2b       	or	r18, r21
    2834:	21 f4       	brne	.+8      	; 0x283e <__fp_cmp+0x3e>
    2836:	08 95       	ret
    2838:	0a 26       	eor	r0, r26
    283a:	09 f4       	brne	.+2      	; 0x283e <__fp_cmp+0x3e>
    283c:	a1 40       	sbci	r26, 0x01	; 1
    283e:	a6 95       	lsr	r26
    2840:	8f ef       	ldi	r24, 0xFF	; 255
    2842:	81 1d       	adc	r24, r1
    2844:	81 1d       	adc	r24, r1
    2846:	08 95       	ret

00002848 <__fp_mpack>:
__fp_mpack():
    2848:	9f 3f       	cpi	r25, 0xFF	; 255
    284a:	31 f0       	breq	.+12     	; 0x2858 <__fp_mpack_finite+0xc>

0000284c <__fp_mpack_finite>:
    284c:	91 50       	subi	r25, 0x01	; 1
    284e:	20 f4       	brcc	.+8      	; 0x2858 <__fp_mpack_finite+0xc>
    2850:	87 95       	ror	r24
    2852:	77 95       	ror	r23
    2854:	67 95       	ror	r22
    2856:	b7 95       	ror	r27
    2858:	88 0f       	add	r24, r24
    285a:	91 1d       	adc	r25, r1
    285c:	96 95       	lsr	r25
    285e:	87 95       	ror	r24
    2860:	97 f9       	bld	r25, 7
    2862:	08 95       	ret

00002864 <__fp_norm2>:
__fp_norm2():
    2864:	91 50       	subi	r25, 0x01	; 1
    2866:	50 40       	sbci	r21, 0x00	; 0
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	88 1f       	adc	r24, r24
    286e:	d2 f7       	brpl	.-12     	; 0x2864 <__fp_norm2>
    2870:	08 95       	ret

00002872 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2872:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2874:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2876:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2878:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    287a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <__udivmodsi4_ep>

0000287e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    287e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2880:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2882:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2884:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2886:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2888:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    288a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    288c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    288e:	20 f0       	brcs	.+8      	; 0x2898 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2890:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2892:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2894:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2896:	f5 0b       	sbc	r31, r21

00002898 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2898:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    289a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    289c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    289e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    28a0:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    28a2:	69 f7       	brne	.-38     	; 0x287e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    28a4:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    28a6:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    28a8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    28aa:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    28ac:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    28ae:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    28b0:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    28b2:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    28b4:	08 95       	ret

000028b6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    28b6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    28b8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    28ba:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    28bc:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    28be:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    28c0:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    28c2:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    28c4:	19 94       	eijmp

000028c6 <malloc>:
malloc():
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	91 05       	cpc	r25, r1
    28d2:	10 f4       	brcc	.+4      	; 0x28d8 <malloc+0x12>
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <__flp>
    28dc:	f0 91 6d 03 	lds	r31, 0x036D	; 0x80036d <__flp+0x1>
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	30 97       	sbiw	r30, 0x00	; 0
    28ea:	99 f4       	brne	.+38     	; 0x2912 <malloc+0x4c>
    28ec:	21 15       	cp	r18, r1
    28ee:	31 05       	cpc	r19, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <malloc+0x2e>
    28f2:	4a c0       	rjmp	.+148    	; 0x2988 <malloc+0xc2>
    28f4:	28 1b       	sub	r18, r24
    28f6:	39 0b       	sbc	r19, r25
    28f8:	24 30       	cpi	r18, 0x04	; 4
    28fa:	31 05       	cpc	r19, r1
    28fc:	d8 f5       	brcc	.+118    	; 0x2974 <malloc+0xae>
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	61 15       	cp	r22, r1
    2904:	71 05       	cpc	r23, r1
    2906:	89 f1       	breq	.+98     	; 0x296a <malloc+0xa4>
    2908:	fb 01       	movw	r30, r22
    290a:	93 83       	std	Z+3, r25	; 0x03
    290c:	82 83       	std	Z+2, r24	; 0x02
    290e:	fe 01       	movw	r30, r28
    2910:	11 c0       	rjmp	.+34     	; 0x2934 <malloc+0x6e>
    2912:	40 81       	ld	r20, Z
    2914:	51 81       	ldd	r21, Z+1	; 0x01
    2916:	02 81       	ldd	r16, Z+2	; 0x02
    2918:	13 81       	ldd	r17, Z+3	; 0x03
    291a:	48 17       	cp	r20, r24
    291c:	59 07       	cpc	r21, r25
    291e:	e0 f0       	brcs	.+56     	; 0x2958 <malloc+0x92>
    2920:	48 17       	cp	r20, r24
    2922:	59 07       	cpc	r21, r25
    2924:	99 f4       	brne	.+38     	; 0x294c <malloc+0x86>
    2926:	10 97       	sbiw	r26, 0x00	; 0
    2928:	61 f0       	breq	.+24     	; 0x2942 <malloc+0x7c>
    292a:	12 96       	adiw	r26, 0x02	; 2
    292c:	0c 93       	st	X, r16
    292e:	12 97       	sbiw	r26, 0x02	; 2
    2930:	13 96       	adiw	r26, 0x03	; 3
    2932:	1c 93       	st	X, r17
    2934:	32 96       	adiw	r30, 0x02	; 2
    2936:	cf 01       	movw	r24, r30
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret
    2942:	00 93 6c 03 	sts	0x036C, r16	; 0x80036c <__flp>
    2946:	10 93 6d 03 	sts	0x036D, r17	; 0x80036d <__flp+0x1>
    294a:	f4 cf       	rjmp	.-24     	; 0x2934 <malloc+0x6e>
    294c:	21 15       	cp	r18, r1
    294e:	31 05       	cpc	r19, r1
    2950:	51 f0       	breq	.+20     	; 0x2966 <malloc+0xa0>
    2952:	42 17       	cp	r20, r18
    2954:	53 07       	cpc	r21, r19
    2956:	38 f0       	brcs	.+14     	; 0x2966 <malloc+0xa0>
    2958:	a9 01       	movw	r20, r18
    295a:	db 01       	movw	r26, r22
    295c:	9a 01       	movw	r18, r20
    295e:	bd 01       	movw	r22, r26
    2960:	df 01       	movw	r26, r30
    2962:	f8 01       	movw	r30, r16
    2964:	c1 cf       	rjmp	.-126    	; 0x28e8 <malloc+0x22>
    2966:	ef 01       	movw	r28, r30
    2968:	f9 cf       	rjmp	.-14     	; 0x295c <malloc+0x96>
    296a:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__flp+0x1>
    296e:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__flp>
    2972:	cd cf       	rjmp	.-102    	; 0x290e <malloc+0x48>
    2974:	fe 01       	movw	r30, r28
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	81 93       	st	Z+, r24
    297c:	91 93       	st	Z+, r25
    297e:	22 50       	subi	r18, 0x02	; 2
    2980:	31 09       	sbc	r19, r1
    2982:	39 83       	std	Y+1, r19	; 0x01
    2984:	28 83       	st	Y, r18
    2986:	d7 cf       	rjmp	.-82     	; 0x2936 <malloc+0x70>
    2988:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    298c:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    2990:	23 2b       	or	r18, r19
    2992:	41 f4       	brne	.+16     	; 0x29a4 <malloc+0xde>
    2994:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2998:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    299c:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <__brkval+0x1>
    29a0:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <__brkval>
    29a4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    29a8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    29ac:	21 15       	cp	r18, r1
    29ae:	31 05       	cpc	r19, r1
    29b0:	41 f4       	brne	.+16     	; 0x29c2 <malloc+0xfc>
    29b2:	2d b7       	in	r18, 0x3d	; 61
    29b4:	3e b7       	in	r19, 0x3e	; 62
    29b6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    29ba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    29be:	24 1b       	sub	r18, r20
    29c0:	35 0b       	sbc	r19, r21
    29c2:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__brkval>
    29c6:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__brkval+0x1>
    29ca:	e2 17       	cp	r30, r18
    29cc:	f3 07       	cpc	r31, r19
    29ce:	a0 f4       	brcc	.+40     	; 0x29f8 <malloc+0x132>
    29d0:	2e 1b       	sub	r18, r30
    29d2:	3f 0b       	sbc	r19, r31
    29d4:	28 17       	cp	r18, r24
    29d6:	39 07       	cpc	r19, r25
    29d8:	78 f0       	brcs	.+30     	; 0x29f8 <malloc+0x132>
    29da:	ac 01       	movw	r20, r24
    29dc:	4e 5f       	subi	r20, 0xFE	; 254
    29de:	5f 4f       	sbci	r21, 0xFF	; 255
    29e0:	24 17       	cp	r18, r20
    29e2:	35 07       	cpc	r19, r21
    29e4:	48 f0       	brcs	.+18     	; 0x29f8 <malloc+0x132>
    29e6:	4e 0f       	add	r20, r30
    29e8:	5f 1f       	adc	r21, r31
    29ea:	50 93 6b 03 	sts	0x036B, r21	; 0x80036b <__brkval+0x1>
    29ee:	40 93 6a 03 	sts	0x036A, r20	; 0x80036a <__brkval>
    29f2:	81 93       	st	Z+, r24
    29f4:	91 93       	st	Z+, r25
    29f6:	9f cf       	rjmp	.-194    	; 0x2936 <malloc+0x70>
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	e0 e0       	ldi	r30, 0x00	; 0
    29fc:	9c cf       	rjmp	.-200    	; 0x2936 <malloc+0x70>

000029fe <free>:
free():
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	e9 f0       	breq	.+58     	; 0x2a40 <free+0x42>
    2a06:	fc 01       	movw	r30, r24
    2a08:	32 97       	sbiw	r30, 0x02	; 2
    2a0a:	13 82       	std	Z+3, r1	; 0x03
    2a0c:	12 82       	std	Z+2, r1	; 0x02
    2a0e:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <__flp>
    2a12:	b0 91 6d 03 	lds	r27, 0x036D	; 0x80036d <__flp+0x1>
    2a16:	ed 01       	movw	r28, r26
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	10 97       	sbiw	r26, 0x00	; 0
    2a1e:	a1 f4       	brne	.+40     	; 0x2a48 <free+0x4a>
    2a20:	20 81       	ld	r18, Z
    2a22:	31 81       	ldd	r19, Z+1	; 0x01
    2a24:	82 0f       	add	r24, r18
    2a26:	93 1f       	adc	r25, r19
    2a28:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    2a2c:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    2a30:	28 17       	cp	r18, r24
    2a32:	39 07       	cpc	r19, r25
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <free+0x3a>
    2a36:	61 c0       	rjmp	.+194    	; 0x2afa <free+0xfc>
    2a38:	f0 93 6b 03 	sts	0x036B, r31	; 0x80036b <__brkval+0x1>
    2a3c:	e0 93 6a 03 	sts	0x036A, r30	; 0x80036a <__brkval>
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret
    2a46:	ea 01       	movw	r28, r20
    2a48:	ce 17       	cp	r28, r30
    2a4a:	df 07       	cpc	r29, r31
    2a4c:	e8 f5       	brcc	.+122    	; 0x2ac8 <free+0xca>
    2a4e:	4a 81       	ldd	r20, Y+2	; 0x02
    2a50:	5b 81       	ldd	r21, Y+3	; 0x03
    2a52:	9e 01       	movw	r18, r28
    2a54:	41 15       	cp	r20, r1
    2a56:	51 05       	cpc	r21, r1
    2a58:	b1 f7       	brne	.-20     	; 0x2a46 <free+0x48>
    2a5a:	e9 01       	movw	r28, r18
    2a5c:	fb 83       	std	Y+3, r31	; 0x03
    2a5e:	ea 83       	std	Y+2, r30	; 0x02
    2a60:	49 91       	ld	r20, Y+
    2a62:	59 91       	ld	r21, Y+
    2a64:	c4 0f       	add	r28, r20
    2a66:	d5 1f       	adc	r29, r21
    2a68:	ec 17       	cp	r30, r28
    2a6a:	fd 07       	cpc	r31, r29
    2a6c:	61 f4       	brne	.+24     	; 0x2a86 <free+0x88>
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	02 96       	adiw	r24, 0x02	; 2
    2a74:	84 0f       	add	r24, r20
    2a76:	95 1f       	adc	r25, r21
    2a78:	e9 01       	movw	r28, r18
    2a7a:	99 83       	std	Y+1, r25	; 0x01
    2a7c:	88 83       	st	Y, r24
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	9b 83       	std	Y+3, r25	; 0x03
    2a84:	8a 83       	std	Y+2, r24	; 0x02
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	e0 e0       	ldi	r30, 0x00	; 0
    2a8a:	12 96       	adiw	r26, 0x02	; 2
    2a8c:	8d 91       	ld	r24, X+
    2a8e:	9c 91       	ld	r25, X
    2a90:	13 97       	sbiw	r26, 0x03	; 3
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	b9 f5       	brne	.+110    	; 0x2b04 <free+0x106>
    2a96:	2d 91       	ld	r18, X+
    2a98:	3c 91       	ld	r19, X
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	02 96       	adiw	r24, 0x02	; 2
    2aa0:	82 0f       	add	r24, r18
    2aa2:	93 1f       	adc	r25, r19
    2aa4:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    2aa8:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    2aac:	28 17       	cp	r18, r24
    2aae:	39 07       	cpc	r19, r25
    2ab0:	39 f6       	brne	.-114    	; 0x2a40 <free+0x42>
    2ab2:	30 97       	sbiw	r30, 0x00	; 0
    2ab4:	51 f5       	brne	.+84     	; 0x2b0a <free+0x10c>
    2ab6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__flp+0x1>
    2aba:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__flp>
    2abe:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <__brkval+0x1>
    2ac2:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <__brkval>
    2ac6:	bc cf       	rjmp	.-136    	; 0x2a40 <free+0x42>
    2ac8:	d3 83       	std	Z+3, r29	; 0x03
    2aca:	c2 83       	std	Z+2, r28	; 0x02
    2acc:	40 81       	ld	r20, Z
    2ace:	51 81       	ldd	r21, Z+1	; 0x01
    2ad0:	84 0f       	add	r24, r20
    2ad2:	95 1f       	adc	r25, r21
    2ad4:	c8 17       	cp	r28, r24
    2ad6:	d9 07       	cpc	r29, r25
    2ad8:	61 f4       	brne	.+24     	; 0x2af2 <free+0xf4>
    2ada:	4e 5f       	subi	r20, 0xFE	; 254
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	88 81       	ld	r24, Y
    2ae0:	99 81       	ldd	r25, Y+1	; 0x01
    2ae2:	48 0f       	add	r20, r24
    2ae4:	59 1f       	adc	r21, r25
    2ae6:	51 83       	std	Z+1, r21	; 0x01
    2ae8:	40 83       	st	Z, r20
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	9b 81       	ldd	r25, Y+3	; 0x03
    2aee:	93 83       	std	Z+3, r25	; 0x03
    2af0:	82 83       	std	Z+2, r24	; 0x02
    2af2:	21 15       	cp	r18, r1
    2af4:	31 05       	cpc	r19, r1
    2af6:	09 f0       	breq	.+2      	; 0x2afa <free+0xfc>
    2af8:	b0 cf       	rjmp	.-160    	; 0x2a5a <free+0x5c>
    2afa:	f0 93 6d 03 	sts	0x036D, r31	; 0x80036d <__flp+0x1>
    2afe:	e0 93 6c 03 	sts	0x036C, r30	; 0x80036c <__flp>
    2b02:	9e cf       	rjmp	.-196    	; 0x2a40 <free+0x42>
    2b04:	fd 01       	movw	r30, r26
    2b06:	dc 01       	movw	r26, r24
    2b08:	c0 cf       	rjmp	.-128    	; 0x2a8a <free+0x8c>
    2b0a:	13 82       	std	Z+3, r1	; 0x03
    2b0c:	12 82       	std	Z+2, r1	; 0x02
    2b0e:	d7 cf       	rjmp	.-82     	; 0x2abe <free+0xc0>

00002b10 <sprintf>:
sprintf():
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	0e 89       	ldd	r16, Y+22	; 0x16
    2b2a:	1f 89       	ldd	r17, Y+23	; 0x17
    2b2c:	86 e0       	ldi	r24, 0x06	; 6
    2b2e:	8c 83       	std	Y+4, r24	; 0x04
    2b30:	1a 83       	std	Y+2, r17	; 0x02
    2b32:	09 83       	std	Y+1, r16	; 0x01
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	9f e7       	ldi	r25, 0x7F	; 127
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
    2b3c:	ae 01       	movw	r20, r28
    2b3e:	46 5e       	subi	r20, 0xE6	; 230
    2b40:	5f 4f       	sbci	r21, 0xFF	; 255
    2b42:	68 8d       	ldd	r22, Y+24	; 0x18
    2b44:	79 8d       	ldd	r23, Y+25	; 0x19
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <vfprintf>
    2b4e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b50:	38 85       	ldd	r19, Y+8	; 0x08
    2b52:	02 0f       	add	r16, r18
    2b54:	13 1f       	adc	r17, r19
    2b56:	f8 01       	movw	r30, r16
    2b58:	10 82       	st	Z, r1
    2b5a:	2e 96       	adiw	r28, 0x0e	; 14
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2b70:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    2b72:	cc ec       	ldi	r28, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    2b74:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
    2b76:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    2b78:	06 c0       	rjmp	.+12     	; 0x2b86 <__do_global_dtors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
    2b7a:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2b7c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    2b7e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    2b82:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
    2b84:	01 1d       	adc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2b86:	cd 3c       	cpi	r28, 0xCD	; 205
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    2b88:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
    2b8c:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    2b8e:	a9 f7       	brne	.-22     	; 0x2b7a <__do_global_dtors+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2b90:	f8 94       	cli

00002b92 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2b92:	ff cf       	rjmp	.-2      	; 0x2b92 <__stop_program>

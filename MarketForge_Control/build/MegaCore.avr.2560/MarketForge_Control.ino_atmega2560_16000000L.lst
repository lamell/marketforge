
C:\Users\admin\AppData\Local\Temp\arduino\sketches\7C85B34F86C5F43AA0B8D1064BFD45B9/MarketForge_Control.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__dtors_end>
       4:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
       8:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
       c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      10:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      14:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      18:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      1c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      20:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      24:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      28:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      30:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      34:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      38:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      3c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      40:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      44:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      48:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      4c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      50:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      54:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      58:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      5c:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_23>
      60:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      64:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__vector_25>
      68:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__vector_26>
      6c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      70:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      74:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      78:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      7c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      80:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      84:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      88:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      8c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      90:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      94:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      98:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      9c:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__vector_39>
      a0:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      a4:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      a8:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      ac:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      b0:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      b4:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      b8:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      bc:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      c0:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      c4:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      c8:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      cc:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      d0:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      d4:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      d8:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__vector_54>
      dc:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__vector_55>
      e0:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <turnOffPWM+0x78>
      e8:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <turnOffPWM+0x6c>
      ec:	0c 94 81 09 	jmp	0x1302	; 0x1302 <HardwareSerial::flush()>
      f0:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <turnOffPWM+0x64>
      f4:	0c 94 34 09 	jmp	0x1268	; 0x1268 <HardwareSerial::write(unsigned char)>
      f8:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <tick1Sec()>
      fc:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <turnOffPWM+0xc0>
     100:	0c 94 e7 05 	jmp	0xbce	; 0xbce <turnOffPWM+0x94>
     104:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <HardwareSerial::availableForWrite()>
     108:	0c 94 00 06 	jmp	0xc00	; 0xc00 <turnOffPWM+0xc6>
     10c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <turnOffPWM+0x3c>
     110:	0c 94 dd 05 	jmp	0xbba	; 0xbba <turnOffPWM+0x80>
     114:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2923>
     118:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
     11c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <turnOffPWM+0x9c>
     120:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <turnOffPWM+0x88>
     124:	0c 94 94 08 	jmp	0x1128	; 0x1128 <Print::write(unsigned char const*, unsigned int)>
     128:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <turnOffPWM+0xb8>
     12c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <HardwareSerial::read()>
     130:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <turnOffPWM+0x58>
     134:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <HardwareSerial::peek()>
     138:	0c 94 ef 05 	jmp	0xbde	; 0xbde <turnOffPWM+0xa4>
     13c:	0c 94 f5 05 	jmp	0xbea	; 0xbea <turnOffPWM+0xb0>
     140:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <__divdi3_moddi3+0x16>
     144:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <HardwareSerial::available()>
     148:	0c 94 10 24 	jmp	0x4820	; 0x4820 <_GLOBAL__sub_D_tempSensor>
     14c:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <tickHeater()>
     150:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <turnOffPWM+0x48>
     154:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <turnOffPWM+0x50>
     158:	0c 94 01 06 	jmp	0xc02	; 0xc02 <turnOffPWM+0xc8>

0000015c <__trampolines_end>:
__trampolines_end():
     15c:	00 00       	nop
     15e:	21 00       	.word	0x0021	; ????
     160:	24 00       	.word	0x0024	; ????
     162:	27 00       	.word	0x0027	; ????
     164:	2a 00       	.word	0x002a	; ????
     166:	2d 00       	.word	0x002d	; ????
     168:	30 00       	.word	0x0030	; ????
     16a:	33 00       	.word	0x0033	; ????
     16c:	01 01       	movw	r0, r2
     16e:	00 00       	nop
     170:	04 01       	movw	r0, r8
     172:	07 01       	movw	r0, r14
     174:	0a 01       	movw	r0, r20

00000176 <digital_pin_to_timer_PGM>:
     176:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
     1a2:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000001cc <port_to_input_PGM>:
     1cc:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1dc:	00 01 00 00 03 01 06 01 09 01                       ..........

000001e6 <digital_pin_to_bit_mask_PGM>:
     1e6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1f6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     206:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     216:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     226:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     236:	04 08 10 20 40 80                                   ... @.

0000023c <port_to_output_PGM>:
     23c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     24c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000256 <digital_pin_to_port_PGM>:
     256:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     266:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     276:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     286:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     296:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     2a6:	0a 0a 0a 0a 0a 0a                                   ......

000002ac <__ctors_start>:
__ctors_start():
     2ac:	aa 1b       	sub	r26, r26

000002ae <__ctors_end>:
__dtors_start():
     2ae:	10 24       	eor	r1, r0

000002b0 <__dtors_end>:
__dtors_end():
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	d1 e2       	ldi	r29, 0x21	; 33
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60

000002c0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     2c0:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     2c2:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     2c4:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     2c6:	e8 ea       	ldi	r30, 0xA8	; 168
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     2c8:	f3 e5       	ldi	r31, 0x53	; 83
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     2ca:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     2cc:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     2d0:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     2d2:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     2d4:	ae 31       	cpi	r26, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     2d6:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <__do_copy_data+0x10>

000002da <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2da:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2dc:	ae e1       	ldi	r26, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2de:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <.do_clear_bss_start>

000002e2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2e2:	1d 92       	st	X+, r1

000002e4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2e4:	ac 39       	cpi	r26, 0x9C	; 156
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2e6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <.do_clear_bss_loop>

000002ea <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2ea:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2ec:	c7 e5       	ldi	r28, 0x57	; 87
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2ee:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     2f0:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2f2:	06 c0       	rjmp	.+12     	; 0x300 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2f4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     2f6:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     2f8:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2fa:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2fc:	0e 94 80 27 	call	0x4f00	; 0x4f00 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     300:	c6 35       	cpi	r28, 0x56	; 86
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     302:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     304:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     306:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     308:	a9 f7       	brne	.-22     	; 0x2f4 <__do_global_ctors+0xa>
     30a:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <main>
     30e:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__do_global_dtors>

00000312 <__bad_interrupt>:
__vector_38():
     312:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000316 <VFD_NEC_FC20X2::Init() [clone .constprop.52]>:
_ZN14VFD_NEC_FC20X24InitEv.constprop.52():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:33
        void setSerialPort(Stream * streamObject) {
            _serPort = streamObject;
        }

        void Init() {
            _serPort->write(CURSOR_OFF);
     316:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
     31a:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
     31e:	dc 01       	movw	r26, r24
     320:	ed 91       	ld	r30, X+
     322:	fc 91       	ld	r31, X
     324:	01 90       	ld	r0, Z+
     326:	f0 81       	ld	r31, Z
     328:	e0 2d       	mov	r30, r0
     32a:	64 e1       	ldi	r22, 0x14	; 20
     32c:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:34
            _serPort->write(NORMAL_write);
     32e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
     332:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
     336:	dc 01       	movw	r26, r24
     338:	ed 91       	ld	r30, X+
     33a:	fc 91       	ld	r31, X
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	61 e1       	ldi	r22, 0x11	; 17
     344:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:35
            _serPort->write(BRIGTHNESS_75);
     346:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
     34a:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
     34e:	dc 01       	movw	r26, r24
     350:	ed 91       	ld	r30, X+
     352:	fc 91       	ld	r31, X
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:36
            _serPort->write(CLEAR_DISPLAY);
     35e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
     362:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
     366:	dc 01       	movw	r26, r24
     368:	ed 91       	ld	r30, X+
     36a:	fc 91       	ld	r31, X
     36c:	01 90       	ld	r0, Z+
     36e:	f0 81       	ld	r31, Z
     370:	e0 2d       	mov	r30, r0
     372:	6c e0       	ldi	r22, 0x0C	; 12
     374:	19 94       	eijmp

00000376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>:
_ZL8out_rev_PFvcPvjjEPcjjPKcjjj.constprop.47():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:292
  return i;
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
     376:	2f 92       	push	r2
     378:	3f 92       	push	r3
     37a:	4f 92       	push	r4
     37c:	5f 92       	push	r5
     37e:	6f 92       	push	r6
     380:	7f 92       	push	r7
     382:	8f 92       	push	r8
     384:	9f 92       	push	r9
     386:	af 92       	push	r10
     388:	bf 92       	push	r11
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 d0       	rcall	.+0      	; 0x39c <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]+0x26>
     39c:	1f 92       	push	r1
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	1c 01       	movw	r2, r24
     3a4:	4b 01       	movw	r8, r22
     3a6:	5a 01       	movw	r10, r20
     3a8:	39 01       	movw	r6, r18
     3aa:	27 01       	movw	r4, r14
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:297
{
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     3ac:	96 01       	movw	r18, r12
     3ae:	22 70       	andi	r18, 0x02	; 2
     3b0:	33 27       	eor	r19, r19
     3b2:	3a 83       	std	Y+2, r19	; 0x02
     3b4:	29 83       	std	Y+1, r18	; 0x01
     3b6:	33 e0       	ldi	r19, 0x03	; 3
     3b8:	c3 22       	and	r12, r19
     3ba:	dd 24       	eor	r13, r13
     3bc:	5c 83       	std	Y+4, r21	; 0x04
     3be:	4b 83       	std	Y+3, r20	; 0x03
     3c0:	cd 28       	or	r12, r13
     3c2:	51 f4       	brne	.+20     	; 0x3d8 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]+0x62>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:298
    for (size_t i = len; i < width; i++) {
     3c4:	68 01       	movw	r12, r16
     3c6:	c4 1a       	sub	r12, r20
     3c8:	d5 0a       	sbc	r13, r21
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	9c 81       	ldd	r25, Y+4	; 0x04
     3ce:	8c 0d       	add	r24, r12
     3d0:	9d 1d       	adc	r25, r13
     3d2:	84 15       	cp	r24, r4
     3d4:	95 05       	cpc	r25, r5
     3d6:	b0 f0       	brcs	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3d8:	73 01       	movw	r14, r6
     3da:	e0 0e       	add	r14, r16
     3dc:	f1 1e       	adc	r15, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:297
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     3de:	4b 81       	ldd	r20, Y+3	; 0x03
     3e0:	5c 81       	ldd	r21, Y+4	; 0x04
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:304
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
     3e2:	e6 14       	cp	r14, r6
     3e4:	f7 04       	cpc	r15, r7
     3e6:	f1 f0       	breq	.+60     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:305
    out(buf[--len], buffer, idx++, maxlen);
     3e8:	6a 01       	movw	r12, r20
     3ea:	ff ef       	ldi	r31, 0xFF	; 255
     3ec:	cf 1a       	sub	r12, r31
     3ee:	df 0a       	sbc	r13, r31
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	3f ef       	ldi	r19, 0xFF	; 255
     3f4:	b4 01       	movw	r22, r8
     3f6:	f7 01       	movw	r30, r14
     3f8:	82 91       	ld	r24, -Z
     3fa:	7f 01       	movw	r14, r30
     3fc:	f1 01       	movw	r30, r2
     3fe:	19 95       	eicall
     400:	a6 01       	movw	r20, r12
     402:	ef cf       	rjmp	.-34     	; 0x3e2 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]+0x6c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:299
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    for (size_t i = len; i < width; i++) {
      out(' ', buffer, idx++, maxlen);
     404:	eb 80       	ldd	r14, Y+3	; 0x03
     406:	fc 80       	ldd	r15, Y+4	; 0x04
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	e8 1a       	sub	r14, r24
     40c:	f8 0a       	sbc	r15, r24
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	3f ef       	ldi	r19, 0xFF	; 255
     412:	4b 81       	ldd	r20, Y+3	; 0x03
     414:	5c 81       	ldd	r21, Y+4	; 0x04
     416:	b4 01       	movw	r22, r8
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	f1 01       	movw	r30, r2
     41c:	19 95       	eicall
     41e:	fc 82       	std	Y+4, r15	; 0x04
     420:	eb 82       	std	Y+3, r14	; 0x03
     422:	d3 cf       	rjmp	.-90     	; 0x3ca <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]+0x54>
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	9c 81       	ldd	r25, Y+4	; 0x04
     428:	80 0f       	add	r24, r16
     42a:	91 1f       	adc	r25, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:309
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	3a 81       	ldd	r19, Y+2	; 0x02
     430:	23 2b       	or	r18, r19
     432:	a1 f0       	breq	.+40     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:310
    while (idx - start_idx < width) {
     434:	9c 01       	movw	r18, r24
     436:	2a 19       	sub	r18, r10
     438:	3b 09       	sbc	r19, r11
     43a:	24 15       	cp	r18, r4
     43c:	35 05       	cpc	r19, r5
     43e:	70 f4       	brcc	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:311
      out(' ', buffer, idx++, maxlen);
     440:	fc 01       	movw	r30, r24
     442:	31 96       	adiw	r30, 0x01	; 1
     444:	fa 83       	std	Y+2, r31	; 0x02
     446:	e9 83       	std	Y+1, r30	; 0x01
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	3f ef       	ldi	r19, 0xFF	; 255
     44c:	ac 01       	movw	r20, r24
     44e:	b4 01       	movw	r22, r8
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	f1 01       	movw	r30, r2
     454:	19 95       	eicall
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	ec cf       	rjmp	.-40     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:316
    }
  }

  return idx;
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	bf 90       	pop	r11
     476:	af 90       	pop	r10
     478:	9f 90       	pop	r9
     47a:	8f 90       	pop	r8
     47c:	7f 90       	pop	r7
     47e:	6f 90       	pop	r6
     480:	5f 90       	pop	r5
     482:	4f 90       	pop	r4
     484:	3f 90       	pop	r3
     486:	2f 90       	pop	r2
     488:	08 95       	ret

0000048a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]>:
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:390

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
     48a:	2f 92       	push	r2
     48c:	3f 92       	push	r3
     48e:	4f 92       	push	r4
     490:	5f 92       	push	r5
     492:	6f 92       	push	r6
     494:	7f 92       	push	r7
     496:	8f 92       	push	r8
     498:	9f 92       	push	r9
     49a:	af 92       	push	r10
     49c:	bf 92       	push	r11
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	af 97       	sbiw	r28, 0x2f	; 47
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	9a a7       	std	Y+42, r25	; 0x2a
     4c0:	89 a7       	std	Y+41, r24	; 0x29
     4c2:	7c a7       	std	Y+44, r23	; 0x2c
     4c4:	6b a7       	std	Y+43, r22	; 0x2b
     4c6:	5e a7       	std	Y+46, r21	; 0x2e
     4c8:	4d a7       	std	Y+45, r20	; 0x2d
     4ca:	ca a2       	std	Y+34, r12	; 0x22
     4cc:	db a2       	std	Y+35, r13	; 0x23
     4ce:	ec a2       	std	Y+36, r14	; 0x24
     4d0:	5f 2c       	mov	r5, r15
     4d2:	40 2e       	mov	r4, r16
     4d4:	1d a3       	std	Y+37, r17	; 0x25
     4d6:	32 2e       	mov	r3, r18
     4d8:	23 2e       	mov	r2, r19
     4da:	a8 a6       	std	Y+40, r10	; 0x28
     4dc:	89 a2       	std	Y+33, r8	; 0x21
     4de:	2b 96       	adiw	r28, 0x0b	; 11
     4e0:	8e ac       	ldd	r8, Y+62	; 0x3e
     4e2:	9f ac       	ldd	r9, Y+63	; 0x3f
     4e4:	2b 97       	sbiw	r28, 0x0b	; 11
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:395
{
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
     4e6:	96 01       	movw	r18, r12
     4e8:	4e 2d       	mov	r20, r14
     4ea:	5f 2d       	mov	r21, r15
     4ec:	60 2f       	mov	r22, r16
     4ee:	71 2f       	mov	r23, r17
     4f0:	83 2d       	mov	r24, r3
     4f2:	92 2d       	mov	r25, r2
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     4fa:	09 f0       	breq	.+2      	; 0x4fe <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x74>
     4fc:	4c c0       	rjmp	.+152    	; 0x596 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x10c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:396
    if ( !(flags & FLAGS_PRECISION) ) {
     4fe:	92 fc       	sbrc	r9, 2
     500:	42 c0       	rjmp	.+132    	; 0x586 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xfc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:397
      buf[len++] = '0';
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	89 83       	std	Y+1, r24	; 0x01
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:398
      flags &= ~FLAGS_HASH;
     506:	e8 94       	clt
     508:	84 f8       	bld	r8, 4
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:397
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
    if ( !(flags & FLAGS_PRECISION) ) {
      buf[len++] = '0';
     50a:	66 24       	eor	r6, r6
     50c:	63 94       	inc	r6
     50e:	71 2c       	mov	r7, r1
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:327
{
  size_t unpadded_len = len;

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
     510:	81 fc       	sbrc	r8, 1
     512:	92 c0       	rjmp	.+292    	; 0x638 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1ae>
     514:	c4 01       	movw	r24, r8
     516:	81 70       	andi	r24, 0x01	; 1
     518:	99 27       	eor	r25, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:328
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     51a:	29 96       	adiw	r28, 0x09	; 9
     51c:	2e ad       	ldd	r18, Y+62	; 0x3e
     51e:	3f ad       	ldd	r19, Y+63	; 0x3f
     520:	29 97       	sbiw	r28, 0x09	; 9
     522:	23 2b       	or	r18, r19
     524:	a9 f0       	breq	.+42     	; 0x550 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xc6>
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	09 f4       	brne	.+2      	; 0x52c <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xa2>
     52a:	86 c0       	rjmp	.+268    	; 0x638 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1ae>
     52c:	38 a5       	ldd	r19, Y+40	; 0x28
     52e:	31 11       	cpse	r19, r1
     530:	05 c0       	rjmp	.+10     	; 0x53c <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xb2>
     532:	94 01       	movw	r18, r8
     534:	2c 70       	andi	r18, 0x0C	; 12
     536:	33 27       	eor	r19, r19
     538:	23 2b       	or	r18, r19
     53a:	51 f0       	breq	.+20     	; 0x550 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xc6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:329
        width--;
     53c:	29 96       	adiw	r28, 0x09	; 9
     53e:	4e ad       	ldd	r20, Y+62	; 0x3e
     540:	5f ad       	ldd	r21, Y+63	; 0x3f
     542:	29 97       	sbiw	r28, 0x09	; 9
     544:	41 50       	subi	r20, 0x01	; 1
     546:	51 09       	sbc	r21, r1
     548:	29 96       	adiw	r28, 0x09	; 9
     54a:	5f af       	std	Y+63, r21	; 0x3f
     54c:	4e af       	std	Y+62, r20	; 0x3e
     54e:	29 97       	sbiw	r28, 0x09	; 9
     550:	e1 e0       	ldi	r30, 0x01	; 1
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	e6 0d       	add	r30, r6
     55a:	f7 1d       	adc	r31, r7
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:393

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;
     55c:	83 01       	movw	r16, r6
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:332
    if (!(flags & FLAGS_LEFT)) {
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
        width--;
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
        buf[len++] = '0';
     55e:	20 e3       	ldi	r18, 0x30	; 48
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:331
  {
    if (!(flags & FLAGS_LEFT)) {
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
        width--;
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
     560:	00 97       	sbiw	r24, 0x00	; 0
     562:	09 f4       	brne	.+2      	; 0x566 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xdc>
     564:	6a c0       	rjmp	.+212    	; 0x63a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1b0>
     566:	29 96       	adiw	r28, 0x09	; 9
     568:	4e ad       	ldd	r20, Y+62	; 0x3e
     56a:	5f ad       	ldd	r21, Y+63	; 0x3f
     56c:	29 97       	sbiw	r28, 0x09	; 9
     56e:	04 17       	cp	r16, r20
     570:	15 07       	cpc	r17, r21
     572:	08 f0       	brcs	.+2      	; 0x576 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xec>
     574:	62 c0       	rjmp	.+196    	; 0x63a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1b0>
     576:	00 32       	cpi	r16, 0x20	; 32
     578:	11 05       	cpc	r17, r1
     57a:	09 f4       	brne	.+2      	; 0x57e <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xf4>
     57c:	5e c0       	rjmp	.+188    	; 0x63a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1b0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:332
        buf[len++] = '0';
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	21 93       	st	Z+, r18
     584:	ed cf       	rjmp	.-38     	; 0x560 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0xd6>
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:403
      flags &= ~FLAGS_HASH;
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
     586:	29 a1       	ldd	r18, Y+33	; 0x21
     588:	20 31       	cpi	r18, 0x10	; 16
     58a:	11 f4       	brne	.+4      	; 0x590 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x106>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:404
      flags &= ~FLAGS_HASH;
     58c:	e8 94       	clt
     58e:	84 f8       	bld	r8, 4
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:393

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;
     590:	71 2c       	mov	r7, r1
     592:	61 2c       	mov	r6, r1
     594:	bd cf       	rjmp	.-134    	; 0x510 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x86>
     596:	81 e4       	ldi	r24, 0x41	; 65
     598:	85 fe       	sbrs	r8, 5
     59a:	81 e6       	ldi	r24, 0x61	; 97
     59c:	ae 01       	movw	r20, r28
     59e:	4f 5f       	subi	r20, 0xFF	; 255
     5a0:	5f 4f       	sbci	r21, 0xFF	; 255
     5a2:	5f a3       	std	Y+39, r21	; 0x27
     5a4:	4e a3       	std	Y+38, r20	; 0x26
     5a6:	71 2c       	mov	r7, r1
     5a8:	61 2c       	mov	r6, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:412
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
     5aa:	8a 50       	subi	r24, 0x0A	; 10
     5ac:	8f a7       	std	Y+47, r24	; 0x2f
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:411
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
     5ae:	a9 a0       	ldd	r10, Y+33	; 0x21
     5b0:	b1 2c       	mov	r11, r1
     5b2:	c1 2c       	mov	r12, r1
     5b4:	d1 2c       	mov	r13, r1
     5b6:	e1 2c       	mov	r14, r1
     5b8:	f1 2c       	mov	r15, r1
     5ba:	00 e0       	ldi	r16, 0x00	; 0
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	2a a1       	ldd	r18, Y+34	; 0x22
     5c0:	3b a1       	ldd	r19, Y+35	; 0x23
     5c2:	4c a1       	ldd	r20, Y+36	; 0x24
     5c4:	55 2d       	mov	r21, r5
     5c6:	64 2d       	mov	r22, r4
     5c8:	7d a1       	ldd	r23, Y+37	; 0x25
     5ca:	83 2d       	mov	r24, r3
     5cc:	92 2d       	mov	r25, r2
     5ce:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__umoddi3>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:412
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
     5d2:	2a 30       	cpi	r18, 0x0A	; 10
     5d4:	74 f5       	brge	.+92     	; 0x632 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1a8>
     5d6:	20 5d       	subi	r18, 0xD0	; 208
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	68 1a       	sub	r6, r24
     5dc:	78 0a       	sbc	r7, r24
     5de:	ee a1       	ldd	r30, Y+38	; 0x26
     5e0:	ff a1       	ldd	r31, Y+39	; 0x27
     5e2:	21 93       	st	Z+, r18
     5e4:	ff a3       	std	Y+39, r31	; 0x27
     5e6:	ee a3       	std	Y+38, r30	; 0x26
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:413
      value /= base;
     5e8:	a9 a0       	ldd	r10, Y+33	; 0x21
     5ea:	b1 2c       	mov	r11, r1
     5ec:	c1 2c       	mov	r12, r1
     5ee:	d1 2c       	mov	r13, r1
     5f0:	e1 2c       	mov	r14, r1
     5f2:	f1 2c       	mov	r15, r1
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	2a a1       	ldd	r18, Y+34	; 0x22
     5fa:	3b a1       	ldd	r19, Y+35	; 0x23
     5fc:	4c a1       	ldd	r20, Y+36	; 0x24
     5fe:	55 2d       	mov	r21, r5
     600:	64 2d       	mov	r22, r4
     602:	7d a1       	ldd	r23, Y+37	; 0x25
     604:	83 2d       	mov	r24, r3
     606:	92 2d       	mov	r25, r2
     608:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <__udivdi3>
     60c:	2a a3       	std	Y+34, r18	; 0x22
     60e:	3b a3       	std	Y+35, r19	; 0x23
     610:	4c a3       	std	Y+36, r20	; 0x24
     612:	55 2e       	mov	r5, r21
     614:	46 2e       	mov	r4, r22
     616:	7d a3       	std	Y+37, r23	; 0x25
     618:	38 2e       	mov	r3, r24
     61a:	29 2e       	mov	r2, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:414
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     622:	09 f4       	brne	.+2      	; 0x626 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x19c>
     624:	75 cf       	rjmp	.-278    	; 0x510 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x86>
     626:	f0 e2       	ldi	r31, 0x20	; 32
     628:	6f 16       	cp	r6, r31
     62a:	71 04       	cpc	r7, r1
     62c:	09 f0       	breq	.+2      	; 0x630 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1a6>
     62e:	bf cf       	rjmp	.-130    	; 0x5ae <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x124>
     630:	6f cf       	rjmp	.-290    	; 0x510 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x86>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:412
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
     632:	5f a5       	ldd	r21, Y+47	; 0x2f
     634:	25 0f       	add	r18, r21
     636:	d0 cf       	rjmp	.-96     	; 0x5d8 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x14e>
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:328
  size_t unpadded_len = len;

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     638:	83 01       	movw	r16, r6
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	e0 0f       	add	r30, r16
     644:	f1 1f       	adc	r31, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:337
        buf[len++] = '0';
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
      buf[len++] = '0';
     646:	80 e3       	ldi	r24, 0x30	; 48
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:336
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
        buf[len++] = '0';
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
     648:	27 96       	adiw	r28, 0x07	; 7
     64a:	2e ad       	ldd	r18, Y+62	; 0x3e
     64c:	3f ad       	ldd	r19, Y+63	; 0x3f
     64e:	27 97       	sbiw	r28, 0x07	; 7
     650:	02 17       	cp	r16, r18
     652:	13 07       	cpc	r17, r19
     654:	38 f4       	brcc	.+14     	; 0x664 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1da>
     656:	00 32       	cpi	r16, 0x20	; 32
     658:	11 05       	cpc	r17, r1
     65a:	20 f4       	brcc	.+8      	; 0x664 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1da>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:337
      buf[len++] = '0';
     65c:	0f 5f       	subi	r16, 0xFF	; 255
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	81 93       	st	Z+, r24
     662:	f2 cf       	rjmp	.-28     	; 0x648 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1be>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:340
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
     664:	39 a1       	ldd	r19, Y+33	; 0x21
     666:	38 30       	cpi	r19, 0x08	; 8
     668:	29 f4       	brne	.+10     	; 0x674 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1ea>
     66a:	60 16       	cp	r6, r16
     66c:	71 06       	cpc	r7, r17
     66e:	10 f4       	brcc	.+4      	; 0x674 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1ea>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:342
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
     670:	e8 94       	clt
     672:	84 f8       	bld	r8, 4
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:347
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
     674:	c4 01       	movw	r24, r8
     676:	80 71       	andi	r24, 0x10	; 16
     678:	90 71       	andi	r25, 0x10	; 16
     67a:	89 2b       	or	r24, r25
     67c:	09 f4       	brne	.+2      	; 0x680 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x1f6>
     67e:	47 c0       	rjmp	.+142    	; 0x70e <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x284>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:348
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
     680:	92 fc       	sbrc	r9, 2
     682:	25 c0       	rjmp	.+74     	; 0x6ce <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x244>
     684:	01 15       	cp	r16, r1
     686:	11 05       	cpc	r17, r1
     688:	11 f1       	breq	.+68     	; 0x6ce <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x244>
     68a:	27 96       	adiw	r28, 0x07	; 7
     68c:	4e ad       	ldd	r20, Y+62	; 0x3e
     68e:	5f ad       	ldd	r21, Y+63	; 0x3f
     690:	27 97       	sbiw	r28, 0x07	; 7
     692:	40 17       	cp	r20, r16
     694:	51 07       	cpc	r21, r17
     696:	39 f0       	breq	.+14     	; 0x6a6 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x21c>
     698:	29 96       	adiw	r28, 0x09	; 9
     69a:	8e ad       	ldd	r24, Y+62	; 0x3e
     69c:	9f ad       	ldd	r25, Y+63	; 0x3f
     69e:	29 97       	sbiw	r28, 0x09	; 9
     6a0:	08 17       	cp	r16, r24
     6a2:	19 07       	cpc	r17, r25
     6a4:	a1 f4       	brne	.+40     	; 0x6ce <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x244>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:351
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
     6a6:	60 16       	cp	r6, r16
     6a8:	71 06       	cpc	r7, r17
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x224>
     6ac:	99 c0       	rjmp	.+306    	; 0x7e0 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x356>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:352
        len--;
     6ae:	c8 01       	movw	r24, r16
     6b0:	01 97       	sbiw	r24, 0x01	; 1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:354
      }
      if (len && (base == BASE_HEX)) {
     6b2:	59 f0       	breq	.+22     	; 0x6ca <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x240>
     6b4:	e9 a1       	ldd	r30, Y+33	; 0x21
     6b6:	e0 31       	cpi	r30, 0x10	; 16
     6b8:	09 f0       	breq	.+2      	; 0x6bc <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x232>
     6ba:	6e c0       	rjmp	.+220    	; 0x798 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x30e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:356
        if (unpadded_len < len) {
          len--;
     6bc:	02 50       	subi	r16, 0x02	; 2
     6be:	11 09       	sbc	r17, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:355
      // be the format-specific prefix
      if (unpadded_len < len) {
        len--;
      }
      if (len && (base == BASE_HEX)) {
        if (unpadded_len < len) {
     6c0:	68 16       	cp	r6, r24
     6c2:	79 06       	cpc	r7, r25
     6c4:	40 f0       	brcs	.+16     	; 0x6d6 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x24c>
     6c6:	8c 01       	movw	r16, r24
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x24c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:354
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
        len--;
      }
      if (len && (base == BASE_HEX)) {
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	00 e0       	ldi	r16, 0x00	; 0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:360
        if (unpadded_len < len) {
          len--;
        }
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
     6ce:	f9 a1       	ldd	r31, Y+33	; 0x21
     6d0:	f0 31       	cpi	r31, 0x10	; 16
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x24c>
     6d4:	62 c0       	rjmp	.+196    	; 0x79a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x310>
     6d6:	85 fc       	sbrc	r8, 5
     6d8:	54 c0       	rjmp	.+168    	; 0x782 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2f8>
     6da:	00 32       	cpi	r16, 0x20	; 32
     6dc:	11 05       	cpc	r17, r1
     6de:	40 f5       	brcc	.+80     	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:361
      buf[len++] = 'x';
     6e0:	e1 e0       	ldi	r30, 0x01	; 1
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	ec 0f       	add	r30, r28
     6e6:	fd 1f       	adc	r31, r29
     6e8:	e0 0f       	add	r30, r16
     6ea:	f1 1f       	adc	r31, r17
     6ec:	88 e7       	ldi	r24, 0x78	; 120
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:367
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
      buf[len++] = 'b';
     6ee:	80 83       	st	Z, r24
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
     6f0:	0f 5f       	subi	r16, 0xFF	; 255
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:369
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
     6f4:	00 32       	cpi	r16, 0x20	; 32
     6f6:	11 05       	cpc	r17, r1
     6f8:	d8 f4       	brcc	.+54     	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:370
      buf[len++] = '0';
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ec 0f       	add	r30, r28
     700:	fd 1f       	adc	r31, r29
     702:	e0 0f       	add	r30, r16
     704:	f1 1f       	adc	r31, r17
     706:	80 e3       	ldi	r24, 0x30	; 48
     708:	80 83       	st	Z, r24
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:374
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
     70e:	00 32       	cpi	r16, 0x20	; 32
     710:	11 05       	cpc	r17, r1
     712:	70 f4       	brcc	.+28     	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:375
    if (negative) {
     714:	38 a5       	ldd	r19, Y+40	; 0x28
     716:	33 23       	and	r19, r19
     718:	09 f4       	brne	.+2      	; 0x71c <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x292>
     71a:	4e c0       	rjmp	.+156    	; 0x7b8 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x32e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:376
      buf[len++] = '-';
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	e0 0f       	add	r30, r16
     726:	f1 1f       	adc	r31, r17
     728:	8d e2       	ldi	r24, 0x2D	; 45
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:382
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
     72a:	80 83       	st	Z, r24
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:386
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
     730:	64 01       	movw	r12, r8
     732:	29 96       	adiw	r28, 0x09	; 9
     734:	ee ac       	ldd	r14, Y+62	; 0x3e
     736:	ff ac       	ldd	r15, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5f       	subi	r18, 0xFF	; 255
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	4d a5       	ldd	r20, Y+45	; 0x2d
     742:	5e a5       	ldd	r21, Y+46	; 0x2e
     744:	6b a5       	ldd	r22, Y+43	; 0x2b
     746:	7c a5       	ldd	r23, Y+44	; 0x2c
     748:	89 a5       	ldd	r24, Y+41	; 0x29
     74a:	9a a5       	ldd	r25, Y+42	; 0x2a
     74c:	0e 94 bb 01 	call	0x376	; 0x376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>
_ZL13print_integerPFvcPvjjEPcjjybhjjj.constprop.45():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:418
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
     750:	af 96       	adiw	r28, 0x2f	; 47
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	7f 90       	pop	r7
     776:	6f 90       	pop	r6
     778:	5f 90       	pop	r5
     77a:	4f 90       	pop	r4
     77c:	3f 90       	pop	r3
     77e:	2f 90       	pop	r2
     780:	08 95       	ret
print_integer_finalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:363
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
      buf[len++] = 'x';
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
     782:	00 32       	cpi	r16, 0x20	; 32
     784:	11 05       	cpc	r17, r1
     786:	a0 f6       	brcc	.-88     	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:364
      buf[len++] = 'X';
     788:	e1 e0       	ldi	r30, 0x01	; 1
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ec 0f       	add	r30, r28
     78e:	fd 1f       	adc	r31, r29
     790:	e0 0f       	add	r30, r16
     792:	f1 1f       	adc	r31, r17
     794:	88 e5       	ldi	r24, 0x58	; 88
     796:	ab cf       	rjmp	.-170    	; 0x6ee <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x264>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:354
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
        len--;
      }
      if (len && (base == BASE_HEX)) {
     798:	8c 01       	movw	r16, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:366
      buf[len++] = 'x';
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
     79a:	29 a1       	ldd	r18, Y+33	; 0x21
     79c:	22 30       	cpi	r18, 0x02	; 2
     79e:	09 f0       	breq	.+2      	; 0x7a2 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x318>
     7a0:	a9 cf       	rjmp	.-174    	; 0x6f4 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x26a>
     7a2:	00 32       	cpi	r16, 0x20	; 32
     7a4:	11 05       	cpc	r17, r1
     7a6:	20 f6       	brcc	.-120    	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:367
      buf[len++] = 'b';
     7a8:	e1 e0       	ldi	r30, 0x01	; 1
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	e0 0f       	add	r30, r16
     7b2:	f1 1f       	adc	r31, r17
     7b4:	82 e6       	ldi	r24, 0x62	; 98
     7b6:	9b cf       	rjmp	.-202    	; 0x6ee <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x264>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:378

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
    if (negative) {
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
     7b8:	82 fe       	sbrs	r8, 2
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x342>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:379
      buf[len++] = '+';  // ignore the space if the '+' exists
     7bc:	e1 e0       	ldi	r30, 0x01	; 1
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	ec 0f       	add	r30, r28
     7c2:	fd 1f       	adc	r31, r29
     7c4:	e0 0f       	add	r30, r16
     7c6:	f1 1f       	adc	r31, r17
     7c8:	8b e2       	ldi	r24, 0x2B	; 43
     7ca:	af cf       	rjmp	.-162    	; 0x72a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:381
    }
    else if (flags & FLAGS_SPACE) {
     7cc:	83 fe       	sbrs	r8, 3
     7ce:	b0 cf       	rjmp	.-160    	; 0x730 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:382
      buf[len++] = ' ';
     7d0:	e1 e0       	ldi	r30, 0x01	; 1
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	ec 0f       	add	r30, r28
     7d6:	fd 1f       	adc	r31, r29
     7d8:	e0 0f       	add	r30, r16
     7da:	f1 1f       	adc	r31, r17
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	a5 cf       	rjmp	.-182    	; 0x72a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x2a0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:354
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
        len--;
      }
      if (len && (base == BASE_HEX)) {
     7e0:	49 a1       	ldd	r20, Y+33	; 0x21
     7e2:	40 31       	cpi	r20, 0x10	; 16
     7e4:	d1 f6       	brne	.-76     	; 0x79a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x310>
     7e6:	77 cf       	rjmp	.-274    	; 0x6d6 <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]+0x24c>

000007e8 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]>:
_ZL23print_broken_up_decimal17double_componentsPFvcPvjjEPcjjjjjS3_j.constprop.44():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:557
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
     7e8:	2f 92       	push	r2
     7ea:	3f 92       	push	r3
     7ec:	4f 92       	push	r4
     7ee:	5f 92       	push	r5
     7f0:	6f 92       	push	r6
     7f2:	7f 92       	push	r7
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	6e 97       	sbiw	r28, 0x1e	; 30
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	09 87       	std	Y+9, r16	; 0x09
     81e:	1a 87       	std	Y+10, r17	; 0x0a
     820:	2b 87       	std	Y+11, r18	; 0x0b
     822:	3c 87       	std	Y+12, r19	; 0x0c
     824:	4d 87       	std	Y+13, r20	; 0x0d
     826:	5e 87       	std	Y+14, r21	; 0x0e
     828:	6f 87       	std	Y+15, r22	; 0x0f
     82a:	78 8b       	std	Y+16, r23	; 0x10
     82c:	24 96       	adiw	r28, 0x04	; 4
     82e:	4e ac       	ldd	r4, Y+62	; 0x3e
     830:	5f ac       	ldd	r5, Y+63	; 0x3f
     832:	24 97       	sbiw	r28, 0x04	; 4
     834:	8c 8a       	std	Y+20, r8	; 0x14
     836:	9d 8a       	std	Y+21, r9	; 0x15
     838:	ae 8a       	std	Y+22, r10	; 0x16
     83a:	bf 8a       	std	Y+23, r11	; 0x17
     83c:	c8 8e       	std	Y+24, r12	; 0x18
     83e:	d9 8e       	std	Y+25, r13	; 0x19
     840:	ea 8e       	std	Y+26, r14	; 0x1a
     842:	fb 8e       	std	Y+27, r15	; 0x1b
     844:	8c 8f       	std	Y+28, r24	; 0x1c
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:561
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
     846:	2a ad       	ldd	r18, Y+58	; 0x3a
     848:	3b ad       	ldd	r19, Y+59	; 0x3b
     84a:	23 2b       	or	r18, r19
     84c:	09 f4       	brne	.+2      	; 0x850 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x68>
     84e:	9e c0       	rjmp	.+316    	; 0x98c <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1a4>
     850:	0a 8b       	std	Y+18, r16	; 0x12
     852:	1b 8b       	std	Y+19, r17	; 0x13
     854:	6b 84       	ldd	r6, Y+11	; 0x0b
     856:	7c 84       	ldd	r7, Y+12	; 0x0c
     858:	4a 01       	movw	r8, r20
     85a:	1b 01       	movw	r2, r22
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:566
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
     85c:	ee ad       	ldd	r30, Y+62	; 0x3e
     85e:	ff ad       	ldd	r31, Y+63	; 0x3f
     860:	f3 ff       	sbrs	r31, 3
     862:	3e c0       	rjmp	.+124    	; 0x8e0 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0xf8>
     864:	e4 fd       	sbrc	r30, 4
     866:	3c c0       	rjmp	.+120    	; 0x8e0 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0xf8>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:568
      // %g/%G mandates we skip the trailing 0 digits...
      if (number_.fractional > 0) {
     868:	20 2f       	mov	r18, r16
     86a:	31 2f       	mov	r19, r17
     86c:	a3 01       	movw	r20, r6
     86e:	b4 01       	movw	r22, r8
     870:	c1 01       	movw	r24, r2
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     878:	09 f0       	breq	.+2      	; 0x87c <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x94>
     87a:	0c f4       	brge	.+2      	; 0x87e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x96>
     87c:	9a c0       	rjmp	.+308    	; 0x9b2 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1ca>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:570
        while(true) {
          int_fast64_t digit = number_.fractional % 10U;
     87e:	2a e0       	ldi	r18, 0x0A	; 10
     880:	a2 2e       	mov	r10, r18
     882:	b1 2c       	mov	r11, r1
     884:	c1 2c       	mov	r12, r1
     886:	d1 2c       	mov	r13, r1
     888:	e1 2c       	mov	r14, r1
     88a:	f1 2c       	mov	r15, r1
     88c:	00 e0       	ldi	r16, 0x00	; 0
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	2a 89       	ldd	r18, Y+18	; 0x12
     892:	3b 89       	ldd	r19, Y+19	; 0x13
     894:	a3 01       	movw	r20, r6
     896:	b4 01       	movw	r22, r8
     898:	c1 01       	movw	r24, r2
     89a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__moddi3>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:571
          if (digit != 0) {
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     8a4:	99 f4       	brne	.+38     	; 0x8cc <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0xe4>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:574
            break;
          }
          --count;
     8a6:	2a ad       	ldd	r18, Y+58	; 0x3a
     8a8:	3b ad       	ldd	r19, Y+59	; 0x3b
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	31 09       	sbc	r19, r1
     8ae:	3b af       	std	Y+59, r19	; 0x3b
     8b0:	2a af       	std	Y+58, r18	; 0x3a
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:575
          number_.fractional /= 10U;
     8b2:	2a 89       	ldd	r18, Y+18	; 0x12
     8b4:	3b 89       	ldd	r19, Y+19	; 0x13
     8b6:	a3 01       	movw	r20, r6
     8b8:	b4 01       	movw	r22, r8
     8ba:	c1 01       	movw	r24, r2
     8bc:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__divdi3>
     8c0:	2a 8b       	std	Y+18, r18	; 0x12
     8c2:	3b 8b       	std	Y+19, r19	; 0x13
     8c4:	3a 01       	movw	r6, r20
     8c6:	4b 01       	movw	r8, r22
     8c8:	1c 01       	movw	r2, r24
     8ca:	d9 cf       	rjmp	.-78     	; 0x87e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x96>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:583
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
     8cc:	2a 89       	ldd	r18, Y+18	; 0x12
     8ce:	3b 89       	ldd	r19, Y+19	; 0x13
     8d0:	a3 01       	movw	r20, r6
     8d2:	b4 01       	movw	r22, r8
     8d4:	c1 01       	movw	r24, r2
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0xf8>
     8de:	69 c0       	rjmp	.+210    	; 0x9b2 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1ca>
     8e0:	22 96       	adiw	r28, 0x02	; 2
     8e2:	8e ad       	ldd	r24, Y+62	; 0x3e
     8e4:	9f ad       	ldd	r25, Y+63	; 0x3f
     8e6:	22 97       	sbiw	r28, 0x02	; 2
     8e8:	84 0d       	add	r24, r4
     8ea:	95 1d       	adc	r25, r5
     8ec:	9e 8f       	std	Y+30, r25	; 0x1e
     8ee:	8d 8f       	std	Y+29, r24	; 0x1d
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:584
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	49 16       	cp	r4, r25
     8f4:	51 04       	cpc	r5, r1
     8f6:	08 f0       	brcs	.+2      	; 0x8fa <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x112>
     8f8:	96 c0       	rjmp	.+300    	; 0xa26 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x23e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:585
        --count;
     8fa:	ea ad       	ldd	r30, Y+58	; 0x3a
     8fc:	fb ad       	ldd	r31, Y+59	; 0x3b
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	fb af       	std	Y+59, r31	; 0x3b
     902:	ea af       	std	Y+58, r30	; 0x3a
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:586
        buf[len++] = (char)('0' + number_.fractional % 10U);
     904:	ff ef       	ldi	r31, 0xFF	; 255
     906:	4f 1a       	sub	r4, r31
     908:	5f 0a       	sbc	r5, r31
     90a:	9a e0       	ldi	r25, 0x0A	; 10
     90c:	a9 2e       	mov	r10, r25
     90e:	b1 2c       	mov	r11, r1
     910:	c1 2c       	mov	r12, r1
     912:	d1 2c       	mov	r13, r1
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	00 e0       	ldi	r16, 0x00	; 0
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	2a 89       	ldd	r18, Y+18	; 0x12
     91e:	3b 89       	ldd	r19, Y+19	; 0x13
     920:	a3 01       	movw	r20, r6
     922:	b4 01       	movw	r22, r8
     924:	c1 01       	movw	r24, r2
     926:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__moddi3>
     92a:	20 5d       	subi	r18, 0xD0	; 208
     92c:	ed 8d       	ldd	r30, Y+29	; 0x1d
     92e:	fe 8d       	ldd	r31, Y+30	; 0x1e
     930:	21 93       	st	Z+, r18
     932:	fe 8f       	std	Y+30, r31	; 0x1e
     934:	ed 8f       	std	Y+29, r30	; 0x1d
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:587
        if (!(number_.fractional /= 10U)) {
     936:	2a 89       	ldd	r18, Y+18	; 0x12
     938:	3b 89       	ldd	r19, Y+19	; 0x13
     93a:	a3 01       	movw	r20, r6
     93c:	b4 01       	movw	r22, r8
     93e:	c1 01       	movw	r24, r2
     940:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__divdi3>
     944:	2a 8b       	std	Y+18, r18	; 0x12
     946:	3b 8b       	std	Y+19, r19	; 0x13
     948:	3a 01       	movw	r6, r20
     94a:	4b 01       	movw	r8, r22
     94c:	1c 01       	movw	r2, r24
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     954:	69 f6       	brne	.-102    	; 0x8f0 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x108>
     956:	22 96       	adiw	r28, 0x02	; 2
     958:	ee ad       	ldd	r30, Y+62	; 0x3e
     95a:	ff ad       	ldd	r31, Y+63	; 0x3f
     95c:	22 97       	sbiw	r28, 0x02	; 2
     95e:	e4 0d       	add	r30, r4
     960:	f5 1d       	adc	r31, r5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:593
          break;
        }
      }
      // add extra 0s
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
        buf[len++] = '0';
     962:	80 e3       	ldi	r24, 0x30	; 48
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:592
        if (!(number_.fractional /= 10U)) {
          break;
        }
      }
      // add extra 0s
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     964:	20 e2       	ldi	r18, 0x20	; 32
     966:	42 16       	cp	r4, r18
     968:	51 04       	cpc	r5, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x186>
     96c:	5c c0       	rjmp	.+184    	; 0xa26 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x23e>
     96e:	3f ef       	ldi	r19, 0xFF	; 255
     970:	43 1a       	sub	r4, r19
     972:	53 0a       	sbc	r5, r19
     974:	2a ad       	ldd	r18, Y+58	; 0x3a
     976:	3b ad       	ldd	r19, Y+59	; 0x3b
     978:	21 15       	cp	r18, r1
     97a:	31 05       	cpc	r19, r1
     97c:	09 f4       	brne	.+2      	; 0x980 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x198>
     97e:	da c0       	rjmp	.+436    	; 0xb34 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x34c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:593
        buf[len++] = '0';
     980:	81 93       	st	Z+, r24
     982:	21 50       	subi	r18, 0x01	; 1
     984:	31 09       	sbc	r19, r1
     986:	3b af       	std	Y+59, r19	; 0x3b
     988:	2a af       	std	Y+58, r18	; 0x3a
     98a:	ec cf       	rjmp	.-40     	; 0x964 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x17c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:601
        buf[len++] = '.';
      }
    }
  }
  else {
    if (flags & FLAGS_HASH) {
     98c:	3e ad       	ldd	r19, Y+62	; 0x3e
     98e:	34 ff       	sbrs	r19, 4
     990:	10 c0       	rjmp	.+32     	; 0x9b2 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1ca>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:602
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
     992:	80 e2       	ldi	r24, 0x20	; 32
     994:	48 16       	cp	r4, r24
     996:	51 04       	cpc	r5, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1b4>
     99a:	45 c0       	rjmp	.+138    	; 0xa26 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x23e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:603
        buf[len++] = '.';
     99c:	22 96       	adiw	r28, 0x02	; 2
     99e:	ee ad       	ldd	r30, Y+62	; 0x3e
     9a0:	ff ad       	ldd	r31, Y+63	; 0x3f
     9a2:	22 97       	sbiw	r28, 0x02	; 2
     9a4:	e4 0d       	add	r30, r4
     9a6:	f5 1d       	adc	r31, r5
     9a8:	8e e2       	ldi	r24, 0x2E	; 46
     9aa:	80 83       	st	Z, r24
     9ac:	f2 01       	movw	r30, r4
     9ae:	31 96       	adiw	r30, 0x01	; 1
     9b0:	2f 01       	movw	r4, r30
     9b2:	22 96       	adiw	r28, 0x02	; 2
     9b4:	6e ac       	ldd	r6, Y+62	; 0x3e
     9b6:	7f ac       	ldd	r7, Y+63	; 0x3f
     9b8:	22 97       	sbiw	r28, 0x02	; 2
     9ba:	64 0c       	add	r6, r4
     9bc:	75 1c       	adc	r7, r5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:610
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     9be:	f0 e2       	ldi	r31, 0x20	; 32
     9c0:	4f 16       	cp	r4, r31
     9c2:	51 04       	cpc	r5, r1
     9c4:	80 f5       	brcc	.+96     	; 0xa26 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x23e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:611
    buf[len++] = (char)('0' + (number_.integral % 10));
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	42 1a       	sub	r4, r18
     9ca:	52 0a       	sbc	r5, r18
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	a8 2e       	mov	r10, r24
     9d0:	b1 2c       	mov	r11, r1
     9d2:	c1 2c       	mov	r12, r1
     9d4:	d1 2c       	mov	r13, r1
     9d6:	e1 2c       	mov	r14, r1
     9d8:	f1 2c       	mov	r15, r1
     9da:	00 e0       	ldi	r16, 0x00	; 0
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	2c 89       	ldd	r18, Y+20	; 0x14
     9e0:	3d 89       	ldd	r19, Y+21	; 0x15
     9e2:	4e 89       	ldd	r20, Y+22	; 0x16
     9e4:	5f 89       	ldd	r21, Y+23	; 0x17
     9e6:	68 8d       	ldd	r22, Y+24	; 0x18
     9e8:	79 8d       	ldd	r23, Y+25	; 0x19
     9ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9ee:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__moddi3>
     9f2:	20 5d       	subi	r18, 0xD0	; 208
     9f4:	f3 01       	movw	r30, r6
     9f6:	21 93       	st	Z+, r18
     9f8:	3f 01       	movw	r6, r30
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:612
    if (!(number_.integral /= 10)) {
     9fa:	2c 89       	ldd	r18, Y+20	; 0x14
     9fc:	3d 89       	ldd	r19, Y+21	; 0x15
     9fe:	4e 89       	ldd	r20, Y+22	; 0x16
     a00:	5f 89       	ldd	r21, Y+23	; 0x17
     a02:	68 8d       	ldd	r22, Y+24	; 0x18
     a04:	79 8d       	ldd	r23, Y+25	; 0x19
     a06:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a08:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a0a:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__divdi3>
     a0e:	2c 8b       	std	Y+20, r18	; 0x14
     a10:	3d 8b       	std	Y+21, r19	; 0x15
     a12:	4e 8b       	std	Y+22, r20	; 0x16
     a14:	5f 8b       	std	Y+23, r21	; 0x17
     a16:	68 8f       	std	Y+24, r22	; 0x18
     a18:	79 8f       	std	Y+25, r23	; 0x19
     a1a:	8a 8f       	std	Y+26, r24	; 0x1a
     a1c:	9b 8f       	std	Y+27, r25	; 0x1b
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
     a24:	61 f6       	brne	.-104    	; 0x9be <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1d6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:618
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     a26:	fe ad       	ldd	r31, Y+62	; 0x3e
     a28:	f1 fd       	sbrc	r31, 1
     a2a:	29 c0       	rjmp	.+82     	; 0xa7e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x296>
     a2c:	f0 ff       	sbrs	r31, 0
     a2e:	27 c0       	rjmp	.+78     	; 0xa7e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x296>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:619
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     a30:	2c ad       	ldd	r18, Y+60	; 0x3c
     a32:	3d ad       	ldd	r19, Y+61	; 0x3d
     a34:	23 2b       	or	r18, r19
     a36:	19 f1       	breq	.+70     	; 0xa7e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x296>
     a38:	3c 8d       	ldd	r19, Y+28	; 0x1c
     a3a:	31 11       	cpse	r19, r1
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x262>
     a3e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a40:	9f ad       	ldd	r25, Y+63	; 0x3f
     a42:	8c 70       	andi	r24, 0x0C	; 12
     a44:	99 27       	eor	r25, r25
     a46:	89 2b       	or	r24, r25
     a48:	29 f0       	breq	.+10     	; 0xa54 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x26c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:620
      width--;
     a4a:	8c ad       	ldd	r24, Y+60	; 0x3c
     a4c:	9d ad       	ldd	r25, Y+61	; 0x3d
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	9d af       	std	Y+61, r25	; 0x3d
     a52:	8c af       	std	Y+60, r24	; 0x3c
     a54:	22 96       	adiw	r28, 0x02	; 2
     a56:	ee ad       	ldd	r30, Y+62	; 0x3e
     a58:	ff ad       	ldd	r31, Y+63	; 0x3f
     a5a:	22 97       	sbiw	r28, 0x02	; 2
     a5c:	e4 0d       	add	r30, r4
     a5e:	f5 1d       	adc	r31, r5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:623
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
     a60:	80 e3       	ldi	r24, 0x30	; 48
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:622
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     a62:	2c ad       	ldd	r18, Y+60	; 0x3c
     a64:	3d ad       	ldd	r19, Y+61	; 0x3d
     a66:	42 16       	cp	r4, r18
     a68:	53 06       	cpc	r5, r19
     a6a:	48 f4       	brcc	.+18     	; 0xa7e <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x296>
     a6c:	30 e2       	ldi	r19, 0x20	; 32
     a6e:	43 16       	cp	r4, r19
     a70:	51 04       	cpc	r5, r1
     a72:	c0 f4       	brcc	.+48     	; 0xaa4 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x2bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:623
      buf[len++] = '0';
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	49 1a       	sub	r4, r25
     a78:	59 0a       	sbc	r5, r25
     a7a:	81 93       	st	Z+, r24
     a7c:	f2 cf       	rjmp	.-28     	; 0xa62 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x27a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:627
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
     a7e:	e0 e2       	ldi	r30, 0x20	; 32
     a80:	4e 16       	cp	r4, r30
     a82:	51 04       	cpc	r5, r1
     a84:	78 f4       	brcc	.+30     	; 0xaa4 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x2bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:628
    if (number_.is_negative) {
     a86:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a88:	ff 23       	and	r31, r31
     a8a:	b1 f1       	breq	.+108    	; 0xaf8 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x310>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:629
      buf[len++] = '-';
     a8c:	22 96       	adiw	r28, 0x02	; 2
     a8e:	ee ad       	ldd	r30, Y+62	; 0x3e
     a90:	ff ad       	ldd	r31, Y+63	; 0x3f
     a92:	22 97       	sbiw	r28, 0x02	; 2
     a94:	e4 0d       	add	r30, r4
     a96:	f5 1d       	adc	r31, r5
     a98:	8d e2       	ldi	r24, 0x2D	; 45
     a9a:	80 83       	st	Z, r24
     a9c:	92 01       	movw	r18, r4
     a9e:	2f 5f       	subi	r18, 0xFF	; 255
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	29 01       	movw	r4, r18
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:639
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
     aa4:	ce ac       	ldd	r12, Y+62	; 0x3e
     aa6:	df ac       	ldd	r13, Y+63	; 0x3f
     aa8:	ec ac       	ldd	r14, Y+60	; 0x3c
     aaa:	fd ac       	ldd	r15, Y+61	; 0x3d
     aac:	82 01       	movw	r16, r4
     aae:	22 96       	adiw	r28, 0x02	; 2
     ab0:	2e ad       	ldd	r18, Y+62	; 0x3e
     ab2:	3f ad       	ldd	r19, Y+63	; 0x3f
     ab4:	22 97       	sbiw	r28, 0x02	; 2
     ab6:	48 ad       	ldd	r20, Y+56	; 0x38
     ab8:	59 ad       	ldd	r21, Y+57	; 0x39
     aba:	6e a9       	ldd	r22, Y+54	; 0x36
     abc:	7f a9       	ldd	r23, Y+55	; 0x37
     abe:	8c a9       	ldd	r24, Y+52	; 0x34
     ac0:	9d a9       	ldd	r25, Y+53	; 0x35
     ac2:	0e 94 bb 01 	call	0x376	; 0x376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:640
}
     ac6:	6e 96       	adiw	r28, 0x1e	; 30
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	8f 90       	pop	r8
     aea:	7f 90       	pop	r7
     aec:	6f 90       	pop	r6
     aee:	5f 90       	pop	r5
     af0:	4f 90       	pop	r4
     af2:	3f 90       	pop	r3
     af4:	2f 90       	pop	r2
     af6:	08 95       	ret
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:631

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    if (number_.is_negative) {
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
     af8:	3e ad       	ldd	r19, Y+62	; 0x3e
     afa:	32 ff       	sbrs	r19, 2
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x32e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:632
      buf[len++] = '+';  // ignore the space if the '+' exists
     afe:	22 96       	adiw	r28, 0x02	; 2
     b00:	ee ad       	ldd	r30, Y+62	; 0x3e
     b02:	ff ad       	ldd	r31, Y+63	; 0x3f
     b04:	22 97       	sbiw	r28, 0x02	; 2
     b06:	e4 0d       	add	r30, r4
     b08:	f5 1d       	adc	r31, r5
     b0a:	8b e2       	ldi	r24, 0x2B	; 43
     b0c:	80 83       	st	Z, r24
     b0e:	c2 01       	movw	r24, r4
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	2c 01       	movw	r4, r24
     b14:	c7 cf       	rjmp	.-114    	; 0xaa4 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x2bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:634
    }
    else if (flags & FLAGS_SPACE) {
     b16:	9e ad       	ldd	r25, Y+62	; 0x3e
     b18:	93 ff       	sbrs	r25, 3
     b1a:	c4 cf       	rjmp	.-120    	; 0xaa4 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x2bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:635
      buf[len++] = ' ';
     b1c:	22 96       	adiw	r28, 0x02	; 2
     b1e:	ee ad       	ldd	r30, Y+62	; 0x3e
     b20:	ff ad       	ldd	r31, Y+63	; 0x3f
     b22:	22 97       	sbiw	r28, 0x02	; 2
     b24:	e4 0d       	add	r30, r4
     b26:	f5 1d       	adc	r31, r5
     b28:	80 e2       	ldi	r24, 0x20	; 32
     b2a:	80 83       	st	Z, r24
     b2c:	f2 01       	movw	r30, r4
     b2e:	31 96       	adiw	r30, 0x01	; 1
     b30:	2f 01       	movw	r4, r30
     b32:	b8 cf       	rjmp	.-144    	; 0xaa4 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x2bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:596
      // add extra 0s
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
        buf[len++] = '0';
      }
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
        buf[len++] = '.';
     b34:	8e e2       	ldi	r24, 0x2E	; 46
     b36:	80 83       	st	Z, r24
     b38:	3c cf       	rjmp	.-392    	; 0x9b2 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]+0x1ca>

00000b3a <turnOffPWM>:
turnOffPWM():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     b3a:	82 50       	subi	r24, 0x02	; 2
     b3c:	82 31       	cpi	r24, 0x12	; 18
     b3e:	08 f0       	brcs	.+2      	; 0xb42 <turnOffPWM+0x8>
     b40:	5f c0       	rjmp	.+190    	; 0xc00 <turnOffPWM+0xc6>
     b42:	e8 2f       	mov	r30, r24
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	88 27       	eor	r24, r24
     b48:	e7 55       	subi	r30, 0x57	; 87
     b4a:	fa 4f       	sbci	r31, 0xFA	; 250
     b4c:	8f 4f       	sbci	r24, 0xFF	; 255
     b4e:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <__tablejump2__>
     b52:	fd 05       	cpc	r31, r13
     b54:	01 06       	cpc	r0, r17
     b56:	bb 05       	cpc	r27, r11
     b58:	c1 05       	cpc	r28, r1
     b5a:	c5 05       	cpc	r28, r5
     b5c:	00 06       	cpc	r0, r16
     b5e:	c9 05       	cpc	r28, r9
     b60:	cf 05       	cpc	r28, r15
     b62:	d3 05       	cpc	r29, r3
     b64:	d9 05       	cpc	r29, r9
     b66:	dd 05       	cpc	r29, r13
     b68:	e1 05       	cpc	r30, r1
     b6a:	e7 05       	cpc	r30, r7
     b6c:	eb 05       	cpc	r30, r11
     b6e:	00 06       	cpc	r0, r16
     b70:	ef 05       	cpc	r30, r15
     b72:	f5 05       	cpc	r31, r5
     b74:	f9 05       	cpc	r31, r9
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     b76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b7a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     b7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b80:	08 95       	ret
     b82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b86:	8f 7d       	andi	r24, 0xDF	; 223
     b88:	f9 cf       	rjmp	.-14     	; 0xb7c <turnOffPWM+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     b8a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	f5 cf       	rjmp	.-22     	; 0xb7c <turnOffPWM+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     b92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     b96:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     b98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     b9c:	08 95       	ret
     b9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     ba2:	8f 7d       	andi	r24, 0xDF	; 223
     ba4:	f9 cf       	rjmp	.-14     	; 0xb98 <turnOffPWM+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     ba6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     baa:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     bac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     bb0:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     bb2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     bb6:	8f 7d       	andi	r24, 0xDF	; 223
     bb8:	f9 cf       	rjmp	.-14     	; 0xbac <turnOffPWM+0x72>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     bba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	f5 cf       	rjmp	.-22     	; 0xbac <turnOffPWM+0x72>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     bc2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bc6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     bc8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bcc:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     bce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	f9 cf       	rjmp	.-14     	; 0xbc8 <turnOffPWM+0x8e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
     bd6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	f5 cf       	rjmp	.-22     	; 0xbc8 <turnOffPWM+0x8e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
     bde:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     be2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     be4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     be8:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
     bea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	f9 cf       	rjmp	.-14     	; 0xbe4 <turnOffPWM+0xaa>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
     bf2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	f5 cf       	rjmp	.-22     	; 0xbe4 <turnOffPWM+0xaa>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     bfa:	84 b5       	in	r24, 0x24	; 36
     bfc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     bfe:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     c00:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     c02:	84 b5       	in	r24, 0x24	; 36
     c04:	8f 7d       	andi	r24, 0xDF	; 223
     c06:	fb cf       	rjmp	.-10     	; 0xbfe <turnOffPWM+0xc4>

00000c08 <digitalRead>:
digitalRead():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	ea 58       	subi	r30, 0x8A	; 138
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     c18:	f9 01       	movw	r30, r18
     c1a:	ea 51       	subi	r30, 0x1A	; 26
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     c20:	f9 01       	movw	r30, r18
     c22:	ea 5a       	subi	r30, 0xAA	; 170
     c24:	fd 4f       	sbci	r31, 0xFD	; 253
     c26:	c4 91       	lpm	r28, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     c28:	cc 23       	and	r28, r28
     c2a:	a1 f0       	breq	.+40     	; 0xc54 <digitalRead+0x4c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c2c:	81 11       	cpse	r24, r1
     c2e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <turnOffPWM>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     c32:	ec 2f       	mov	r30, r28
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e4 53       	subi	r30, 0x34	; 52
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	a5 91       	lpm	r26, Z+
     c40:	b4 91       	lpm	r27, Z
     c42:	ec 91       	ld	r30, X
     c44:	ed 23       	and	r30, r29
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	09 f4       	brne	.+2      	; 0xc4e <digitalRead+0x46>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	fa cf       	rjmp	.-12     	; 0xc4e <digitalRead+0x46>

00000c5a <digitalWrite>:
digitalWrite():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	ea 58       	subi	r30, 0x8A	; 138
     c68:	fe 4f       	sbci	r31, 0xFE	; 254
     c6a:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     c6c:	f9 01       	movw	r30, r18
     c6e:	ea 51       	subi	r30, 0x1A	; 26
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     c74:	f9 01       	movw	r30, r18
     c76:	ea 5a       	subi	r30, 0xAA	; 170
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	c4 91       	lpm	r28, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     c7c:	cc 23       	and	r28, r28
     c7e:	a9 f0       	breq	.+42     	; 0xcaa <digitalWrite+0x50>
     c80:	16 2f       	mov	r17, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c82:	81 11       	cpse	r24, r1
     c84:	0e 94 9d 05 	call	0xb3a	; 0xb3a <turnOffPWM>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     c88:	ec 2f       	mov	r30, r28
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e4 5c       	subi	r30, 0xC4	; 196
     c92:	fd 4f       	sbci	r31, 0xFD	; 253
     c94:	a5 91       	lpm	r26, Z+
     c96:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     c98:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     c9a:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     c9c:	ec 91       	ld	r30, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     c9e:	11 11       	cpse	r17, r1
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <digitalWrite+0x58>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     ca2:	d0 95       	com	r29
     ca4:	de 23       	and	r29, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     ca6:	dc 93       	st	X, r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     ca8:	8f bf       	out	0x3f, r24	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     cb2:	de 2b       	or	r29, r30
     cb4:	f8 cf       	rjmp	.-16     	; 0xca6 <digitalWrite+0x4c>

00000cb6 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.29]>:
_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv.constprop.29():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:284
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
     cb6:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <tempSensor>
     cba:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <tempSensor+0x1>
     cbe:	89 2b       	or	r24, r25
     cc0:	41 f0       	breq	.+16     	; 0xcd2 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.29]+0x1c>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:286
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
     cc2:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <tempSensor+0x2>
     cc6:	f0 91 7f 05 	lds	r31, 0x057F	; 0x80057f <tempSensor+0x3>
     cca:	90 81       	ld	r25, Z
     ccc:	81 81       	ldd	r24, Z+1	; 0x01
beginTransaction():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     cce:	9c bd       	out	0x2c, r25	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     cd0:	8d bd       	out	0x2d, r24	; 45
setChipSelect():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:307
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
     cd2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tempSensor+0xb>
     cd6:	8f 3f       	cpi	r24, 0xFF	; 255
     cd8:	19 f0       	breq	.+6      	; 0xce0 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.29]+0x2a>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:308
    digitalWrite(_cs, value);
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <digitalWrite>
_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv.constprop.29():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:321
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
  beginTransaction();
  setChipSelect(LOW);
}
     ce0:	08 95       	ret

00000ce2 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.36]>:
_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv.constprop.36():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:307
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
     ce2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tempSensor+0xb>
     ce6:	8f 3f       	cpi	r24, 0xFF	; 255
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.36]+0xe>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:308
    digitalWrite(_cs, value);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:330
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
  setChipSelect(HIGH);
  endTransaction();
}
     cf0:	08 95       	ret

00000cf2 <pinMode>:
pinMode():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fc 01       	movw	r30, r24
     cfa:	ea 51       	subi	r30, 0x1A	; 26
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	24 91       	lpm	r18, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     d00:	8a 5a       	subi	r24, 0xAA	; 170
     d02:	9d 4f       	sbci	r25, 0xFD	; 253
     d04:	fc 01       	movw	r30, r24
     d06:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     d08:	88 23       	and	r24, r24
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <pinMode+0x4e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	fc 01       	movw	r30, r24
     d14:	e4 5a       	subi	r30, 0xA4	; 164
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	a5 91       	lpm	r26, Z+
     d1a:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     d1c:	fc 01       	movw	r30, r24
     d1e:	e4 5c       	subi	r30, 0xC4	; 196
     d20:	fd 4f       	sbci	r31, 0xFD	; 253
     d22:	c5 91       	lpm	r28, Z+
     d24:	d4 91       	lpm	r29, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     d26:	61 11       	cpse	r22, r1
     d28:	0e c0       	rjmp	.+28     	; 0xd46 <pinMode+0x54>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     d2a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     d2c:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     d2e:	8c 91       	ld	r24, X
     d30:	e2 2f       	mov	r30, r18
     d32:	e0 95       	com	r30
     d34:	8e 23       	and	r24, r30
     d36:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     d38:	28 81       	ld	r18, Y
     d3a:	e2 23       	and	r30, r18
     d3c:	e8 83       	st	Y, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     d3e:	9f bf       	out	0x3f, r25	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     d46:	8f b7       	in	r24, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     d48:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     d4a:	ec 91       	ld	r30, X
     d4c:	e2 2b       	or	r30, r18
     d4e:	ec 93       	st	X, r30
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     d50:	8f bf       	out	0x3f, r24	; 63
     d52:	f6 cf       	rjmp	.-20     	; 0xd40 <pinMode+0x4e>

00000d54 <delayMicroseconds>:
delayMicroseconds():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	91 05       	cpc	r25, r1
     d58:	38 f0       	brcs	.+14     	; 0xd68 <delayMicroseconds+0x14>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     d62:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <delayMicroseconds+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     d68:	08 95       	ret

00000d6a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]>:
_ZN18Adafruit_SPIDevice8transferEh.constprop.31():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:273
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:135
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
  //
  // HARDWARE SPI
  //
  if (_spi) {
     d7a:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <tempSensor>
     d7e:	30 91 7d 05 	lds	r19, 0x057D	; 0x80057d <tempSensor+0x1>
     d82:	23 2b       	or	r18, r19
     d84:	79 f0       	breq	.+30     	; 0xda4 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:250
    return out.val;
  }
  inline static void transfer(void *buf, size_t count) {
    if (count == 0) return;
    uint8_t *p = (uint8_t *)buf;
    SPDR = *p;
     d86:	8e bd       	out	0x2e, r24	; 46
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:258
      while (!(SPSR & _BV(SPIF))) ;
      uint8_t in = SPDR;
      SPDR = out;
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
     d88:	0d b4       	in	r0, 0x2d	; 45
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x1e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.h:259
    *p = SPDR;
     d8e:	de b4       	in	r13, 0x2e	; 46
_ZN18Adafruit_SPIDevice8transferEh.constprop.31():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:277
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
  uint8_t data = send;
  transfer(&data, 1);
  return data;
}
     d90:	8d 2d       	mov	r24, r13
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	08 95       	ret
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:154

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
     da4:	20 91 84 05 	lds	r18, 0x0584	; 0x800584 <tempSensor+0x8>
     da8:	30 91 85 05 	lds	r19, 0x0585	; 0x800585 <tempSensor+0x9>
_ZN18Adafruit_SPIDevice8transferEh.constprop.31():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:155
    startbit = 0x1;
     dac:	c1 e0       	ldi	r28, 0x01	; 1
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:154

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
     dae:	23 2b       	or	r18, r19
     db0:	09 f0       	breq	.+2      	; 0xdb4 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x4a>
_ZN18Adafruit_SPIDevice8transferEh.constprop.31():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:157
    startbit = 0x1;
  } else {
    startbit = 0x80;
     db2:	c0 e8       	ldi	r28, 0x80	; 128
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:160
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
     db4:	cc 24       	eor	r12, r12
     db6:	c3 94       	inc	r12
     db8:	98 2f       	mov	r25, r24
     dba:	9c 23       	and	r25, r28
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x56>
     dbe:	c1 2c       	mov	r12, r1
     dc0:	d8 2f       	mov	r29, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:161
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
     dc2:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <tempSensor+0x4>
     dc6:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <tempSensor+0x5>
     dca:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <tempSensor+0x6>
     dce:	50 91 83 05 	lds	r21, 0x0583	; 0x800583 <tempSensor+0x7>
     dd2:	60 e2       	ldi	r22, 0x20	; 32
     dd4:	71 ea       	ldi	r23, 0xA1	; 161
     dd6:	87 e0       	ldi	r24, 0x07	; 7
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__udivmodsi4>
     dde:	12 2f       	mov	r17, r18
_ZN18Adafruit_SPIDevice8transferEh.constprop.31():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:274
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
  uint8_t data = send;
     de0:	dd 2e       	mov	r13, r29
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:164

  bool towrite, lastmosi = !(buffer[0] & startbit);
  uint8_t bitdelay_us = (1000000 / _freq) / 2;

  for (size_t i = 0; i < len; i++) {
    uint8_t reply = 0;
     de2:	00 e0       	ldi	r16, 0x00	; 0
transfer():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:178
    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
        delayMicroseconds(bitdelay_us);
     de4:	e2 2e       	mov	r14, r18
     de6:	f1 2c       	mov	r15, r1
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:177

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
     de8:	11 23       	and	r17, r17
     dea:	19 f0       	breq	.+6      	; 0xdf2 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x88>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:178
        delayMicroseconds(bitdelay_us);
     dec:	c7 01       	movw	r24, r14
     dee:	0e 94 aa 06 	call	0xd54	; 0xd54 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:181
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
     df2:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <tempSensor+0xa>
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	09 f0       	breq	.+2      	; 0xdfc <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x92>
     dfa:	54 c0       	rjmp	.+168    	; 0xea4 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x13a>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:183
        towrite = send & b;
        if ((_mosi != -1) && (lastmosi != towrite)) {
     dfc:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tempSensor+0xd>
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	a1 f0       	breq	.+40     	; 0xe2c <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xc2>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:182
      if (bitdelay_us) {
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
        towrite = send & b;
     e04:	9d 2f       	mov	r25, r29
     e06:	9c 23       	and	r25, r28
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xa4>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:183
        if ((_mosi != -1) && (lastmosi != towrite)) {
     e0e:	8c 15       	cp	r24, r12
     e10:	69 f0       	breq	.+26     	; 0xe2c <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xc2>
     e12:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <tempSensor+0xf>
     e16:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <tempSensor+0x10>
     e1a:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <tempSensor+0x17>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:185
#ifdef BUSIO_USE_FAST_PINIO
          if (towrite)
     e1e:	99 23       	and	r25, r25
     e20:	d9 f1       	breq	.+118    	; 0xe98 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x12e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:186
            *mosiPort = *mosiPort | mosiPinMask;
     e22:	90 81       	ld	r25, Z
     e24:	89 2b       	or	r24, r25
     e26:	80 83       	st	Z, r24
     e28:	cc 24       	eor	r12, r12
     e2a:	c3 94       	inc	r12
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:196
#endif
          lastmosi = towrite;
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
     e2c:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <tempSensor+0x11>
     e30:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <tempSensor+0x12>
     e34:	80 81       	ld	r24, Z
     e36:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <tempSensor+0x19>
     e3a:	89 2b       	or	r24, r25
     e3c:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:201
#else
        digitalWrite(_sck, HIGH);
#endif

        if (bitdelay_us) {
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xde>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:202
          delayMicroseconds(bitdelay_us);
     e42:	c7 01       	movw	r24, r14
     e44:	0e 94 aa 06 	call	0xd54	; 0xd54 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:205
        }

        if (_miso != -1) {
     e48:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <tempSensor+0xe>
     e4c:	8f 3f       	cpi	r24, 0xFF	; 255
     e4e:	51 f0       	breq	.+20     	; 0xe64 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xfa>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:207
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
     e50:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <tempSensor+0x13>
     e54:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <tempSensor+0x14>
     e58:	80 81       	ld	r24, Z
     e5a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <tempSensor+0x18>
     e5e:	89 23       	and	r24, r25
     e60:	09 f0       	breq	.+2      	; 0xe64 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xfa>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:211
#else
          if (digitalRead(_miso)) {
#endif
            reply |= b;
     e62:	0c 2b       	or	r16, r28
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:216
          }
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
     e64:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <tempSensor+0x11>
     e68:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <tempSensor+0x12>
     e6c:	90 81       	ld	r25, Z
     e6e:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <tempSensor+0x19>
     e72:	80 95       	com	r24
     e74:	89 23       	and	r24, r25
     e76:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:259
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
     e78:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <tempSensor+0xe>
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	09 f0       	breq	.+2      	; 0xe82 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x118>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:260
        buffer[i] = reply;
     e80:	d0 2e       	mov	r13, r16
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:174
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
     e82:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <tempSensor+0x8>
     e86:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <tempSensor+0x9>
     e8a:	89 2b       	or	r24, r25
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x126>
     e8e:	47 c0       	rjmp	.+142    	; 0xf1e <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x1b4>
     e90:	cc 0f       	add	r28, r28
     e92:	c1 11       	cpse	r28, r1
     e94:	a9 cf       	rjmp	.-174    	; 0xde8 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x7e>
     e96:	7c cf       	rjmp	.-264    	; 0xd90 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x26>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:188
        if ((_mosi != -1) && (lastmosi != towrite)) {
#ifdef BUSIO_USE_FAST_PINIO
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     e98:	90 81       	ld	r25, Z
     e9a:	80 95       	com	r24
     e9c:	89 23       	and	r24, r25
     e9e:	80 83       	st	Z, r24
     ea0:	c1 2c       	mov	r12, r1
     ea2:	c4 cf       	rjmp	.-120    	; 0xe2c <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0xc2>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:223
        digitalWrite(_sck, LOW);
#endif
      } else { // if (_dataMode == SPI_MODE1 || _dataMode == SPI_MODE3)

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
     ea4:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <tempSensor+0x11>
     ea8:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <tempSensor+0x12>
     eac:	80 81       	ld	r24, Z
     eae:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <tempSensor+0x19>
     eb2:	89 2b       	or	r24, r25
     eb4:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:228
#else
        digitalWrite(_sck, HIGH);
#endif

        if (bitdelay_us) {
     eb6:	11 23       	and	r17, r17
     eb8:	19 f0       	breq	.+6      	; 0xec0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x156>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:229
          delayMicroseconds(bitdelay_us);
     eba:	c7 01       	movw	r24, r14
     ebc:	0e 94 aa 06 	call	0xd54	; 0xd54 <delayMicroseconds>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:232
        }

        if (_mosi != -1) {
     ec0:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tempSensor+0xd>
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	61 f0       	breq	.+24     	; 0xee0 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x176>
     ec8:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <tempSensor+0xf>
     ecc:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <tempSensor+0x10>
     ed0:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <tempSensor+0x17>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:234
#ifdef BUSIO_USE_FAST_PINIO
          if (send & b)
     ed4:	9d 2f       	mov	r25, r29
     ed6:	9c 23       	and	r25, r28
     ed8:	f1 f0       	breq	.+60     	; 0xf16 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x1ac>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:235
            *mosiPort = *mosiPort | mosiPinMask;
     eda:	90 81       	ld	r25, Z
     edc:	89 2b       	or	r24, r25
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:237
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     ede:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:244
          digitalWrite(_mosi, send & b);
#endif
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
     ee0:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <tempSensor+0x11>
     ee4:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <tempSensor+0x12>
     ee8:	90 81       	ld	r25, Z
     eea:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <tempSensor+0x19>
     eee:	80 95       	com	r24
     ef0:	89 23       	and	r24, r25
     ef2:	80 83       	st	Z, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:249
#else
        digitalWrite(_sck, LOW);
#endif

        if (_miso != -1) {
     ef4:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <tempSensor+0xe>
     ef8:	8f 3f       	cpi	r24, 0xFF	; 255
     efa:	09 f4       	brne	.+2      	; 0xefe <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x194>
     efc:	bd cf       	rjmp	.-134    	; 0xe78 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:251
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
     efe:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <tempSensor+0x13>
     f02:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <tempSensor+0x14>
     f06:	80 81       	ld	r24, Z
     f08:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <tempSensor+0x18>
     f0c:	89 23       	and	r24, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x1a8>
     f10:	b3 cf       	rjmp	.-154    	; 0xe78 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:255
#else
          if (digitalRead(_miso)) {
#endif
            reply |= b;
     f12:	0c 2b       	or	r16, r28
     f14:	b1 cf       	rjmp	.-158    	; 0xe78 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x10e>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:237
        if (_mosi != -1) {
#ifdef BUSIO_USE_FAST_PINIO
          if (send & b)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
     f16:	90 81       	ld	r25, Z
     f18:	80 95       	com	r24
     f1a:	89 23       	and	r24, r25
     f1c:	e0 cf       	rjmp	.-64     	; 0xede <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x174>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:174
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
     f1e:	c6 95       	lsr	r28
     f20:	b8 cf       	rjmp	.-144    	; 0xe92 <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]+0x128>

00000f22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>:
_ZN17Adafruit_MAX3186514writeRegister8Ehh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:342
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
}

void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	d8 2f       	mov	r29, r24
     f28:	c6 2f       	mov	r28, r22
write():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:346
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  beginTransactionWithAssertingCS();
     f2a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.29]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:364
  {
    for (size_t i = 0; i < prefix_len; i++) {
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
      transfer(buffer[i]);
     f2e:	8d 2f       	mov	r24, r29
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]>
     f36:	8c 2f       	mov	r24, r28
     f38:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]>
_ZN17Adafruit_MAX3186514writeRegister8Ehh.constprop.27():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:347
  addr |= 0x80; // make sure top bit is set

  uint8_t buffer[2] = {addr, data};
  spi_dev.write(buffer, 2);
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
write():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:367
    }
  }
  endTransactionWithDeassertingCS();
     f40:	0c 94 71 06 	jmp	0xce2	; 0xce2 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.36]>

00000f44 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.26]>:
_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh.constprop.26():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:438
 *    @param  sendvalue The 8-bits of data to write when doing the data read,
 * defaults to 0xFF
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	7b 01       	movw	r14, r22
     f54:	8a 01       	movw	r16, r20
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:441
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
  beginTransactionWithAssertingCS();
     f56:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Adafruit_SPIDevice::beginTransactionWithAssertingCS() [clone .constprop.29]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:452
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
      transfer(write_buffer[i]);
     f5a:	88 81       	ld	r24, Y
     f5c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]>
     f60:	e7 01       	movw	r28, r14
     f62:	0e 0d       	add	r16, r14
     f64:	1f 1d       	adc	r17, r15
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:470
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
     f66:	c0 17       	cp	r28, r16
     f68:	d1 07       	cpc	r29, r17
     f6a:	29 f0       	breq	.+10     	; 0xf76 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.26]+0x32>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:471
    read_buffer[i] = transfer(sendvalue);
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Adafruit_SPIDevice::transfer(unsigned char) [clone .constprop.31]>
     f72:	89 93       	st	Y+, r24
     f74:	f8 cf       	rjmp	.-16     	; 0xf66 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.26]+0x22>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:487
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
     f76:	0e 94 71 06 	call	0xce2	; 0xce2 <Adafruit_SPIDevice::endTransactionWithDeassertingCS() [clone .constprop.36]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:490

  return true;
}
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	08 95       	ret

00000f8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>:
_ZN17Adafruit_MAX3186513readRegister8Eh.constprop.24():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:317
  return rtd;
}

/**********************************************/

uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	1f 92       	push	r1
     f90:	1f 92       	push	r1
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:318
  uint8_t ret = 0;
     f96:	1a 82       	std	Y+2, r1	; 0x02
     f98:	19 82       	std	Y+1, r1	; 0x01
readRegisterN():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:339

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	be 01       	movw	r22, r28
     fa0:	6e 5f       	subi	r22, 0xFE	; 254
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 a2 07 	call	0xf44	; 0xf44 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.26]>
_ZN17Adafruit_MAX3186513readRegister8Eh.constprop.24():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:322
uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
  uint8_t ret = 0;
  readRegisterN(addr, &ret, 1);

  return ret;
}
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <Adafruit_MAX31865::clearFault() [clone .constprop.23]>:
_ZN17Adafruit_MAX3186510clearFaultEv.constprop.23():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:111
/*!
    @brief Clear all faults in FAULTSTAT
*/
/**************************************************************************/
void Adafruit_MAX31865::clearFault(void) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
     fb8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:112
  t &= ~0x2C;
     fbc:	83 7d       	andi	r24, 0xD3	; 211
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:113
  t |= MAX31865_CONFIG_FAULTSTAT;
     fbe:	68 2f       	mov	r22, r24
     fc0:	62 60       	ori	r22, 0x02	; 2
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:114
  writeRegister8(MAX31865_CONFIG_REG, t);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0c 94 91 07 	jmp	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>

00000fc8 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]>:
_ZN17Adafruit_MAX3186510enableBiasEb.constprop.20():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:123
/*!
    @brief Enable the bias voltage on the RTD sensor
    @param b If true bias is enabled, else disabled
*/
/**************************************************************************/
void Adafruit_MAX31865::enableBias(bool b) {
     fc8:	cf 93       	push	r28
     fca:	c8 2f       	mov	r28, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:124
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
     fcc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:126
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
     fd0:	68 2f       	mov	r22, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:125
    @param b If true bias is enabled, else disabled
*/
/**************************************************************************/
void Adafruit_MAX31865::enableBias(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
  if (b) {
     fd2:	cc 23       	and	r28, r28
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]+0x18>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:126
    t |= MAX31865_CONFIG_BIAS; // enable bias
     fd6:	60 68       	ori	r22, 0x80	; 128
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:130
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:131
}
     fda:	cf 91       	pop	r28
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:130
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
     fdc:	0c 94 91 07 	jmp	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:128
void Adafruit_MAX31865::enableBias(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
  if (b) {
    t |= MAX31865_CONFIG_BIAS; // enable bias
  } else {
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
     fe0:	6f 77       	andi	r22, 0x7F	; 127
     fe2:	fa cf       	rjmp	.-12     	; 0xfd8 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]+0x10>

00000fe4 <micros>:
micros():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     fe4:	3f b7       	in	r19, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     fe6:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     fe8:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <timer0_overflow_count>
     fec:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <timer0_overflow_count+0x1>
     ff0:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <timer0_overflow_count+0x2>
     ff4:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     ff8:	26 b5       	in	r18, 0x26	; 38
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     ffa:	a8 9b       	sbis	0x15, 0	; 21
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <micros+0x24>
     ffe:	2f 3f       	cpi	r18, 0xFF	; 255
    1000:	19 f0       	breq	.+6      	; 0x1008 <micros+0x24>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    1008:	3f bf       	out	0x3f, r19	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    100a:	ba 2f       	mov	r27, r26
    100c:	a9 2f       	mov	r26, r25
    100e:	98 2f       	mov	r25, r24
    1010:	88 27       	eor	r24, r24
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	62 0f       	add	r22, r18
    1018:	71 1d       	adc	r23, r1
    101a:	81 1d       	adc	r24, r1
    101c:	91 1d       	adc	r25, r1
    101e:	42 e0       	ldi	r20, 0x02	; 2
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	4a 95       	dec	r20
    102a:	d1 f7       	brne	.-12     	; 0x1020 <micros+0x3c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    102c:	08 95       	ret

0000102e <delay>:
delay():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	4b 01       	movw	r8, r22
    1040:	5c 01       	movw	r10, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1042:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <micros>
    1046:	6b 01       	movw	r12, r22
    1048:	7c 01       	movw	r14, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    104a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <micros>
    104e:	6c 19       	sub	r22, r12
    1050:	7d 09       	sbc	r23, r13
    1052:	8e 09       	sbc	r24, r14
    1054:	9f 09       	sbc	r25, r15
    1056:	68 3e       	cpi	r22, 0xE8	; 232
    1058:	73 40       	sbci	r23, 0x03	; 3
    105a:	81 05       	cpc	r24, r1
    105c:	91 05       	cpc	r25, r1
    105e:	a8 f3       	brcs	.-22     	; 0x104a <delay+0x1c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	82 1a       	sub	r8, r18
    1064:	91 08       	sbc	r9, r1
    1066:	a1 08       	sbc	r10, r1
    1068:	b1 08       	sbc	r11, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    106a:	88 ee       	ldi	r24, 0xE8	; 232
    106c:	c8 0e       	add	r12, r24
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	d8 1e       	adc	r13, r24
    1072:	e1 1c       	adc	r14, r1
    1074:	f1 1c       	adc	r15, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1076:	81 14       	cp	r8, r1
    1078:	91 04       	cpc	r9, r1
    107a:	a1 04       	cpc	r10, r1
    107c:	b1 04       	cpc	r11, r1
    107e:	29 f7       	brne	.-54     	; 0x104a <delay+0x1c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	08 95       	ret

00001092 <Adafruit_MAX31865::readRTD() [clone .constprop.4]>:
_ZN17Adafruit_MAX318657readRTDEv.constprop.4():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:296
/*!
    @brief Read the raw 16-bit value from the RTD_REG in one shot mode
    @return The raw unsigned 16-bit value, NOT temperature!
*/
/**************************************************************************/
uint16_t Adafruit_MAX31865::readRTD(void) {
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	00 d0       	rcall	.+0      	; 0x109c <Adafruit_MAX31865::readRTD() [clone .constprop.4]+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:297
  clearFault();
    10a0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <Adafruit_MAX31865::clearFault() [clone .constprop.23]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:298
  enableBias(true);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:299
  delay(10);
    10aa:	6a e0       	ldi	r22, 0x0A	; 10
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 17 08 	call	0x102e	; 0x102e <delay>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:300
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
    10b6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:301
  t |= MAX31865_CONFIG_1SHOT;
    10ba:	68 2f       	mov	r22, r24
    10bc:	60 62       	ori	r22, 0x20	; 32
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:302
  writeRegister8(MAX31865_CONFIG_REG, t);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:303
  delay(65);
    10c4:	61 e4       	ldi	r22, 0x41	; 65
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 17 08 	call	0x102e	; 0x102e <delay>
readRegister16():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:325

  return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
  uint8_t buffer[2] = {0, 0};
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	1a 82       	std	Y+2, r1	; 0x02
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8b 83       	std	Y+3, r24	; 0x03
readRegisterN():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:339

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
  addr &= 0x7F; // make sure top bit is not set

  spi_dev.write_then_read(&addr, 1, buffer, n);
    10d8:	42 e0       	ldi	r20, 0x02	; 2
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	ce 01       	movw	r24, r28
    10e4:	03 96       	adiw	r24, 0x03	; 3
    10e6:	0e 94 a2 07 	call	0xf44	; 0xf44 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char) [clone .constprop.26]>
    10ea:	09 81       	ldd	r16, Y+1	; 0x01
    10ec:	1a 81       	ldd	r17, Y+2	; 0x02
    10ee:	10 27       	eor	r17, r16
    10f0:	01 27       	eor	r16, r17
    10f2:	10 27       	eor	r17, r16
_ZN17Adafruit_MAX318657readRTDEv.constprop.4():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:307
  writeRegister8(MAX31865_CONFIG_REG, t);
  delay(65);

  uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);

  enableBias(false); // Disable bias current again to reduce selfheating.
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:313

  // remove fault
  rtd >>= 1;

  return rtd;
}
    10fa:	c8 01       	movw	r24, r16
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <millis>:
millis():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    1110:	2f b7       	in	r18, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    1112:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    1114:	60 91 9d 03 	lds	r22, 0x039D	; 0x80039d <timer0_millis>
    1118:	70 91 9e 03 	lds	r23, 0x039E	; 0x80039e <timer0_millis+0x1>
    111c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <timer0_millis+0x2>
    1120:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    1124:	2f bf       	out	0x3f, r18	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    1126:	08 95       	ret

00001128 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	6c 01       	movw	r12, r24
    113e:	7b 01       	movw	r14, r22
    1140:	8b 01       	movw	r16, r22
    1142:	04 0f       	add	r16, r20
    1144:	15 1f       	adc	r17, r21
    1146:	eb 01       	movw	r28, r22
    1148:	5e 01       	movw	r10, r28
    114a:	ae 18       	sub	r10, r14
    114c:	bf 08       	sbc	r11, r15
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    114e:	c0 17       	cp	r28, r16
    1150:	d1 07       	cpc	r29, r17
    1152:	59 f0       	breq	.+22     	; 0x116a <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    1154:	69 91       	ld	r22, Y+
    1156:	d6 01       	movw	r26, r12
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
    1162:	c6 01       	movw	r24, r12
    1164:	19 95       	eicall
    1166:	89 2b       	or	r24, r25
    1168:	79 f7       	brne	.-34     	; 0x1148 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    116a:	c5 01       	movw	r24, r10
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	08 95       	ret

00001182 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1182:	fc 01       	movw	r30, r24
    1184:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1186:	44 8d       	ldd	r20, Z+28	; 0x1c
    1188:	25 2f       	mov	r18, r21
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	84 2f       	mov	r24, r20
    118e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1190:	82 1b       	sub	r24, r18
    1192:	93 0b       	sbc	r25, r19
    1194:	54 17       	cp	r21, r20
    1196:	10 f0       	brcs	.+4      	; 0x119c <HardwareSerial::availableForWrite()+0x1a>
    1198:	cf 96       	adiw	r24, 0x3f	; 63
    119a:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    119c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    119e:	08 95       	ret

000011a0 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    11a0:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    11a2:	91 8d       	ldd	r25, Z+25	; 0x19
    11a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    11a6:	98 17       	cp	r25, r24
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <HardwareSerial::read()+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    11aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    11ac:	ae 0f       	add	r26, r30
    11ae:	bf 2f       	mov	r27, r31
    11b0:	b1 1d       	adc	r27, r1
    11b2:	5d 96       	adiw	r26, 0x1d	; 29
    11b4:	8c 91       	ld	r24, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    11b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    11b8:	9f 5f       	subi	r25, 0xFF	; 255
    11ba:	9f 73       	andi	r25, 0x3F	; 63
    11bc:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    11c6:	08 95       	ret

000011c8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    11c8:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    11ca:	91 8d       	ldd	r25, Z+25	; 0x19
    11cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    11ce:	98 17       	cp	r25, r24
    11d0:	31 f0       	breq	.+12     	; 0x11de <HardwareSerial::peek()+0x16>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    11d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    11d4:	e8 0f       	add	r30, r24
    11d6:	f1 1d       	adc	r31, r1
    11d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    11e2:	08 95       	ret

000011e4 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    11e4:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    11e6:	91 8d       	ldd	r25, Z+25	; 0x19
    11e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    11ea:	89 2f       	mov	r24, r25
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	80 5c       	subi	r24, 0xC0	; 192
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	82 1b       	sub	r24, r18
    11f4:	91 09       	sbc	r25, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    11f6:	8f 73       	andi	r24, 0x3F	; 63
    11f8:	99 27       	eor	r25, r25
    11fa:	08 95       	ret

000011fc <Serial3_available()>:
_Z17Serial3_availablev():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:54
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    11fc:	87 ea       	ldi	r24, 0xA7	; 167
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HardwareSerial::available()>
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	89 2b       	or	r24, r25
    1208:	09 f4       	brne	.+2      	; 0x120c <Serial3_available()+0x10>
    120a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:55
}
    120c:	82 2f       	mov	r24, r18
    120e:	08 95       	ret

00001210 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1210:	84 e4       	ldi	r24, 0x44	; 68
    1212:	94 e0       	ldi	r25, 0x04	; 4
    1214:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HardwareSerial::available()>
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	89 2b       	or	r24, r25
    121c:	09 f4       	brne	.+2      	; 0x1220 <Serial0_available()+0x10>
    121e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1220:	82 2f       	mov	r24, r18
    1222:	08 95       	ret

00001224 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1224:	fc 01       	movw	r30, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1226:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1228:	a8 0f       	add	r26, r24
    122a:	b9 2f       	mov	r27, r25
    122c:	b1 1d       	adc	r27, r1
    122e:	a3 5a       	subi	r26, 0xA3	; 163
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	2c 91       	ld	r18, X
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1234:	84 8d       	ldd	r24, Z+28	; 0x1c
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	8f 73       	andi	r24, 0x3F	; 63
    123c:	99 27       	eor	r25, r25
    123e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1240:	a6 89       	ldd	r26, Z+22	; 0x16
    1242:	b7 89       	ldd	r27, Z+23	; 0x17
    1244:	2c 93       	st	X, r18
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1246:	a0 89       	ldd	r26, Z+16	; 0x10
    1248:	b1 89       	ldd	r27, Z+17	; 0x11
    124a:	8c 91       	ld	r24, X
    124c:	83 70       	andi	r24, 0x03	; 3
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	8c 93       	st	X, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1252:	93 8d       	ldd	r25, Z+27	; 0x1b
    1254:	84 8d       	ldd	r24, Z+28	; 0x1c
    1256:	98 13       	cpse	r25, r24
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    125a:	02 88       	ldd	r0, Z+18	; 0x12
    125c:	f3 89       	ldd	r31, Z+19	; 0x13
    125e:	e0 2d       	mov	r30, r0
    1260:	80 81       	ld	r24, Z
    1262:	8f 7d       	andi	r24, 0xDF	; 223
    1264:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    1266:	08 95       	ret

00001268 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    127a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    127c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    127e:	98 13       	cpse	r25, r24
    1280:	1a c0       	rjmp	.+52     	; 0x12b6 <HardwareSerial::write(unsigned char)+0x4e>
    1282:	e8 89       	ldd	r30, Y+16	; 0x10
    1284:	f9 89       	ldd	r31, Y+17	; 0x11
    1286:	80 81       	ld	r24, Z
    1288:	85 ff       	sbrs	r24, 5
    128a:	15 c0       	rjmp	.+42     	; 0x12b6 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    128c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    128e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    1290:	ee 89       	ldd	r30, Y+22	; 0x16
    1292:	ff 89       	ldd	r31, Y+23	; 0x17
    1294:	60 83       	st	Z, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1296:	e8 89       	ldd	r30, Y+16	; 0x10
    1298:	f9 89       	ldd	r31, Y+17	; 0x11
    129a:	80 81       	ld	r24, Z
    129c:	83 70       	andi	r24, 0x03	; 3
    129e:	80 64       	ori	r24, 0x40	; 64
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    12a0:	80 83       	st	Z, r24
__iRestore():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12a2:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	08 95       	ret
    12b6:	f6 2e       	mov	r15, r22
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    12b8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12ba:	10 e0       	ldi	r17, 0x00	; 0
    12bc:	0f 5f       	subi	r16, 0xFF	; 255
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	0f 73       	andi	r16, 0x3F	; 63
    12c2:	11 27       	eor	r17, r17
    12c4:	e0 2e       	mov	r14, r16
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    12c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12c8:	8e 11       	cpse	r24, r14
    12ca:	0c c0       	rjmp	.+24     	; 0x12e4 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	07 fc       	sbrc	r0, 7
    12d0:	fa cf       	rjmp	.-12     	; 0x12c6 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    12d2:	e8 89       	ldd	r30, Y+16	; 0x10
    12d4:	f9 89       	ldd	r31, Y+17	; 0x11
    12d6:	80 81       	ld	r24, Z
    12d8:	85 ff       	sbrs	r24, 5
    12da:	f5 cf       	rjmp	.-22     	; 0x12c6 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 12 09 	call	0x1224	; 0x1224 <HardwareSerial::_tx_udr_empty_irq()>
    12e2:	f1 cf       	rjmp	.-30     	; 0x12c6 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    12e4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    12e6:	ec 0f       	add	r30, r28
    12e8:	fd 2f       	mov	r31, r29
    12ea:	f1 1d       	adc	r31, r1
    12ec:	e3 5a       	subi	r30, 0xA3	; 163
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	f0 82       	st	Z, r15
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12f2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\admin\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12f4:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    12f6:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    12f8:	ea 89       	ldd	r30, Y+18	; 0x12
    12fa:	fb 89       	ldd	r31, Y+19	; 0x13
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	cf cf       	rjmp	.-98     	; 0x12a0 <HardwareSerial::write(unsigned char)+0x38>

00001302 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ec 01       	movw	r28, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1308:	88 8d       	ldd	r24, Y+24	; 0x18
    130a:	88 23       	and	r24, r24
    130c:	b9 f0       	breq	.+46     	; 0x133c <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    130e:	aa 89       	ldd	r26, Y+18	; 0x12
    1310:	bb 89       	ldd	r27, Y+19	; 0x13
    1312:	e8 89       	ldd	r30, Y+16	; 0x10
    1314:	f9 89       	ldd	r31, Y+17	; 0x11
    1316:	8c 91       	ld	r24, X
    1318:	85 fd       	sbrc	r24, 5
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <HardwareSerial::flush()+0x20>
    131c:	80 81       	ld	r24, Z
    131e:	86 fd       	sbrc	r24, 6
    1320:	0d c0       	rjmp	.+26     	; 0x133c <HardwareSerial::flush()+0x3a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	07 fc       	sbrc	r0, 7
    1326:	f7 cf       	rjmp	.-18     	; 0x1316 <HardwareSerial::flush()+0x14>
    1328:	8c 91       	ld	r24, X
    132a:	85 ff       	sbrs	r24, 5
    132c:	f2 cf       	rjmp	.-28     	; 0x1312 <HardwareSerial::flush()+0x10>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    132e:	80 81       	ld	r24, Z
    1330:	85 ff       	sbrs	r24, 5
    1332:	ed cf       	rjmp	.-38     	; 0x130e <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 12 09 	call	0x1224	; 0x1224 <HardwareSerial::_tx_udr_empty_irq()>
    133a:	e9 cf       	rjmp	.-46     	; 0x130e <HardwareSerial::flush()+0xc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	89 2b       	or	r24, r25
    1348:	29 f0       	breq	.+10     	; 0x1354 <serialEventRun()+0x12>
    134a:	0e 94 08 09 	call	0x1210	; 0x1210 <Serial0_available()>
    134e:	81 11       	cpse	r24, r1
    1350:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	89 2b       	or	r24, r25
    135a:	49 f0       	breq	.+18     	; 0x136e <serialEventRun()+0x2c>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	89 2b       	or	r24, r25
    1362:	29 f0       	breq	.+10     	; 0x136e <serialEventRun()+0x2c>
    1364:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1368:	81 11       	cpse	r24, r1
    136a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	89 2b       	or	r24, r25
    1374:	49 f0       	breq	.+18     	; 0x1388 <serialEventRun()+0x46>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	89 2b       	or	r24, r25
    137c:	29 f0       	breq	.+10     	; 0x1388 <serialEventRun()+0x46>
    137e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1382:	81 11       	cpse	r24, r1
    1384:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	89 2b       	or	r24, r25
    138e:	29 f0       	breq	.+10     	; 0x139a <serialEventRun()+0x58>
    1390:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Serial3_available()>
    1394:	81 11       	cpse	r24, r1
    1396:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    139a:	08 95       	ret

0000139c <twi_stop>:
twi_stop():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:430
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    139c:	85 ed       	ldi	r24, 0xD5	; 213
    139e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:450
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
    13a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    13a6:	84 fd       	sbrc	r24, 4
    13a8:	fc cf       	rjmp	.-8      	; 0x13a2 <twi_stop+0x6>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:456
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
    13aa:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:457
}
    13ae:	08 95       	ret

000013b0 <twi_transmit>:
twi_transmit():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:365
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    13b0:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <twi_txBufferLength>
    13b4:	26 0f       	add	r18, r22
    13b6:	33 27       	eor	r19, r19
    13b8:	33 1f       	adc	r19, r19
    13ba:	21 32       	cpi	r18, 0x21	; 33
    13bc:	31 05       	cpc	r19, r1
    13be:	ec f4       	brge	.+58     	; 0x13fa <twi_transmit+0x4a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:370
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    13c0:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <twi_state>
    13c4:	fc 01       	movw	r30, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	24 30       	cpi	r18, 0x04	; 4
    13cc:	69 f0       	breq	.+26     	; 0x13e8 <twi_transmit+0x38>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:371
    return 2;
    13ce:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:381
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    13d0:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:376
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    13d2:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <twi_txBufferLength>
    13d6:	21 91       	ld	r18, Z+
    13d8:	ac 01       	movw	r20, r24
    13da:	4a 5d       	subi	r20, 0xDA	; 218
    13dc:	5c 4f       	sbci	r21, 0xFC	; 252
    13de:	a4 0f       	add	r26, r20
    13e0:	b5 2f       	mov	r27, r21
    13e2:	b1 1d       	adc	r27, r1
    13e4:	2c 93       	st	X, r18
    13e6:	01 96       	adiw	r24, 0x01	; 1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:375
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    13e8:	86 17       	cp	r24, r22
    13ea:	98 f3       	brcs	.-26     	; 0x13d2 <twi_transmit+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:378
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    13ec:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_txBufferLength>
    13f0:	68 0f       	add	r22, r24
    13f2:	60 93 46 03 	sts	0x0346, r22	; 0x800346 <twi_txBufferLength>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:366
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	08 95       	ret

000013fe <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:328
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    13fe:	08 95       	ret

00001400 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:323
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	08 95       	ret

00001406 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:309
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	9f ef       	ldi	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    140c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <TwoWire::rxBufferIndex>
    1410:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:293
}
    1412:	91 95       	neg	r25
    1414:	81 95       	neg	r24
    1416:	91 09       	sbc	r25, r1
    1418:	08 95       	ret

0000141a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:273

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cb 01       	movw	r24, r22
    1420:	ea 01       	movw	r28, r20
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:282
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1422:	64 2f       	mov	r22, r20
    1424:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twi_transmit>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:285
  }
  return quantity;
}
    1428:	ce 01       	movw	r24, r28
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:248

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	1f 92       	push	r1
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	69 83       	std	Y+1, r22	; 0x01
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:264
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twi_transmit>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire/TwoWire.cpp:267
  }
  return 1;
}
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	08 95       	ret

00001458 <out_buffer(char, void*, unsigned int, unsigned int)>:
_ZL10out_buffercPvjj():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:228


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    1458:	42 17       	cp	r20, r18
    145a:	53 07       	cpc	r21, r19
    145c:	20 f4       	brcc	.+8      	; 0x1466 <out_buffer(char, void*, unsigned int, unsigned int)+0xe>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:229
    ((char*)buffer)[idx] = character;
    145e:	64 0f       	add	r22, r20
    1460:	75 1f       	adc	r23, r21
    1462:	fb 01       	movw	r30, r22
    1464:	80 83       	st	Z, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:231
  }
}
    1466:	08 95       	ret

00001468 <out_discard(char, void*, unsigned int, unsigned int)>:
_ZL11out_discardcPvjj():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:238

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    1468:	08 95       	ret

0000146a <get_components(double, unsigned int)>:
_ZL14get_componentsdj():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:442

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
    146a:	2f 92       	push	r2
    146c:	3f 92       	push	r3
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	60 97       	sbiw	r28, 0x10	; 16
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	98 8b       	std	Y+16, r25	; 0x10
    14a0:	8f 87       	std	Y+15, r24	; 0x0f
    14a2:	6a 01       	movw	r12, r20
    14a4:	7b 01       	movw	r14, r22
    14a6:	3e 87       	std	Y+14, r19	; 0x0e
    14a8:	2d 87       	std	Y+13, r18	; 0x0d
get_sign():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:194
}

static inline int get_sign(double x)
{
  // The sign is stored in the highest bit
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
    14aa:	db 01       	movw	r26, r22
    14ac:	ca 01       	movw	r24, r20
    14ae:	88 27       	eor	r24, r24
    14b0:	b7 fd       	sbrc	r27, 7
    14b2:	83 95       	inc	r24
    14b4:	99 27       	eor	r25, r25
    14b6:	aa 27       	eor	r26, r26
    14b8:	bb 27       	eor	r27, r27
_ZL14get_componentsdj():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:444
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
  struct double_components number_;
  number_.is_negative = get_sign(number);
    14ba:	28 2f       	mov	r18, r24
    14bc:	21 70       	andi	r18, 0x01	; 1
    14be:	ef 85       	ldd	r30, Y+15	; 0x0f
    14c0:	f8 89       	ldd	r31, Y+16	; 0x10
    14c2:	20 8b       	std	Z+16, r18	; 0x10
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:445
  double abs_number = (number_.is_negative) ? -number : number;
    14c4:	89 2b       	or	r24, r25
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <get_components(double, unsigned int)+0x66>
    14c8:	f7 fa       	bst	r15, 7
    14ca:	f0 94       	com	r15
    14cc:	f7 f8       	bld	r15, 7
    14ce:	f0 94       	com	r15
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:446
  number_.integral = (int_fast64_t)abs_number;
    14d0:	c7 01       	movw	r24, r14
    14d2:	b6 01       	movw	r22, r12
    14d4:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__fixsfdi>
    14d8:	29 83       	std	Y+1, r18	; 0x01
    14da:	3a 83       	std	Y+2, r19	; 0x02
    14dc:	4b 83       	std	Y+3, r20	; 0x03
    14de:	5c 83       	std	Y+4, r21	; 0x04
    14e0:	6d 83       	std	Y+5, r22	; 0x05
    14e2:	7e 83       	std	Y+6, r23	; 0x06
    14e4:	8f 83       	std	Y+7, r24	; 0x07
    14e6:	98 87       	std	Y+8, r25	; 0x08
    14e8:	af 85       	ldd	r26, Y+15	; 0x0f
    14ea:	b8 89       	ldd	r27, Y+16	; 0x10
    14ec:	2c 93       	st	X, r18
    14ee:	11 96       	adiw	r26, 0x01	; 1
    14f0:	3c 93       	st	X, r19
    14f2:	11 97       	sbiw	r26, 0x01	; 1
    14f4:	12 96       	adiw	r26, 0x02	; 2
    14f6:	4c 93       	st	X, r20
    14f8:	12 97       	sbiw	r26, 0x02	; 2
    14fa:	13 96       	adiw	r26, 0x03	; 3
    14fc:	5c 93       	st	X, r21
    14fe:	13 97       	sbiw	r26, 0x03	; 3
    1500:	14 96       	adiw	r26, 0x04	; 4
    1502:	6c 93       	st	X, r22
    1504:	14 97       	sbiw	r26, 0x04	; 4
    1506:	15 96       	adiw	r26, 0x05	; 5
    1508:	7c 93       	st	X, r23
    150a:	15 97       	sbiw	r26, 0x05	; 5
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	16 96       	adiw	r26, 0x06	; 6
    1510:	8c 93       	st	X, r24
    1512:	16 97       	sbiw	r26, 0x06	; 6
    1514:	98 85       	ldd	r25, Y+8	; 0x08
    1516:	17 96       	adiw	r26, 0x07	; 7
    1518:	9c 93       	st	X, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:447
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
    151a:	ed 85       	ldd	r30, Y+13	; 0x0d
    151c:	fe 85       	ldd	r31, Y+14	; 0x0e
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	ea 5f       	subi	r30, 0xFA	; 250
    1528:	fd 4f       	sbci	r31, 0xFD	; 253
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	a2 81       	ldd	r26, Z+2	; 0x02
    1530:	b3 81       	ldd	r27, Z+3	; 0x03
    1532:	89 87       	std	Y+9, r24	; 0x09
    1534:	9a 87       	std	Y+10, r25	; 0x0a
    1536:	ab 87       	std	Y+11, r26	; 0x0b
    1538:	bc 87       	std	Y+12, r27	; 0x0c
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	98 85       	ldd	r25, Y+8	; 0x08
    153e:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	c7 01       	movw	r24, r14
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    154e:	29 85       	ldd	r18, Y+9	; 0x09
    1550:	3a 85       	ldd	r19, Y+10	; 0x0a
    1552:	4b 85       	ldd	r20, Y+11	; 0x0b
    1554:	5c 85       	ldd	r21, Y+12	; 0x0c
    1556:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    155a:	2b 01       	movw	r4, r22
    155c:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:448
  number_.fractional = (int_fast64_t)remainder;
    155e:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__fixsfdi>
    1562:	82 2e       	mov	r8, r18
    1564:	23 2e       	mov	r2, r19
    1566:	34 2e       	mov	r3, r20
    1568:	95 2e       	mov	r9, r21
    156a:	5b 01       	movw	r10, r22
    156c:	8c 01       	movw	r16, r24
    156e:	af 85       	ldd	r26, Y+15	; 0x0f
    1570:	b8 89       	ldd	r27, Y+16	; 0x10
    1572:	18 96       	adiw	r26, 0x08	; 8
    1574:	2c 93       	st	X, r18
    1576:	18 97       	sbiw	r26, 0x08	; 8
    1578:	19 96       	adiw	r26, 0x09	; 9
    157a:	3c 93       	st	X, r19
    157c:	19 97       	sbiw	r26, 0x09	; 9
    157e:	1a 96       	adiw	r26, 0x0a	; 10
    1580:	4c 93       	st	X, r20
    1582:	1a 97       	sbiw	r26, 0x0a	; 10
    1584:	1b 96       	adiw	r26, 0x0b	; 11
    1586:	5c 93       	st	X, r21
    1588:	1b 97       	sbiw	r26, 0x0b	; 11
    158a:	1c 96       	adiw	r26, 0x0c	; 12
    158c:	6c 93       	st	X, r22
    158e:	1c 97       	sbiw	r26, 0x0c	; 12
    1590:	1d 96       	adiw	r26, 0x0d	; 13
    1592:	bc 92       	st	X, r11
    1594:	1d 97       	sbiw	r26, 0x0d	; 13
    1596:	1e 96       	adiw	r26, 0x0e	; 14
    1598:	8c 93       	st	X, r24
    159a:	1e 97       	sbiw	r26, 0x0e	; 14
    159c:	1f 96       	adiw	r26, 0x0f	; 15
    159e:	1c 93       	st	X, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:450

  remainder -= (double) number_.fractional;
    15a0:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	c3 01       	movw	r24, r6
    15aa:	b2 01       	movw	r22, r4
    15ac:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    15b0:	2b 01       	movw	r4, r22
    15b2:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:452

  if (remainder > 0.5) {
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <get_components(double, unsigned int)+0x15c>
    15c4:	d0 c0       	rjmp	.+416    	; 0x1766 <get_components(double, unsigned int)+0x2fc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:453
    ++number_.fractional;
    15c6:	28 2d       	mov	r18, r8
    15c8:	32 2d       	mov	r19, r2
    15ca:	43 2d       	mov	r20, r3
    15cc:	59 2d       	mov	r21, r9
    15ce:	b5 01       	movw	r22, r10
    15d0:	c8 01       	movw	r24, r16
    15d2:	a1 e0       	ldi	r26, 0x01	; 1
    15d4:	0e 94 85 28 	call	0x510a	; 0x510a <__adddi3_s8>
    15d8:	39 01       	movw	r6, r18
    15da:	4a 01       	movw	r8, r20
    15dc:	5b 01       	movw	r10, r22
    15de:	8c 01       	movw	r16, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:455
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
    15e0:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	69 85       	ldd	r22, Y+9	; 0x09
    15ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f0:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	0c f0       	brlt	.+2      	; 0x15fa <get_components(double, unsigned int)+0x190>
    15f8:	87 c0       	rjmp	.+270    	; 0x1708 <get_components(double, unsigned int)+0x29e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:453
  number_.fractional = (int_fast64_t)remainder;

  remainder -= (double) number_.fractional;

  if (remainder > 0.5) {
    ++number_.fractional;
    15fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    15fc:	f8 89       	ldd	r31, Y+16	; 0x10
    15fe:	60 86       	std	Z+8, r6	; 0x08
    1600:	71 86       	std	Z+9, r7	; 0x09
    1602:	82 86       	std	Z+10, r8	; 0x0a
    1604:	93 86       	std	Z+11, r9	; 0x0b
    1606:	a4 86       	std	Z+12, r10	; 0x0c
    1608:	b5 86       	std	Z+13, r11	; 0x0d
    160a:	06 87       	std	Z+14, r16	; 0x0e
    160c:	17 87       	std	Z+15, r17	; 0x0f
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:467
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
    160e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1610:	fe 85       	ldd	r31, Y+14	; 0x0e
    1612:	ef 2b       	or	r30, r31
    1614:	09 f0       	breq	.+2      	; 0x1618 <get_components(double, unsigned int)+0x1ae>
    1616:	5d c0       	rjmp	.+186    	; 0x16d2 <get_components(double, unsigned int)+0x268>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:468
    remainder = abs_number - (double) number_.integral;
    1618:	af 85       	ldd	r26, Y+15	; 0x0f
    161a:	b8 89       	ldd	r27, Y+16	; 0x10
    161c:	1c 91       	ld	r17, X
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	6c 90       	ld	r6, X
    1622:	11 97       	sbiw	r26, 0x01	; 1
    1624:	12 96       	adiw	r26, 0x02	; 2
    1626:	7c 90       	ld	r7, X
    1628:	12 97       	sbiw	r26, 0x02	; 2
    162a:	13 96       	adiw	r26, 0x03	; 3
    162c:	8c 90       	ld	r8, X
    162e:	13 97       	sbiw	r26, 0x03	; 3
    1630:	14 96       	adiw	r26, 0x04	; 4
    1632:	9c 90       	ld	r9, X
    1634:	14 97       	sbiw	r26, 0x04	; 4
    1636:	15 96       	adiw	r26, 0x05	; 5
    1638:	ac 90       	ld	r10, X
    163a:	15 97       	sbiw	r26, 0x05	; 5
    163c:	16 96       	adiw	r26, 0x06	; 6
    163e:	bc 90       	ld	r11, X
    1640:	16 97       	sbiw	r26, 0x06	; 6
    1642:	17 96       	adiw	r26, 0x07	; 7
    1644:	0c 91       	ld	r16, X
    1646:	21 2f       	mov	r18, r17
    1648:	36 2d       	mov	r19, r6
    164a:	47 2d       	mov	r20, r7
    164c:	58 2d       	mov	r21, r8
    164e:	69 2d       	mov	r22, r9
    1650:	7a 2d       	mov	r23, r10
    1652:	8b 2d       	mov	r24, r11
    1654:	90 2f       	mov	r25, r16
    1656:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	c7 01       	movw	r24, r14
    1660:	b6 01       	movw	r22, r12
    1662:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    1666:	6b 01       	movw	r12, r22
    1668:	7c 01       	movw	r14, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:469
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1676:	87 ff       	sbrs	r24, 7
    1678:	0a c0       	rjmp	.+20     	; 0x168e <get_components(double, unsigned int)+0x224>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	c7 01       	movw	r24, r14
    1684:	b6 01       	movw	r22, r12
    1686:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    168a:	18 16       	cp	r1, r24
    168c:	14 f5       	brge	.+68     	; 0x16d2 <get_components(double, unsigned int)+0x268>
    168e:	21 2f       	mov	r18, r17
    1690:	21 70       	andi	r18, 0x01	; 1
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    16a6:	a9 f0       	breq	.+42     	; 0x16d2 <get_components(double, unsigned int)+0x268>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:472
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
    16a8:	21 2f       	mov	r18, r17
    16aa:	36 2d       	mov	r19, r6
    16ac:	47 2d       	mov	r20, r7
    16ae:	58 2d       	mov	r21, r8
    16b0:	69 2d       	mov	r22, r9
    16b2:	7a 2d       	mov	r23, r10
    16b4:	8b 2d       	mov	r24, r11
    16b6:	90 2f       	mov	r25, r16
    16b8:	a1 e0       	ldi	r26, 0x01	; 1
    16ba:	0e 94 85 28 	call	0x510a	; 0x510a <__adddi3_s8>
    16be:	ef 85       	ldd	r30, Y+15	; 0x0f
    16c0:	f8 89       	ldd	r31, Y+16	; 0x10
    16c2:	20 83       	st	Z, r18
    16c4:	31 83       	std	Z+1, r19	; 0x01
    16c6:	42 83       	std	Z+2, r20	; 0x02
    16c8:	53 83       	std	Z+3, r21	; 0x03
    16ca:	64 83       	std	Z+4, r22	; 0x04
    16cc:	75 83       	std	Z+5, r23	; 0x05
    16ce:	86 83       	std	Z+6, r24	; 0x06
    16d0:	97 83       	std	Z+7, r25	; 0x07
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:476
    }
  }
  return number_;
}
    16d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d4:	98 89       	ldd	r25, Y+16	; 0x10
    16d6:	60 96       	adiw	r28, 0x10	; 16
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
    1706:	08 95       	ret
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:456

  if (remainder > 0.5) {
    ++number_.fractional;
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
      number_.fractional = 0;
    1708:	af 85       	ldd	r26, Y+15	; 0x0f
    170a:	b8 89       	ldd	r27, Y+16	; 0x10
    170c:	18 96       	adiw	r26, 0x08	; 8
    170e:	1c 92       	st	X, r1
    1710:	18 97       	sbiw	r26, 0x08	; 8
    1712:	19 96       	adiw	r26, 0x09	; 9
    1714:	1c 92       	st	X, r1
    1716:	19 97       	sbiw	r26, 0x09	; 9
    1718:	1a 96       	adiw	r26, 0x0a	; 10
    171a:	1c 92       	st	X, r1
    171c:	1a 97       	sbiw	r26, 0x0a	; 10
    171e:	1b 96       	adiw	r26, 0x0b	; 11
    1720:	1c 92       	st	X, r1
    1722:	1b 97       	sbiw	r26, 0x0b	; 11
    1724:	1c 96       	adiw	r26, 0x0c	; 12
    1726:	1c 92       	st	X, r1
    1728:	1c 97       	sbiw	r26, 0x0c	; 12
    172a:	1d 96       	adiw	r26, 0x0d	; 13
    172c:	1c 92       	st	X, r1
    172e:	1d 97       	sbiw	r26, 0x0d	; 13
    1730:	1e 96       	adiw	r26, 0x0e	; 14
    1732:	1c 92       	st	X, r1
    1734:	1e 97       	sbiw	r26, 0x0e	; 14
    1736:	1f 96       	adiw	r26, 0x0f	; 15
    1738:	1c 92       	st	X, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:457
      ++number_.integral;
    173a:	29 81       	ldd	r18, Y+1	; 0x01
    173c:	3a 81       	ldd	r19, Y+2	; 0x02
    173e:	4b 81       	ldd	r20, Y+3	; 0x03
    1740:	5c 81       	ldd	r21, Y+4	; 0x04
    1742:	6d 81       	ldd	r22, Y+5	; 0x05
    1744:	7e 81       	ldd	r23, Y+6	; 0x06
    1746:	8f 81       	ldd	r24, Y+7	; 0x07
    1748:	98 85       	ldd	r25, Y+8	; 0x08
    174a:	a1 e0       	ldi	r26, 0x01	; 1
    174c:	0e 94 85 28 	call	0x510a	; 0x510a <__adddi3_s8>
    1750:	ef 85       	ldd	r30, Y+15	; 0x0f
    1752:	f8 89       	ldd	r31, Y+16	; 0x10
    1754:	20 83       	st	Z, r18
    1756:	31 83       	std	Z+1, r19	; 0x01
    1758:	42 83       	std	Z+2, r20	; 0x02
    175a:	53 83       	std	Z+3, r21	; 0x03
    175c:	64 83       	std	Z+4, r22	; 0x04
    175e:	75 83       	std	Z+5, r23	; 0x05
    1760:	86 83       	std	Z+6, r24	; 0x06
    1762:	97 83       	std	Z+7, r25	; 0x07
    1764:	54 cf       	rjmp	.-344    	; 0x160e <get_components(double, unsigned int)+0x1a4>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:460
    }
  }
  else if (remainder == 0.5) {
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	c3 01       	movw	r24, r6
    1770:	b2 01       	movw	r22, r4
    1772:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1776:	81 11       	cpse	r24, r1
    1778:	4a cf       	rjmp	.-364    	; 0x160e <get_components(double, unsigned int)+0x1a4>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:461
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
    177a:	28 2d       	mov	r18, r8
    177c:	32 2d       	mov	r19, r2
    177e:	43 2d       	mov	r20, r3
    1780:	59 2d       	mov	r21, r9
    1782:	b5 01       	movw	r22, r10
    1784:	c8 01       	movw	r24, r16
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    178c:	61 f0       	breq	.+24     	; 0x17a6 <get_components(double, unsigned int)+0x33c>
    178e:	21 70       	andi	r18, 0x01	; 1
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <get_components(double, unsigned int)+0x33c>
    17a4:	34 cf       	rjmp	.-408    	; 0x160e <get_components(double, unsigned int)+0x1a4>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:463
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    17a6:	28 2d       	mov	r18, r8
    17a8:	32 2d       	mov	r19, r2
    17aa:	43 2d       	mov	r20, r3
    17ac:	59 2d       	mov	r21, r9
    17ae:	b5 01       	movw	r22, r10
    17b0:	c8 01       	movw	r24, r16
    17b2:	a1 e0       	ldi	r26, 0x01	; 1
    17b4:	0e 94 85 28 	call	0x510a	; 0x510a <__adddi3_s8>
    17b8:	af 85       	ldd	r26, Y+15	; 0x0f
    17ba:	b8 89       	ldd	r27, Y+16	; 0x10
    17bc:	18 96       	adiw	r26, 0x08	; 8
    17be:	2c 93       	st	X, r18
    17c0:	18 97       	sbiw	r26, 0x08	; 8
    17c2:	19 96       	adiw	r26, 0x09	; 9
    17c4:	3c 93       	st	X, r19
    17c6:	19 97       	sbiw	r26, 0x09	; 9
    17c8:	1a 96       	adiw	r26, 0x0a	; 10
    17ca:	4c 93       	st	X, r20
    17cc:	1a 97       	sbiw	r26, 0x0a	; 10
    17ce:	1b 96       	adiw	r26, 0x0b	; 11
    17d0:	5c 93       	st	X, r21
    17d2:	1b 97       	sbiw	r26, 0x0b	; 11
    17d4:	1c 96       	adiw	r26, 0x0c	; 12
    17d6:	6c 93       	st	X, r22
    17d8:	1c 97       	sbiw	r26, 0x0c	; 12
    17da:	1d 96       	adiw	r26, 0x0d	; 13
    17dc:	7c 93       	st	X, r23
    17de:	1d 97       	sbiw	r26, 0x0d	; 13
    17e0:	1e 96       	adiw	r26, 0x0e	; 14
    17e2:	8c 93       	st	X, r24
    17e4:	1e 97       	sbiw	r26, 0x0e	; 14
    17e6:	1f 96       	adiw	r26, 0x0f	; 15
    17e8:	9c 93       	st	X, r25
    17ea:	11 cf       	rjmp	.-478    	; 0x160e <get_components(double, unsigned int)+0x1a4>

000017ec <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]>:
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:651
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
    17ec:	2f 92       	push	r2
    17ee:	3f 92       	push	r3
    17f0:	4f 92       	push	r4
    17f2:	5f 92       	push	r5
    17f4:	6f 92       	push	r6
    17f6:	7f 92       	push	r7
    17f8:	8f 92       	push	r8
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	e6 97       	sbiw	r28, 0x36	; 54
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	9c a7       	std	Y+44, r25	; 0x2c
    1822:	8b a7       	std	Y+43, r24	; 0x2b
    1824:	6d a7       	std	Y+45, r22	; 0x2d
    1826:	7e a7       	std	Y+46, r23	; 0x2e
    1828:	58 ab       	std	Y+48, r21	; 0x30
    182a:	4f a7       	std	Y+47, r20	; 0x2f
    182c:	0a 8b       	std	Y+18, r16	; 0x12
    182e:	1b 8b       	std	Y+19, r17	; 0x13
    1830:	2c 8b       	std	Y+20, r18	; 0x14
    1832:	3d 8b       	std	Y+21, r19	; 0x15
    1834:	ff 8e       	std	Y+31, r15	; 0x1f
    1836:	ee 8e       	std	Y+30, r14	; 0x1e
    1838:	da aa       	std	Y+50, r13	; 0x32
    183a:	c9 aa       	std	Y+49, r12	; 0x31
    183c:	b9 a6       	std	Y+41, r11	; 0x29
    183e:	a8 a6       	std	Y+40, r10	; 0x28
    1840:	8b aa       	std	Y+51, r8	; 0x33
    1842:	9c aa       	std	Y+52, r9	; 0x34
    1844:	2d 96       	adiw	r28, 0x0d	; 13
    1846:	2f ad       	ldd	r18, Y+63	; 0x3f
    1848:	2d 97       	sbiw	r28, 0x0d	; 13
    184a:	2d ab       	std	Y+53, r18	; 0x35
    184c:	2e 96       	adiw	r28, 0x0e	; 14
    184e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1850:	2e 97       	sbiw	r28, 0x0e	; 14
    1852:	3e ab       	std	Y+54, r19	; 0x36
get_sign():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:194
}

static inline int get_sign(double x)
{
  // The sign is stored in the highest bit
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
    1854:	8a 89       	ldd	r24, Y+18	; 0x12
    1856:	9b 89       	ldd	r25, Y+19	; 0x13
    1858:	ac 89       	ldd	r26, Y+20	; 0x14
    185a:	bd 89       	ldd	r27, Y+21	; 0x15
    185c:	88 27       	eor	r24, r24
    185e:	b7 fd       	sbrc	r27, 7
    1860:	83 95       	inc	r24
    1862:	99 27       	eor	r25, r25
    1864:	aa 27       	eor	r26, r26
    1866:	bb 27       	eor	r27, r27
    1868:	8e 8b       	std	Y+22, r24	; 0x16
    186a:	9f 8b       	std	Y+23, r25	; 0x17
    186c:	a8 8f       	std	Y+24, r26	; 0x18
    186e:	b9 8f       	std	Y+25, r27	; 0x19
    1870:	0e 89       	ldd	r16, Y+22	; 0x16
    1872:	1f 89       	ldd	r17, Y+23	; 0x17
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:655
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
  const bool negative = get_sign(number);
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
    1874:	01 15       	cp	r16, r1
    1876:	11 05       	cpc	r17, r1
    1878:	49 f0       	breq	.+18     	; 0x188c <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0xa0>
    187a:	2a 89       	ldd	r18, Y+18	; 0x12
    187c:	3b 89       	ldd	r19, Y+19	; 0x13
    187e:	4c 89       	ldd	r20, Y+20	; 0x14
    1880:	5d 89       	ldd	r21, Y+21	; 0x15
    1882:	50 58       	subi	r21, 0x80	; 128
    1884:	2a 8b       	std	Y+18, r18	; 0x12
    1886:	3b 8b       	std	Y+19, r19	; 0x13
    1888:	4c 8b       	std	Y+20, r20	; 0x14
    188a:	5d 8b       	std	Y+21, r21	; 0x15
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:663
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	6a 89       	ldd	r22, Y+18	; 0x12
    1894:	7b 89       	ldd	r23, Y+19	; 0x13
    1896:	8c 89       	ldd	r24, Y+20	; 0x14
    1898:	9d 89       	ldd	r25, Y+21	; 0x15
    189a:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:665
    // TODO: This is a special-case for 0.0 (and -0.0); but proper handling is required for denormals more generally.
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
    189e:	31 2c       	mov	r3, r1
    18a0:	21 2c       	mov	r2, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:663
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
    18a2:	88 23       	and	r24, r24
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0xbc>
    18a6:	0f c1       	rjmp	.+542    	; 0x1ac6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2da>
get_exp2():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:203
{
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
    18a8:	8a 89       	ldd	r24, Y+18	; 0x12
    18aa:	9b 89       	ldd	r25, Y+19	; 0x13
    18ac:	ac 89       	ldd	r26, Y+20	; 0x14
    18ae:	bd 89       	ldd	r27, Y+21	; 0x15
    18b0:	e7 e1       	ldi	r30, 0x17	; 23
    18b2:	b6 95       	lsr	r27
    18b4:	a7 95       	ror	r26
    18b6:	97 95       	ror	r25
    18b8:	87 95       	ror	r24
    18ba:	ea 95       	dec	r30
    18bc:	d1 f7       	brne	.-12     	; 0x18b2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0xc6>
    18be:	99 27       	eor	r25, r25
    18c0:	8f 57       	subi	r24, 0x7F	; 127
    18c2:	91 09       	sbc	r25, r1
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:675
      // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
      int exp2 = get_exp2(conv);
	  // drop the exponent, so conv.F comes into the range [1,2)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
      // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    18c4:	bc 01       	movw	r22, r24
    18c6:	99 0f       	add	r25, r25
    18c8:	88 0b       	sbc	r24, r24
    18ca:	99 0b       	sbc	r25, r25
    18cc:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__floatsisf>
    18d0:	2b e9       	ldi	r18, 0x9B	; 155
    18d2:	30 e2       	ldi	r19, 0x20	; 32
    18d4:	4a e9       	ldi	r20, 0x9A	; 154
    18d6:	5e e3       	ldi	r21, 0x3E	; 62
    18d8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    18dc:	24 e4       	ldi	r18, 0x44	; 68
    18de:	31 e5       	ldi	r19, 0x51	; 81
    18e0:	44 e3       	ldi	r20, 0x34	; 52
    18e2:	5e e3       	ldi	r21, 0x3E	; 62
    18e4:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    18e8:	6b 01       	movw	r12, r22
    18ea:	7c 01       	movw	r14, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:673
    double_with_bit_access conv = get_bit_access(abs_number);
    {
      // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
      int exp2 = get_exp2(conv);
	  // drop the exponent, so conv.F comes into the range [1,2)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
    18ec:	6a 89       	ldd	r22, Y+18	; 0x12
    18ee:	7b 89       	ldd	r23, Y+19	; 0x13
    18f0:	8c 89       	ldd	r24, Y+20	; 0x14
    18f2:	9d 89       	ldd	r25, Y+21	; 0x15
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	99 27       	eor	r25, r25
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	9f 63       	ori	r25, 0x3F	; 63
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:675
      // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 ec       	ldi	r20, 0xC0	; 192
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    1908:	2b e3       	ldi	r18, 0x3B	; 59
    190a:	3d e3       	ldi	r19, 0x3D	; 61
    190c:	44 e9       	ldi	r20, 0x94	; 148
    190e:	5e e3       	ldi	r21, 0x3E	; 62
    1910:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    1920:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__fixsfsi>
    1924:	6a 8f       	std	Y+26, r22	; 0x1a
    1926:	7b 8f       	std	Y+27, r23	; 0x1b
    1928:	8c 8f       	std	Y+28, r24	; 0x1c
    192a:	9d 8f       	std	Y+29, r25	; 0x1d
    192c:	2a 8c       	ldd	r2, Y+26	; 0x1a
    192e:	3b 8c       	ldd	r3, Y+27	; 0x1b
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:677
      // now we want to compute 10^exp10 but we want to be sure it won't overflow
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
    1930:	b1 01       	movw	r22, r2
    1932:	03 2c       	mov	r0, r3
    1934:	00 0c       	add	r0, r0
    1936:	88 0b       	sbc	r24, r24
    1938:	99 0b       	sbc	r25, r25
    193a:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__floatsisf>
    193e:	6b 01       	movw	r12, r22
    1940:	7c 01       	movw	r14, r24
    1942:	28 e7       	ldi	r18, 0x78	; 120
    1944:	3a e9       	ldi	r19, 0x9A	; 154
    1946:	44 e5       	ldi	r20, 0x54	; 84
    1948:	50 e4       	ldi	r21, 0x40	; 64
    194a:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    195a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__fixsfsi>
    195e:	4b 01       	movw	r8, r22
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:678
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
    1960:	2e e8       	ldi	r18, 0x8E	; 142
    1962:	3d e5       	ldi	r19, 0x5D	; 93
    1964:	43 e1       	ldi	r20, 0x13	; 19
    1966:	50 e4       	ldi	r21, 0x40	; 64
    1968:	c7 01       	movw	r24, r14
    196a:	b6 01       	movw	r22, r12
    196c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1970:	6b 01       	movw	r12, r22
    1972:	7c 01       	movw	r14, r24
    1974:	09 2c       	mov	r0, r9
    1976:	00 0c       	add	r0, r0
    1978:	aa 08       	sbc	r10, r10
    197a:	bb 08       	sbc	r11, r11
    197c:	c5 01       	movw	r24, r10
    197e:	b4 01       	movw	r22, r8
    1980:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__floatsisf>
    1984:	28 e1       	ldi	r18, 0x18	; 24
    1986:	32 e7       	ldi	r19, 0x72	; 114
    1988:	41 e3       	ldi	r20, 0x31	; 49
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    199c:	2b 01       	movw	r4, r22
    199e:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:679
      const double z2 = z * z;
    19a0:	ac 01       	movw	r20, r24
    19a2:	9b 01       	movw	r18, r22
    19a4:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:682
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
      // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    19ac:	a3 01       	movw	r20, r6
    19ae:	92 01       	movw	r18, r4
    19b0:	c3 01       	movw	r24, r6
    19b2:	b2 01       	movw	r22, r4
    19b4:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    19b8:	68 a3       	std	Y+32, r22	; 0x20
    19ba:	79 a3       	std	Y+33, r23	; 0x21
    19bc:	8a a3       	std	Y+34, r24	; 0x22
    19be:	9b a3       	std	Y+35, r25	; 0x23
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e6       	ldi	r20, 0x60	; 96
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	c7 01       	movw	r24, r14
    19ca:	b6 01       	movw	r22, r12
    19cc:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	c7 01       	movw	r24, r14
    19e2:	b6 01       	movw	r22, r12
    19e4:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 ec       	ldi	r20, 0xC0	; 192
    19ee:	50 e4       	ldi	r21, 0x40	; 64
    19f0:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	c7 01       	movw	r24, r14
    19fa:	b6 01       	movw	r22, r12
    19fc:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1a00:	6b 01       	movw	r12, r22
    1a02:	7c 01       	movw	r14, r24
    1a04:	a3 01       	movw	r20, r6
    1a06:	92 01       	movw	r18, r4
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e4       	ldi	r25, 0x40	; 64
    1a10:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	c7 01       	movw	r24, r14
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    1a20:	9b 01       	movw	r18, r22
    1a22:	ac 01       	movw	r20, r24
    1a24:	68 a1       	ldd	r22, Y+32	; 0x20
    1a26:	79 a1       	ldd	r23, Y+33	; 0x21
    1a28:	8a a1       	ldd	r24, Y+34	; 0x22
    1a2a:	9b a1       	ldd	r25, Y+35	; 0x23
    1a2c:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:680
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
      // now we want to compute 10^exp10 but we want to be sure it won't overflow
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
      const double z2 = z * z;
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
    1a3c:	3f e7       	ldi	r19, 0x7F	; 127
    1a3e:	83 0e       	add	r8, r19
    1a40:	91 1c       	adc	r9, r1
    1a42:	a1 1c       	adc	r10, r1
    1a44:	b1 1c       	adc	r11, r1
    1a46:	a5 01       	movw	r20, r10
    1a48:	94 01       	movw	r18, r8
    1a4a:	f7 e1       	ldi	r31, 0x17	; 23
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	fa 95       	dec	r31
    1a56:	d1 f7       	brne	.-12     	; 0x1a4c <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x260>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:682
      // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1a58:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1a5c:	2b 01       	movw	r4, r22
    1a5e:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:684
      // correct for rounding errors
      if (abs_number < conv.F) {
    1a60:	ac 01       	movw	r20, r24
    1a62:	9b 01       	movw	r18, r22
    1a64:	6a 89       	ldd	r22, Y+18	; 0x12
    1a66:	7b 89       	ldd	r23, Y+19	; 0x13
    1a68:	8c 89       	ldd	r24, Y+20	; 0x14
    1a6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a6c:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1a70:	87 ff       	sbrs	r24, 7
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2a2>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:685
        exp10--;
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	24 1a       	sub	r2, r20
    1a78:	31 08       	sbc	r3, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:686
        conv.F /= 10;
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	c3 01       	movw	r24, r6
    1a84:	b2 01       	movw	r22, r4
    1a86:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1a8a:	2b 01       	movw	r4, r22
    1a8c:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:689
      }
    }
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
    1a8e:	c1 01       	movw	r24, r2
    1a90:	41 96       	adiw	r24, 0x11	; 17
    1a92:	51 e0       	ldi	r21, 0x01	; 1
    1a94:	5a a7       	std	Y+42, r21	; 0x2a
    1a96:	83 32       	cpi	r24, 0x23	; 35
    1a98:	91 05       	cpc	r25, r1
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2b2>
    1a9c:	1a a6       	std	Y+42, r1	; 0x2a
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:690
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
    1a9e:	83 97       	sbiw	r24, 0x23	; 35
    1aa0:	90 f4       	brcc	.+36     	; 0x1ac6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2da>
    1aa2:	c1 01       	movw	r24, r2
    1aa4:	37 fe       	sbrs	r3, 7
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2c4>
    1aa8:	88 27       	eor	r24, r24
    1aaa:	99 27       	eor	r25, r25
    1aac:	82 19       	sub	r24, r2
    1aae:	93 09       	sbc	r25, r3
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	fc 01       	movw	r30, r24
    1aba:	ea 5f       	subi	r30, 0xFA	; 250
    1abc:	fd 4f       	sbci	r31, 0xFD	; 253
    1abe:	40 80       	ld	r4, Z
    1ac0:	51 80       	ldd	r5, Z+1	; 0x01
    1ac2:	62 80       	ldd	r6, Z+2	; 0x02
    1ac4:	73 80       	ldd	r7, Z+3	; 0x03
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:700
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
    1ac6:	88 a5       	ldd	r24, Y+40	; 0x28
    1ac8:	99 a5       	ldd	r25, Y+41	; 0x29
    1aca:	93 ff       	sbrs	r25, 3
    1acc:	8d c1       	rjmp	.+794    	; 0x1de8 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x5fc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:701
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
    1ace:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ad0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ad2:	9d 01       	movw	r18, r26
    1ad4:	ab 2b       	or	r26, r27
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x2f0>
    1ad8:	21 e0       	ldi	r18, 0x01	; 1
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ade:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:703
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
    1ae2:	bc ef       	ldi	r27, 0xFC	; 252
    1ae4:	2b 16       	cp	r2, r27
    1ae6:	bf ef       	ldi	r27, 0xFF	; 255
    1ae8:	3b 06       	cpc	r3, r27
    1aea:	0c f4       	brge	.+2      	; 0x1aee <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x302>
    1aec:	67 c0       	rjmp	.+206    	; 0x1bbc <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3d0>
    1aee:	22 16       	cp	r2, r18
    1af0:	33 06       	cpc	r3, r19
    1af2:	0c f0       	brlt	.+2      	; 0x1af6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x30a>
    1af4:	63 c0       	rjmp	.+198    	; 0x1bbc <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3d0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:708
    // Now, let's adjust the precision
    // This also decided how we adjust the precision value - as in "%g" mode,
    // "precision" is the number of _significant digits_, and this is when we "translate"
    // the precision value to an actual number of decimal digits.
    int precision_ = (fall_back_to_decimal_only_mode) ?
    1af6:	82 19       	sub	r24, r2
    1af8:	93 09       	sbc	r25, r3
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:703

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
    1afa:	aa 24       	eor	r10, r10
    1afc:	a3 94       	inc	r10
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:711
    // "precision" is the number of _significant digits_, and this is when we "translate"
    // the precision value to an actual number of decimal digits.
    int precision_ = (fall_back_to_decimal_only_mode) ?
        (int) precision - 1 - exp10 :
        (int) precision - 1; // the presence of the exponent ensures only one significant digit comes before the decimal point
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
    1afe:	9f 8f       	std	Y+31, r25	; 0x1f
    1b00:	8e 8f       	std	Y+30, r24	; 0x1e
    1b02:	97 ff       	sbrs	r25, 7
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x31e>
    1b06:	1f 8e       	std	Y+31, r1	; 0x1f
    1b08:	1e 8e       	std	Y+30, r1	; 0x1e
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:712
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
    1b0a:	e8 a5       	ldd	r30, Y+40	; 0x28
    1b0c:	f9 a5       	ldd	r31, Y+41	; 0x29
    1b0e:	f4 60       	ori	r31, 0x04	; 4
    1b10:	f9 a7       	std	Y+41, r31	; 0x29
    1b12:	e8 a7       	std	Y+40, r30	; 0x28
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:715
  }

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
    1b14:	37 fe       	sbrs	r3, 7
    1b16:	1a a6       	std	Y+42, r1	; 0x2a
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:716
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
    1b18:	a1 10       	cpse	r10, r1
    1b1a:	c1 c1       	rjmp	.+898    	; 0x1e9e <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x6b2>
    1b1c:	21 14       	cp	r2, r1
    1b1e:	31 04       	cpc	r3, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x338>
    1b22:	75 c1       	rjmp	.+746    	; 0x1e0e <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x622>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:653

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
  const bool negative = get_sign(number);
    1b24:	8e 89       	ldd	r24, Y+22	; 0x16
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	89 8b       	std	Y+17, r24	; 0x11
apply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:485
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

double apply_scaling(double num, struct scaling_factor normalization)
{
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
    1b2a:	fa a5       	ldd	r31, Y+42	; 0x2a
    1b2c:	ff 23       	and	r31, r31
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x346>
    1b30:	63 c1       	rjmp	.+710    	; 0x1df8 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x60c>
    1b32:	a3 01       	movw	r20, r6
    1b34:	92 01       	movw	r18, r4
    1b36:	6a 89       	ldd	r22, Y+18	; 0x12
    1b38:	7b 89       	ldd	r23, Y+19	; 0x13
    1b3a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b3c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b3e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1b42:	1a a5       	ldd	r17, Y+42	; 0x2a
get_normalized_components():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:522
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
static struct double_components get_normalized_components(bool negative, unsigned int precision, double non_normalized, struct scaling_factor normalization)
{
  struct double_components components;
  components.is_negative = negative;
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
    1b44:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__fixsfdi>
    1b48:	2e 8b       	std	Y+22, r18	; 0x16
    1b4a:	3a 8f       	std	Y+26, r19	; 0x1a
    1b4c:	48 a3       	std	Y+32, r20	; 0x20
    1b4e:	5c a3       	std	Y+36, r21	; 0x24
    1b50:	6d a3       	std	Y+37, r22	; 0x25
    1b52:	7e a3       	std	Y+38, r23	; 0x26
    1b54:	88 2e       	mov	r8, r24
    1b56:	9f a3       	std	Y+39, r25	; 0x27
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:523
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
    1b58:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
unapply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:490
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
}

double unapply_scaling(double normalized, struct scaling_factor normalization)
{
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
    1b5c:	2a a5       	ldd	r18, Y+42	; 0x2a
    1b5e:	a3 01       	movw	r20, r6
    1b60:	22 23       	and	r18, r18
    1b62:	71 f1       	breq	.+92     	; 0x1bc0 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3d4>
    1b64:	92 01       	movw	r18, r4
    1b66:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
get_normalized_components():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:523
static struct double_components get_normalized_components(bool negative, unsigned int precision, double non_normalized, struct scaling_factor normalization)
{
  struct double_components components;
  components.is_negative = negative;
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	6a 89       	ldd	r22, Y+18	; 0x12
    1b70:	7b 89       	ldd	r23, Y+19	; 0x13
    1b72:	8c 89       	ldd	r24, Y+20	; 0x14
    1b74:	9d 89       	ldd	r25, Y+21	; 0x15
    1b76:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	7c 01       	movw	r14, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:524
  double prec_power_of_10 = powers_of_10[precision];
    1b7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b80:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	ea 5f       	subi	r30, 0xFA	; 250
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	a2 81       	ldd	r26, Z+2	; 0x02
    1b94:	b3 81       	ldd	r27, Z+3	; 0x03
    1b96:	8a 8b       	std	Y+18, r24	; 0x12
    1b98:	9b 8b       	std	Y+19, r25	; 0x13
    1b9a:	ac 8b       	std	Y+20, r26	; 0x14
    1b9c:	bd 8b       	std	Y+21, r27	; 0x15
update_normalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:496
}

struct scaling_factor update_normalization(struct scaling_factor sf, double extra_multiplicative_factor)
{
  struct scaling_factor result;
  if (sf.multiply) {
    1b9e:	11 23       	and	r17, r17
    1ba0:	99 f0       	breq	.+38     	; 0x1bc8 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3dc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:498
    result.multiply = true;
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
    1ba2:	a3 01       	movw	r20, r6
    1ba4:	92 01       	movw	r18, r4
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
apply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:485
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

double apply_scaling(double num, struct scaling_factor normalization)
{
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1bba:	3d c0       	rjmp	.+122    	; 0x1c36 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x44a>
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:703

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
    1bbc:	a1 2c       	mov	r10, r1
    1bbe:	9f cf       	rjmp	.-194    	; 0x1afe <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x312>
unapply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:490
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
}

double unapply_scaling(double normalized, struct scaling_factor normalization)
{
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
    1bc0:	92 01       	movw	r18, r4
    1bc2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    1bc6:	d1 cf       	rjmp	.-94     	; 0x1b6a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x37e>
get_exp2():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:203
{
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
    1bc8:	d3 01       	movw	r26, r6
    1bca:	c2 01       	movw	r24, r4
    1bcc:	57 e1       	ldi	r21, 0x17	; 23
    1bce:	b6 95       	lsr	r27
    1bd0:	a7 95       	ror	r26
    1bd2:	97 95       	ror	r25
    1bd4:	87 95       	ror	r24
    1bd6:	5a 95       	dec	r21
    1bd8:	d1 f7       	brne	.-12     	; 0x1bce <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3e2>
    1bda:	99 27       	eor	r25, r25
update_normalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:505
  else {
    int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
    int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));

    // Divide the larger-exponent raw raw_factor by the smaller
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
    1bdc:	9c 01       	movw	r18, r24
    1bde:	2f 57       	subi	r18, 0x7F	; 127
    1be0:	31 09       	sbc	r19, r1
    1be2:	37 ff       	sbrs	r19, 7
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x400>
    1be6:	31 95       	neg	r19
    1be8:	21 95       	neg	r18
    1bea:	31 09       	sbc	r19, r1
get_exp2():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:203
{
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
    1bec:	8a 89       	ldd	r24, Y+18	; 0x12
    1bee:	9b 89       	ldd	r25, Y+19	; 0x13
    1bf0:	ac 89       	ldd	r26, Y+20	; 0x14
    1bf2:	bd 89       	ldd	r27, Y+21	; 0x15
    1bf4:	47 e1       	ldi	r20, 0x17	; 23
    1bf6:	b6 95       	lsr	r27
    1bf8:	a7 95       	ror	r26
    1bfa:	97 95       	ror	r25
    1bfc:	87 95       	ror	r24
    1bfe:	4a 95       	dec	r20
    1c00:	d1 f7       	brne	.-12     	; 0x1bf6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x40a>
    1c02:	99 27       	eor	r25, r25
update_normalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:505
  else {
    int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
    int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));

    // Divide the larger-exponent raw raw_factor by the smaller
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
    1c04:	8f 57       	subi	r24, 0x7F	; 127
    1c06:	91 09       	sbc	r25, r1
    1c08:	97 ff       	sbrs	r25, 7
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x426>
    1c0c:	91 95       	neg	r25
    1c0e:	81 95       	neg	r24
    1c10:	91 09       	sbc	r25, r1
    1c12:	82 17       	cp	r24, r18
    1c14:	93 07       	cpc	r25, r19
    1c16:	0c f0       	brlt	.+2      	; 0x1c1a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x42e>
    1c18:	7d c0       	rjmp	.+250    	; 0x1d14 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x528>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:507
      result.multiply = false;
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
    1c1a:	2a 89       	ldd	r18, Y+18	; 0x12
    1c1c:	3b 89       	ldd	r19, Y+19	; 0x13
    1c1e:	4c 89       	ldd	r20, Y+20	; 0x14
    1c20:	5d 89       	ldd	r21, Y+21	; 0x15
    1c22:	c3 01       	movw	r24, r6
    1c24:	b2 01       	movw	r22, r4
    1c26:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
apply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:485
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

double apply_scaling(double num, struct scaling_factor normalization)
{
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
    1c2a:	9b 01       	movw	r18, r22
    1c2c:	ac 01       	movw	r20, r24
    1c2e:	c7 01       	movw	r24, r14
    1c30:	b6 01       	movw	r22, r12
    1c32:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1c36:	2b 01       	movw	r4, r22
    1c38:	3c 01       	movw	r6, r24
get_normalized_components():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:529
  double prec_power_of_10 = powers_of_10[precision];
  struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_10);
  double scaled_remainder = apply_scaling(remainder, account_for_precision);
  double rounding_threshold = 0.5;

  if (precision == 0U) {
    1c3a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1c3c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1c3e:	ab 2b       	or	r26, r27
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x458>
    1c42:	71 c0       	rjmp	.+226    	; 0x1d26 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x53a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:531
    components.fractional = 0;
    components.integral += (scaled_remainder >= rounding_threshold);
    1c44:	11 e0       	ldi	r17, 0x01	; 1
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    1c52:	87 fd       	sbrc	r24, 7
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	21 2f       	mov	r18, r17
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	ae 88       	ldd	r10, Y+22	; 0x16
    1c68:	ba 8c       	ldd	r11, Y+26	; 0x1a
    1c6a:	c8 a0       	ldd	r12, Y+32	; 0x20
    1c6c:	dc a0       	ldd	r13, Y+36	; 0x24
    1c6e:	ed a0       	ldd	r14, Y+37	; 0x25
    1c70:	fe a0       	ldd	r15, Y+38	; 0x26
    1c72:	08 2d       	mov	r16, r8
    1c74:	1f a1       	ldd	r17, Y+39	; 0x27
    1c76:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__adddi3>
    1c7a:	2e 8b       	std	Y+22, r18	; 0x16
    1c7c:	3a 8f       	std	Y+26, r19	; 0x1a
    1c7e:	48 a3       	std	Y+32, r20	; 0x20
    1c80:	5c a3       	std	Y+36, r21	; 0x24
    1c82:	6d a3       	std	Y+37, r22	; 0x25
    1c84:	7e a3       	std	Y+38, r23	; 0x26
    1c86:	88 2e       	mov	r8, r24
    1c88:	9f a3       	std	Y+39, r25	; 0x27
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:532
    if (scaled_remainder == rounding_threshold) {
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	c3 01       	movw	r24, r6
    1c94:	b2 01       	movw	r22, r4
    1c96:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x4b8>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:534
      // banker's rounding: Round towards the even number (making the mean error 0)
      components.integral &= ~((int_fast64_t) 0x1);
    1c9e:	be 89       	ldd	r27, Y+22	; 0x16
    1ca0:	be 7f       	andi	r27, 0xFE	; 254
    1ca2:	be 8b       	std	Y+22, r27	; 0x16
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:530
  struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_10);
  double scaled_remainder = apply_scaling(remainder, account_for_precision);
  double rounding_threshold = 0.5;

  if (precision == 0U) {
    components.fractional = 0;
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	b1 2c       	mov	r11, r1
    1ca8:	c1 2c       	mov	r12, r1
    1caa:	91 2c       	mov	r9, r1
    1cac:	d1 2c       	mov	r13, r1
    1cae:	e1 2c       	mov	r14, r1
    1cb0:	f1 2c       	mov	r15, r1
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:733
      // ... and it should already be the case that decimal_part_components.fractional == 0
    }
    // TODO: What about rollover strictly within the fractional part?
  }
  else {
    if (decimal_part_components.integral >= 10) {
    1cb4:	2e 89       	ldd	r18, Y+22	; 0x16
    1cb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1cb8:	48 a1       	ldd	r20, Y+32	; 0x20
    1cba:	5c a1       	ldd	r21, Y+36	; 0x24
    1cbc:	6d a1       	ldd	r22, Y+37	; 0x25
    1cbe:	7e a1       	ldd	r23, Y+38	; 0x26
    1cc0:	88 2d       	mov	r24, r8
    1cc2:	9f a1       	ldd	r25, Y+39	; 0x27
    1cc4:	a9 e0       	ldi	r26, 0x09	; 9
    1cc6:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    1cca:	a9 f0       	breq	.+42     	; 0x1cf6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x50a>
    1ccc:	a4 f0       	brlt	.+40     	; 0x1cf6 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x50a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:734
      exp10++;
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	23 1a       	sub	r2, r19
    1cd2:	33 0a       	sbc	r3, r19
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:736
      decimal_part_components.integral = 1;
      decimal_part_components.fractional = 0;
    1cd4:	10 e0       	ldi	r17, 0x00	; 0
    1cd6:	b1 2c       	mov	r11, r1
    1cd8:	c1 2c       	mov	r12, r1
    1cda:	91 2c       	mov	r9, r1
    1cdc:	d1 2c       	mov	r13, r1
    1cde:	e1 2c       	mov	r14, r1
    1ce0:	f1 2c       	mov	r15, r1
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:735
    // TODO: What about rollover strictly within the fractional part?
  }
  else {
    if (decimal_part_components.integral >= 10) {
      exp10++;
      decimal_part_components.integral = 1;
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	4e 8b       	std	Y+22, r20	; 0x16
    1ce8:	1a 8e       	std	Y+26, r1	; 0x1a
    1cea:	18 a2       	std	Y+32, r1	; 0x20
    1cec:	1c a2       	std	Y+36, r1	; 0x24
    1cee:	1d a2       	std	Y+37, r1	; 0x25
    1cf0:	1e a2       	std	Y+38, r1	; 0x26
    1cf2:	81 2c       	mov	r8, r1
    1cf4:	1f a2       	std	Y+39, r1	; 0x27
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:742
    }
  }

  // the exp10 format is "E%+03d" and largest possible exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
    1cf6:	c1 01       	movw	r24, r2
    1cf8:	8d 59       	subi	r24, 0x9D	; 157
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	51 2c       	mov	r5, r1
    1cfe:	25 e0       	ldi	r18, 0x05	; 5
    1d00:	62 2e       	mov	r6, r18
    1d02:	71 2c       	mov	r7, r1
    1d04:	87 3c       	cpi	r24, 0xC7	; 199
    1d06:	91 05       	cpc	r25, r1
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x520>
    1d0a:	27 c1       	rjmp	.+590    	; 0x1f5a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x76e>
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	68 2e       	mov	r6, r24
    1d10:	71 2c       	mov	r7, r1
    1d12:	23 c1       	rjmp	.+582    	; 0x1f5a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x76e>
update_normalization():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:511
      result.multiply = false;
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
    }
    else {
      result.multiply = true;
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
    1d14:	a3 01       	movw	r20, r6
    1d16:	92 01       	movw	r18, r4
    1d18:	6a 89       	ldd	r22, Y+18	; 0x12
    1d1a:	7b 89       	ldd	r23, Y+19	; 0x13
    1d1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1e:	9d 89       	ldd	r25, Y+21	; 0x15
    1d20:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1d24:	44 cf       	rjmp	.-376    	; 0x1bae <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x3c2>
get_normalized_components():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:538
      // banker's rounding: Round towards the even number (making the mean error 0)
      components.integral &= ~((int_fast64_t) 0x1);
    }
  }
  else {
    components.fractional = (int_fast64_t) scaled_remainder;
    1d26:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__fixsfdi>
    1d2a:	59 01       	movw	r10, r18
    1d2c:	6a 01       	movw	r12, r20
    1d2e:	7b 01       	movw	r14, r22
    1d30:	08 2f       	mov	r16, r24
    1d32:	99 2e       	mov	r9, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:539
    scaled_remainder -= components.fractional;
    1d34:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    1d38:	9b 01       	movw	r18, r22
    1d3a:	ac 01       	movw	r20, r24
    1d3c:	c3 01       	movw	r24, r6
    1d3e:	b2 01       	movw	r22, r4
    1d40:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    1d44:	2b 01       	movw	r4, r22
    1d46:	3c 01       	movw	r6, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:541

    components.fractional += (scaled_remainder >= rounding_threshold);
    1d48:	11 e0       	ldi	r17, 0x01	; 1
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    1d56:	87 fd       	sbrc	r24, 7
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	21 2f       	mov	r18, r17
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	19 2d       	mov	r17, r9
    1d6c:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__adddi3>
    1d70:	12 2f       	mov	r17, r18
    1d72:	b3 2e       	mov	r11, r19
    1d74:	c4 2e       	mov	r12, r20
    1d76:	95 2e       	mov	r9, r21
    1d78:	d6 2e       	mov	r13, r22
    1d7a:	e7 2e       	mov	r14, r23
    1d7c:	f8 2e       	mov	r15, r24
    1d7e:	09 2f       	mov	r16, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:542
    if (scaled_remainder == rounding_threshold) {
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	c3 01       	movw	r24, r6
    1d8a:	b2 01       	movw	r22, r4
    1d8c:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1d90:	81 11       	cpse	r24, r1
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x5aa>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:544
      // banker's rounding: Round towards the even number (making the mean error 0)
      components.fractional &= ~((int_fast64_t) 0x1);
    1d94:	1e 7f       	andi	r17, 0xFE	; 254
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:548
    }
    // handle rollover, e.g. the case of 0.99 with precision 1 becoming (0,100),
    // and must then be corrected into (1, 0).
    if ((double) components.fractional >= prec_power_of_10) {
    1d96:	21 2f       	mov	r18, r17
    1d98:	3b 2d       	mov	r19, r11
    1d9a:	4c 2d       	mov	r20, r12
    1d9c:	59 2d       	mov	r21, r9
    1d9e:	6d 2d       	mov	r22, r13
    1da0:	7e 2d       	mov	r23, r14
    1da2:	8f 2d       	mov	r24, r15
    1da4:	90 2f       	mov	r25, r16
    1da6:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	6a 89       	ldd	r22, Y+18	; 0x12
    1db0:	7b 89       	ldd	r23, Y+19	; 0x13
    1db2:	8c 89       	ldd	r24, Y+20	; 0x14
    1db4:	9d 89       	ldd	r25, Y+21	; 0x15
    1db6:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	0c f4       	brge	.+2      	; 0x1dc0 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x5d4>
    1dbe:	7a cf       	rjmp	.-268    	; 0x1cb4 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x4c8>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:550
      components.fractional = 0;
      ++components.integral;
    1dc0:	2e 89       	ldd	r18, Y+22	; 0x16
    1dc2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1dc4:	48 a1       	ldd	r20, Y+32	; 0x20
    1dc6:	5c a1       	ldd	r21, Y+36	; 0x24
    1dc8:	6d a1       	ldd	r22, Y+37	; 0x25
    1dca:	7e a1       	ldd	r23, Y+38	; 0x26
    1dcc:	88 2d       	mov	r24, r8
    1dce:	9f a1       	ldd	r25, Y+39	; 0x27
    1dd0:	a1 e0       	ldi	r26, 0x01	; 1
    1dd2:	0e 94 85 28 	call	0x510a	; 0x510a <__adddi3_s8>
    1dd6:	2e 8b       	std	Y+22, r18	; 0x16
    1dd8:	3a 8f       	std	Y+26, r19	; 0x1a
    1dda:	48 a3       	std	Y+32, r20	; 0x20
    1ddc:	5c a3       	std	Y+36, r21	; 0x24
    1dde:	6d a3       	std	Y+37, r22	; 0x25
    1de0:	7e a3       	std	Y+38, r23	; 0x26
    1de2:	88 2e       	mov	r8, r24
    1de4:	9f a3       	std	Y+39, r25	; 0x27
    1de6:	5e cf       	rjmp	.-324    	; 0x1ca4 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x4b8>
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:715
        (int) precision - 1; // the presence of the exponent ensures only one significant digit comes before the decimal point
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
  }

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
    1de8:	37 fc       	sbrc	r3, 7
    1dea:	98 ce       	rjmp	.-720    	; 0x1b1c <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x330>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:716
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
    1dec:	21 14       	cp	r2, r1
    1dee:	31 04       	cpc	r3, r1
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x622>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:653

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
  const bool negative = get_sign(number);
    1df2:	8e 89       	ldd	r24, Y+22	; 0x16
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	89 8b       	std	Y+17, r24	; 0x11
apply_scaling():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:485
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

double apply_scaling(double num, struct scaling_factor normalization)
{
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
    1df8:	a3 01       	movw	r20, r6
    1dfa:	92 01       	movw	r18, r4
    1dfc:	6a 89       	ldd	r22, Y+18	; 0x12
    1dfe:	7b 89       	ldd	r23, Y+19	; 0x13
    1e00:	8c 89       	ldd	r24, Y+20	; 0x14
    1e02:	9d 89       	ldd	r25, Y+21	; 0x15
    1e04:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	1a a6       	std	Y+42, r1	; 0x2a
    1e0c:	9b ce       	rjmp	.-714    	; 0x1b44 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x358>
_ZL24print_exponential_numberPFvcPvjjEPcjjdjjjS2_j.constprop.43():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:719

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
    1e0e:	a1 2c       	mov	r10, r1
    1e10:	01 2b       	or	r16, r17
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x62a>
    1e14:	46 c0       	rjmp	.+140    	; 0x1ea2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x6b6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:720
    get_normalized_components(negative, precision, abs_number, normalization);
    1e16:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1e18:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1e1a:	4a 89       	ldd	r20, Y+18	; 0x12
    1e1c:	5b 89       	ldd	r21, Y+19	; 0x13
    1e1e:	6c 89       	ldd	r22, Y+20	; 0x14
    1e20:	7d 89       	ldd	r23, Y+21	; 0x15
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	0e 94 35 0a 	call	0x146a	; 0x146a <get_components(double, unsigned int)>
    1e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2c:	fe 8b       	std	Y+22, r31	; 0x16
    1e2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e30:	2a 8f       	std	Y+26, r18	; 0x1a
    1e32:	3b 81       	ldd	r19, Y+3	; 0x03
    1e34:	38 a3       	std	Y+32, r19	; 0x20
    1e36:	4c 81       	ldd	r20, Y+4	; 0x04
    1e38:	4c a3       	std	Y+36, r20	; 0x24
    1e3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1e3c:	5d a3       	std	Y+37, r21	; 0x25
    1e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e40:	8e a3       	std	Y+38, r24	; 0x26
    1e42:	8f 80       	ldd	r8, Y+7	; 0x07
    1e44:	98 85       	ldd	r25, Y+8	; 0x08
    1e46:	9f a3       	std	Y+39, r25	; 0x27
    1e48:	19 85       	ldd	r17, Y+9	; 0x09
    1e4a:	ba 84       	ldd	r11, Y+10	; 0x0a
    1e4c:	cb 84       	ldd	r12, Y+11	; 0x0b
    1e4e:	9c 84       	ldd	r9, Y+12	; 0x0c
    1e50:	dd 84       	ldd	r13, Y+13	; 0x0d
    1e52:	ee 84       	ldd	r14, Y+14	; 0x0e
    1e54:	ff 84       	ldd	r15, Y+15	; 0x0f
    1e56:	08 89       	ldd	r16, Y+16	; 0x10
    1e58:	2d cf       	rjmp	.-422    	; 0x1cb4 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x4c8>
    1e5a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1e5c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1e5e:	4a 89       	ldd	r20, Y+18	; 0x12
    1e60:	5b 89       	ldd	r21, Y+19	; 0x13
    1e62:	6c 89       	ldd	r22, Y+20	; 0x14
    1e64:	7d 89       	ldd	r23, Y+21	; 0x15
    1e66:	ce 01       	movw	r24, r28
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	0e 94 35 0a 	call	0x146a	; 0x146a <get_components(double, unsigned int)>
    1e6e:	a9 81       	ldd	r26, Y+1	; 0x01
    1e70:	ae 8b       	std	Y+22, r26	; 0x16
    1e72:	ba 81       	ldd	r27, Y+2	; 0x02
    1e74:	ba 8f       	std	Y+26, r27	; 0x1a
    1e76:	eb 81       	ldd	r30, Y+3	; 0x03
    1e78:	e8 a3       	std	Y+32, r30	; 0x20
    1e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7c:	fc a3       	std	Y+36, r31	; 0x24
    1e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e80:	2d a3       	std	Y+37, r18	; 0x25
    1e82:	3e 81       	ldd	r19, Y+6	; 0x06
    1e84:	3e a3       	std	Y+38, r19	; 0x26
    1e86:	8f 80       	ldd	r8, Y+7	; 0x07
    1e88:	48 85       	ldd	r20, Y+8	; 0x08
    1e8a:	4f a3       	std	Y+39, r20	; 0x27
    1e8c:	19 85       	ldd	r17, Y+9	; 0x09
    1e8e:	ba 84       	ldd	r11, Y+10	; 0x0a
    1e90:	cb 84       	ldd	r12, Y+11	; 0x0b
    1e92:	9c 84       	ldd	r9, Y+12	; 0x0c
    1e94:	dd 84       	ldd	r13, Y+13	; 0x0d
    1e96:	ee 84       	ldd	r14, Y+14	; 0x0e
    1e98:	ff 84       	ldd	r15, Y+15	; 0x0f
    1e9a:	08 89       	ldd	r16, Y+16	; 0x10
    1e9c:	27 c0       	rjmp	.+78     	; 0x1eec <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x700>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:719

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
    1e9e:	01 2b       	or	r16, r17
    1ea0:	e1 f2       	breq	.-72     	; 0x1e5a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x66e>
    1ea2:	4a 89       	ldd	r20, Y+18	; 0x12
    1ea4:	5b 89       	ldd	r21, Y+19	; 0x13
    1ea6:	6c 89       	ldd	r22, Y+20	; 0x14
    1ea8:	7d 89       	ldd	r23, Y+21	; 0x15
    1eaa:	70 58       	subi	r23, 0x80	; 128
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:720
    get_normalized_components(negative, precision, abs_number, normalization);
    1eac:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1eae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	0e 94 35 0a 	call	0x146a	; 0x146a <get_components(double, unsigned int)>
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	ee 8b       	std	Y+22, r30	; 0x16
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	fa 8f       	std	Y+26, r31	; 0x1a
    1ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec2:	28 a3       	std	Y+32, r18	; 0x20
    1ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec6:	3c a3       	std	Y+36, r19	; 0x24
    1ec8:	4d 81       	ldd	r20, Y+5	; 0x05
    1eca:	4d a3       	std	Y+37, r20	; 0x25
    1ecc:	5e 81       	ldd	r21, Y+6	; 0x06
    1ece:	5e a3       	std	Y+38, r21	; 0x26
    1ed0:	8f 80       	ldd	r8, Y+7	; 0x07
    1ed2:	88 85       	ldd	r24, Y+8	; 0x08
    1ed4:	8f a3       	std	Y+39, r24	; 0x27
    1ed6:	19 85       	ldd	r17, Y+9	; 0x09
    1ed8:	ba 84       	ldd	r11, Y+10	; 0x0a
    1eda:	cb 84       	ldd	r12, Y+11	; 0x0b
    1edc:	9c 84       	ldd	r9, Y+12	; 0x0c
    1ede:	dd 84       	ldd	r13, Y+13	; 0x0d
    1ee0:	ee 84       	ldd	r14, Y+14	; 0x0e
    1ee2:	ff 84       	ldd	r15, Y+15	; 0x0f
    1ee4:	08 89       	ldd	r16, Y+16	; 0x10
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:724

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
    1ee6:	aa 20       	and	r10, r10
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x700>
    1eea:	e4 ce       	rjmp	.-568    	; 0x1cb4 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x4c8>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:725
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
    1eec:	68 a4       	ldd	r6, Y+40	; 0x28
    1eee:	79 a4       	ldd	r7, Y+41	; 0x29
    1ef0:	66 24       	eor	r6, r6
    1ef2:	98 e0       	ldi	r25, 0x08	; 8
    1ef4:	79 22       	and	r7, r25
    1ef6:	a8 a5       	ldd	r26, Y+40	; 0x28
    1ef8:	b9 a5       	ldd	r27, Y+41	; 0x29
    1efa:	55 24       	eor	r5, r5
    1efc:	53 94       	inc	r5
    1efe:	b3 ff       	sbrs	r27, 3
    1f00:	2c c0       	rjmp	.+88     	; 0x1f5a <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x76e>
    1f02:	bf ef       	ldi	r27, 0xFF	; 255
    1f04:	2b 16       	cp	r2, r27
    1f06:	3b 06       	cpc	r3, r27
    1f08:	24 f1       	brlt	.+72     	; 0x1f52 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x766>
    1f0a:	31 01       	movw	r6, r2
    1f0c:	ef ef       	ldi	r30, 0xFF	; 255
    1f0e:	6e 1a       	sub	r6, r30
    1f10:	7e 0a       	sbc	r7, r30
    1f12:	2e 89       	ldd	r18, Y+22	; 0x16
    1f14:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1f16:	48 a1       	ldd	r20, Y+32	; 0x20
    1f18:	5c a1       	ldd	r21, Y+36	; 0x24
    1f1a:	6d a1       	ldd	r22, Y+37	; 0x25
    1f1c:	7e a1       	ldd	r23, Y+38	; 0x26
    1f1e:	88 2d       	mov	r24, r8
    1f20:	9f a1       	ldd	r25, Y+39	; 0x27
    1f22:	0e 94 77 25 	call	0x4aee	; 0x4aee <__floatdisf>
    1f26:	f3 01       	movw	r30, r6
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	ea 5f       	subi	r30, 0xFA	; 250
    1f32:	fd 4f       	sbci	r31, 0xFD	; 253
    1f34:	20 81       	ld	r18, Z
    1f36:	31 81       	ldd	r19, Z+1	; 0x01
    1f38:	42 81       	ldd	r20, Z+2	; 0x02
    1f3a:	53 81       	ldd	r21, Z+3	; 0x03
    1f3c:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    1f40:	81 11       	cpse	r24, r1
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x766>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:727
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
    1f44:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f46:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f48:	21 50       	subi	r18, 0x01	; 1
    1f4a:	31 09       	sbc	r19, r1
    1f4c:	3f 8f       	std	Y+31, r19	; 0x1f
    1f4e:	2e 8f       	std	Y+30, r18	; 0x1e
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:726

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
      exp10++; // Not strictly necessary, since exp10 is no longer really used
    1f50:	13 01       	movw	r2, r6
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:725
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
    1f52:	55 24       	eor	r5, r5
    1f54:	53 94       	inc	r5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:742
    }
  }

  // the exp10 format is "E%+03d" and largest possible exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
    1f56:	71 2c       	mov	r7, r1
    1f58:	61 2c       	mov	r6, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:745

  unsigned int decimal_part_width =
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
    1f5a:	88 a5       	ldd	r24, Y+40	; 0x28
    1f5c:	99 a5       	ldd	r25, Y+41	; 0x29
    1f5e:	82 70       	andi	r24, 0x02	; 2
    1f60:	99 27       	eor	r25, r25
    1f62:	9b 8b       	std	Y+19, r25	; 0x13
    1f64:	8a 8b       	std	Y+18, r24	; 0x12
    1f66:	98 a5       	ldd	r25, Y+40	; 0x28
    1f68:	91 ff       	sbrs	r25, 1
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x786>
    1f6c:	61 14       	cp	r6, r1
    1f6e:	71 04       	cpc	r7, r1
    1f70:	41 f4       	brne	.+16     	; 0x1f82 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x796>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:751
      // We're padding on the right, so the width constraint is the exponent part's
      // problem, not the decimal part's, so we'll use as many characters as we need:
      0U :
      // We're padding on the left; so the width constraint is the decimal part's
      // problem. Well, can both the decimal part and the exponent part fit within our overall width?
      ((width > exp10_part_width) ?
    1f72:	a9 a9       	ldd	r26, Y+49	; 0x31
    1f74:	ba a9       	ldd	r27, Y+50	; 0x32
    1f76:	cd 01       	movw	r24, r26
    1f78:	86 19       	sub	r24, r6
    1f7a:	97 09       	sbc	r25, r7
    1f7c:	6a 16       	cp	r6, r26
    1f7e:	7b 06       	cpc	r7, r27
    1f80:	10 f0       	brcs	.+4      	; 0x1f86 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x79a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:745
  // the exp10 format is "E%+03d" and largest possible exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;

  unsigned int decimal_part_width =
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	80 e0       	ldi	r24, 0x00	; 0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:760
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
    1f86:	be 89       	ldd	r27, Y+22	; 0x16
    1f88:	b9 83       	std	Y+1, r27	; 0x01
    1f8a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f8c:	ea 83       	std	Y+2, r30	; 0x02
    1f8e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f90:	fb 83       	std	Y+3, r31	; 0x03
    1f92:	2c a1       	ldd	r18, Y+36	; 0x24
    1f94:	2c 83       	std	Y+4, r18	; 0x04
    1f96:	3d a1       	ldd	r19, Y+37	; 0x25
    1f98:	3d 83       	std	Y+5, r19	; 0x05
    1f9a:	4e a1       	ldd	r20, Y+38	; 0x26
    1f9c:	4e 83       	std	Y+6, r20	; 0x06
    1f9e:	8f 82       	std	Y+7, r8	; 0x07
    1fa0:	5f a1       	ldd	r21, Y+39	; 0x27
    1fa2:	58 87       	std	Y+8, r21	; 0x08
    1fa4:	19 87       	std	Y+9, r17	; 0x09
    1fa6:	ba 86       	std	Y+10, r11	; 0x0a
    1fa8:	cb 86       	std	Y+11, r12	; 0x0b
    1faa:	9c 86       	std	Y+12, r9	; 0x0c
    1fac:	dd 86       	std	Y+13, r13	; 0x0d
    1fae:	ee 86       	std	Y+14, r14	; 0x0e
    1fb0:	ff 86       	std	Y+15, r15	; 0x0f
    1fb2:	08 8b       	std	Y+16, r16	; 0x10
    1fb4:	ae a9       	ldd	r26, Y+54	; 0x36
    1fb6:	af 93       	push	r26
    1fb8:	bd a9       	ldd	r27, Y+53	; 0x35
    1fba:	bf 93       	push	r27
    1fbc:	ec a9       	ldd	r30, Y+52	; 0x34
    1fbe:	ef 93       	push	r30
    1fc0:	fb a9       	ldd	r31, Y+51	; 0x33
    1fc2:	ff 93       	push	r31
    1fc4:	29 a5       	ldd	r18, Y+41	; 0x29
    1fc6:	2f 93       	push	r18
    1fc8:	38 a5       	ldd	r19, Y+40	; 0x28
    1fca:	3f 93       	push	r19
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
    1fd0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1fd2:	4f 93       	push	r20
    1fd4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1fd6:	5f 93       	push	r21
    1fd8:	88 a9       	ldd	r24, Y+48	; 0x30
    1fda:	8f 93       	push	r24
    1fdc:	9f a5       	ldd	r25, Y+47	; 0x2f
    1fde:	9f 93       	push	r25
    1fe0:	ae a5       	ldd	r26, Y+46	; 0x2e
    1fe2:	af 93       	push	r26
    1fe4:	bd a5       	ldd	r27, Y+45	; 0x2d
    1fe6:	bf 93       	push	r27
    1fe8:	ec a5       	ldd	r30, Y+44	; 0x2c
    1fea:	ef 93       	push	r30
    1fec:	fb a5       	ldd	r31, Y+43	; 0x2b
    1fee:	ff 93       	push	r31
    1ff0:	89 80       	ldd	r8, Y+1	; 0x01
    1ff2:	9a 80       	ldd	r9, Y+2	; 0x02
    1ff4:	ab 80       	ldd	r10, Y+3	; 0x03
    1ff6:	bc 80       	ldd	r11, Y+4	; 0x04
    1ff8:	cd 80       	ldd	r12, Y+5	; 0x05
    1ffa:	de 80       	ldd	r13, Y+6	; 0x06
    1ffc:	ef 80       	ldd	r14, Y+7	; 0x07
    1ffe:	f8 84       	ldd	r15, Y+8	; 0x08
    2000:	09 85       	ldd	r16, Y+9	; 0x09
    2002:	1a 85       	ldd	r17, Y+10	; 0x0a
    2004:	2b 85       	ldd	r18, Y+11	; 0x0b
    2006:	3c 85       	ldd	r19, Y+12	; 0x0c
    2008:	4d 85       	ldd	r20, Y+13	; 0x0d
    200a:	5e 85       	ldd	r21, Y+14	; 0x0e
    200c:	6f 85       	ldd	r22, Y+15	; 0x0f
    200e:	78 89       	ldd	r23, Y+16	; 0x10
    2010:	89 89       	ldd	r24, Y+17	; 0x11
    2012:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:762

  if (! fall_back_to_decimal_only_mode) {
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	51 10       	cpse	r5, r1
    2022:	67 c0       	rjmp	.+206    	; 0x20f2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x906>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:763
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2024:	2c 01       	movw	r4, r24
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	43 1a       	sub	r4, r19
    202a:	53 0a       	sbc	r5, r19
    202c:	48 a5       	ldd	r20, Y+40	; 0x28
    202e:	e5 e4       	ldi	r30, 0x45	; 69
    2030:	45 ff       	sbrs	r20, 5
    2032:	e5 e6       	ldi	r30, 0x65	; 101
    2034:	2f ef       	ldi	r18, 0xFF	; 255
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	ac 01       	movw	r20, r24
    203a:	6d a5       	ldd	r22, Y+45	; 0x2d
    203c:	7e a5       	ldd	r23, Y+46	; 0x2e
    203e:	8e 2f       	mov	r24, r30
    2040:	eb a5       	ldd	r30, Y+43	; 0x2b
    2042:	fc a5       	ldd	r31, Y+44	; 0x2c
    2044:	19 95       	eicall
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:764
    idx = print_integer(out, buffer, idx, maxlen,
    2046:	a3 2c       	mov	r10, r3
    2048:	aa 1c       	adc	r10, r10
    204a:	aa 24       	eor	r10, r10
    204c:	aa 1c       	adc	r10, r10
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:765
                ABS_FOR_PRINTING(exp10),
    204e:	61 01       	movw	r12, r2
    2050:	e3 2c       	mov	r14, r3
    2052:	ee 0c       	add	r14, r14
    2054:	ee 08       	sbc	r14, r14
    2056:	fe 2c       	mov	r15, r14
    2058:	0e 2d       	mov	r16, r14
    205a:	1e 2d       	mov	r17, r14
    205c:	fe 2d       	mov	r31, r14
    205e:	ee 2d       	mov	r30, r14
    2060:	91 01       	movw	r18, r2
    2062:	4e 2d       	mov	r20, r14
    2064:	5e 2d       	mov	r21, r14
    2066:	6e 2d       	mov	r22, r14
    2068:	7e 2d       	mov	r23, r14
    206a:	8e 2d       	mov	r24, r14
    206c:	9e 2d       	mov	r25, r14
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    2074:	3c f4       	brge	.+14     	; 0x2084 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x898>
    2076:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
    207a:	69 01       	movw	r12, r18
    207c:	7a 01       	movw	r14, r20
    207e:	8b 01       	movw	r16, r22
    2080:	f8 2f       	mov	r31, r24
    2082:	e9 2f       	mov	r30, r25
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:764
  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);

  if (! fall_back_to_decimal_only_mode) {
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    idx = print_integer(out, buffer, idx, maxlen,
    2084:	1f 92       	push	r1
    2086:	85 e0       	ldi	r24, 0x05	; 5
    2088:	8f 93       	push	r24
    208a:	21 e0       	ldi	r18, 0x01	; 1
    208c:	62 1a       	sub	r6, r18
    208e:	71 08       	sbc	r7, r1
    2090:	7f 92       	push	r7
    2092:	6f 92       	push	r6
    2094:	1f 92       	push	r1
    2096:	1f 92       	push	r1
    2098:	9a e0       	ldi	r25, 0x0A	; 10
    209a:	89 2e       	mov	r8, r25
    209c:	2f 2f       	mov	r18, r31
    209e:	3e 2f       	mov	r19, r30
    20a0:	a2 01       	movw	r20, r4
    20a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	0e 94 45 02 	call	0x48a	; 0x48a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:768
                ABS_FOR_PRINTING(exp10),
                exp10 < 0, 10, 0, exp10_part_width - 1,
                FLAGS_ZEROPAD | FLAGS_PLUS);
    if (flags & FLAGS_LEFT) {
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	4a 89       	ldd	r20, Y+18	; 0x12
    20bc:	5b 89       	ldd	r21, Y+19	; 0x13
    20be:	45 2b       	or	r20, r21
    20c0:	c1 f0       	breq	.+48     	; 0x20f2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x906>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:770
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    20c2:	9c 01       	movw	r18, r24
    20c4:	af a5       	ldd	r26, Y+47	; 0x2f
    20c6:	b8 a9       	ldd	r27, Y+48	; 0x30
    20c8:	2a 1b       	sub	r18, r26
    20ca:	3b 0b       	sbc	r19, r27
    20cc:	e9 a9       	ldd	r30, Y+49	; 0x31
    20ce:	fa a9       	ldd	r31, Y+50	; 0x32
    20d0:	2e 17       	cp	r18, r30
    20d2:	3f 07       	cpc	r19, r31
    20d4:	70 f4       	brcc	.+28     	; 0x20f2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x906>
    20d6:	8c 01       	movw	r16, r24
    20d8:	0f 5f       	subi	r16, 0xFF	; 255
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	2f ef       	ldi	r18, 0xFF	; 255
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	ac 01       	movw	r20, r24
    20e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20e6:	80 e2       	ldi	r24, 0x20	; 32
    20e8:	eb a5       	ldd	r30, Y+43	; 0x2b
    20ea:	fc a5       	ldd	r31, Y+44	; 0x2c
    20ec:	19 95       	eicall
    20ee:	c8 01       	movw	r24, r16
    20f0:	e8 cf       	rjmp	.-48     	; 0x20c2 <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]+0x8d6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:774
    }
  }
  return idx;
}
    20f2:	e6 96       	adiw	r28, 0x36	; 54
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	bf 90       	pop	r11
    2110:	af 90       	pop	r10
    2112:	9f 90       	pop	r9
    2114:	8f 90       	pop	r8
    2116:	7f 90       	pop	r7
    2118:	6f 90       	pop	r6
    211a:	5f 90       	pop	r5
    211c:	4f 90       	pop	r4
    211e:	3f 90       	pop	r3
    2120:	2f 90       	pop	r2
    2122:	08 95       	ret

00002124 <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]>:
_ZL20print_floating_pointPFvcPvjjEPcjjdjjjb.constprop.40():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:778
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
    2124:	2f 92       	push	r2
    2126:	3f 92       	push	r3
    2128:	4f 92       	push	r4
    212a:	5f 92       	push	r5
    212c:	6f 92       	push	r6
    212e:	7f 92       	push	r7
    2130:	8f 92       	push	r8
    2132:	9f 92       	push	r9
    2134:	af 92       	push	r10
    2136:	bf 92       	push	r11
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	e7 97       	sbiw	r28, 0x37	; 55
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	1c 01       	movw	r2, r24
    215a:	6a ab       	std	Y+50, r22	; 0x32
    215c:	7b ab       	std	Y+51, r23	; 0x33
    215e:	4c ab       	std	Y+52, r20	; 0x34
    2160:	5d ab       	std	Y+53, r21	; 0x35
    2162:	28 01       	movw	r4, r16
    2164:	39 01       	movw	r6, r18
    2166:	ce aa       	std	Y+54, r12	; 0x36
    2168:	df aa       	std	Y+55, r13	; 0x37
    216a:	65 01       	movw	r12, r10
    216c:	b8 2c       	mov	r11, r8
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:784
{
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
    216e:	a9 01       	movw	r20, r18
    2170:	98 01       	movw	r18, r16
    2172:	c3 01       	movw	r24, r6
    2174:	b8 01       	movw	r22, r16
    2176:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    217a:	88 23       	and	r24, r24
    217c:	31 f1       	breq	.+76     	; 0x21ca <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0xa6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:785
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
    217e:	ee a8       	ldd	r14, Y+54	; 0x36
    2180:	ff a8       	ldd	r15, Y+55	; 0x37
    2182:	03 e0       	ldi	r16, 0x03	; 3
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	29 e6       	ldi	r18, 0x69	; 105
    2188:	32 e0       	ldi	r19, 0x02	; 2
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:787
  if (value < -DBL_MAX)
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    218a:	4c a9       	ldd	r20, Y+52	; 0x34
    218c:	5d a9       	ldd	r21, Y+53	; 0x35
    218e:	6a a9       	ldd	r22, Y+50	; 0x32
    2190:	7b a9       	ldd	r23, Y+51	; 0x33
    2192:	c1 01       	movw	r24, r2
    2194:	0e 94 bb 01 	call	0x376	; 0x376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:819
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
    2198:	e7 96       	adiw	r28, 0x37	; 55
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	08 95       	ret
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:786
  size_t len  = 0U;

  // test for special values
  if (value != value)
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
    21ca:	2f ef       	ldi	r18, 0xFF	; 255
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	5f ef       	ldi	r21, 0xFF	; 255
    21d2:	c3 01       	movw	r24, r6
    21d4:	b8 01       	movw	r22, r16
    21d6:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    21da:	87 ff       	sbrs	r24, 7
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0xc8>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:787
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    21de:	ee a8       	ldd	r14, Y+54	; 0x36
    21e0:	ff a8       	ldd	r15, Y+55	; 0x37
    21e2:	04 e0       	ldi	r16, 0x04	; 4
    21e4:	10 e0       	ldi	r17, 0x00	; 0
    21e6:	2d e6       	ldi	r18, 0x6D	; 109
    21e8:	32 e0       	ldi	r19, 0x02	; 2
    21ea:	cf cf       	rjmp	.-98     	; 0x218a <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0x66>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:788
  if (value > DBL_MAX)
    21ec:	2f ef       	ldi	r18, 0xFF	; 255
    21ee:	3f ef       	ldi	r19, 0xFF	; 255
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	5f e7       	ldi	r21, 0x7F	; 127
    21f4:	c3 01       	movw	r24, r6
    21f6:	b8 01       	movw	r22, r16
    21f8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	6c f4       	brge	.+26     	; 0x221a <__stack+0x1b>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:789
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    2200:	04 e0       	ldi	r16, 0x04	; 4
    2202:	10 e0       	ldi	r17, 0x00	; 0
    2204:	20 e6       	ldi	r18, 0x60	; 96
    2206:	32 e0       	ldi	r19, 0x02	; 2
    2208:	c2 fc       	sbrc	r12, 2
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <__stack+0x15>
    220c:	03 e0       	ldi	r16, 0x03	; 3
    220e:	10 e0       	ldi	r17, 0x00	; 0
    2210:	25 e6       	ldi	r18, 0x65	; 101
    2212:	32 e0       	ldi	r19, 0x02	; 2
    2214:	ee a8       	ldd	r14, Y+54	; 0x36
    2216:	ff a8       	ldd	r15, Y+55	; 0x37
    2218:	b8 cf       	rjmp	.-144    	; 0x218a <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0x66>
    221a:	9e 01       	movw	r18, r28
    221c:	2f 5f       	subi	r18, 0xFF	; 255
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	49 01       	movw	r8, r18
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:791

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
    2222:	b1 10       	cpse	r11, r1
    2224:	25 c0       	rjmp	.+74     	; 0x2270 <__stack+0x71>
    2226:	28 e2       	ldi	r18, 0x28	; 40
    2228:	3b e6       	ldi	r19, 0x6B	; 107
    222a:	4e e6       	ldi	r20, 0x6E	; 110
    222c:	5e e4       	ldi	r21, 0x4E	; 78
    222e:	c3 01       	movw	r24, r6
    2230:	b8 01       	movw	r22, r16
    2232:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    2236:	18 16       	cp	r1, r24
    2238:	54 f0       	brlt	.+20     	; 0x224e <__stack+0x4f>
    223a:	28 e2       	ldi	r18, 0x28	; 40
    223c:	3b e6       	ldi	r19, 0x6B	; 107
    223e:	4e e6       	ldi	r20, 0x6E	; 110
    2240:	5e ec       	ldi	r21, 0xCE	; 206
    2242:	c3 01       	movw	r24, r6
    2244:	b8 01       	movw	r22, r16
    2246:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    224a:	87 ff       	sbrs	r24, 7
    224c:	11 c0       	rjmp	.+34     	; 0x2270 <__stack+0x71>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:796
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
    224e:	1f 92       	push	r1
    2250:	1f 92       	push	r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:815
    precision--;
  }

  return
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
    2252:	56 01       	movw	r10, r12
    2254:	ce a8       	ldd	r12, Y+54	; 0x36
    2256:	df a8       	ldd	r13, Y+55	; 0x37
    2258:	93 01       	movw	r18, r6
    225a:	82 01       	movw	r16, r4
    225c:	4c a9       	ldd	r20, Y+52	; 0x34
    225e:	5d a9       	ldd	r21, Y+53	; 0x35
    2260:	6a a9       	ldd	r22, Y+50	; 0x32
    2262:	7b a9       	ldd	r23, Y+51	; 0x33
    2264:	c1 01       	movw	r24, r2
    2266:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <print_exponential_number(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.43]>
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	94 cf       	rjmp	.-216    	; 0x2198 <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0x74>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:803
    return 0U;
#endif
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    2270:	d2 fc       	sbrc	r13, 2
    2272:	03 c0       	rjmp	.+6      	; 0x227a <__stack+0x7b>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:804
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
    2274:	86 e0       	ldi	r24, 0x06	; 6
    2276:	e8 2e       	mov	r14, r24
    2278:	f1 2c       	mov	r15, r1
    227a:	f4 01       	movw	r30, r8
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	00 e0       	ldi	r16, 0x00	; 0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:809
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
    buf[len++] = '0'; // This respects the precision in terms of result length only
    2280:	80 e3       	ldi	r24, 0x30	; 48
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:808
  if (!(flags & FLAGS_PRECISION)) {
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
    2282:	32 e1       	ldi	r19, 0x12	; 18
    2284:	e3 16       	cp	r14, r19
    2286:	f1 04       	cpc	r15, r1
    2288:	48 f0       	brcs	.+18     	; 0x229c <__stack+0x9d>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:809
    buf[len++] = '0'; // This respects the precision in terms of result length only
    228a:	0f 5f       	subi	r16, 0xFF	; 255
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	81 93       	st	Z+, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:810
    precision--;
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	e9 1a       	sub	r14, r25
    2294:	f1 08       	sbc	r15, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:808
  if (!(flags & FLAGS_PRECISION)) {
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
    2296:	00 32       	cpi	r16, 0x20	; 32
    2298:	11 05       	cpc	r17, r1
    229a:	99 f7       	brne	.-26     	; 0x2282 <__stack+0x83>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:815
    precision--;
  }

  return
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
    229c:	bb 20       	and	r11, r11
    229e:	19 f0       	breq	.+6      	; 0x22a6 <__stack+0xa7>
    22a0:	1f 93       	push	r17
    22a2:	0f 93       	push	r16
    22a4:	d6 cf       	rjmp	.-84     	; 0x2252 <__stack+0x53>
print_decimal_number():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:645
}

      // internal ftoa for fixed decimal floating point
static size_t print_decimal_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
  struct double_components value_ = get_components(number, precision);
    22a6:	97 01       	movw	r18, r14
    22a8:	b3 01       	movw	r22, r6
    22aa:	a2 01       	movw	r20, r4
    22ac:	ce 01       	movw	r24, r28
    22ae:	81 96       	adiw	r24, 0x21	; 33
    22b0:	0e 94 35 0a 	call	0x146a	; 0x146a <get_components(double, unsigned int)>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:646
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
    22b4:	1f 93       	push	r17
    22b6:	0f 93       	push	r16
    22b8:	9f 92       	push	r9
    22ba:	8f 92       	push	r8
    22bc:	df 92       	push	r13
    22be:	cf 92       	push	r12
    22c0:	2f a9       	ldd	r18, Y+55	; 0x37
    22c2:	2f 93       	push	r18
    22c4:	3e a9       	ldd	r19, Y+54	; 0x36
    22c6:	3f 93       	push	r19
    22c8:	ff 92       	push	r15
    22ca:	ef 92       	push	r14
    22cc:	8d a9       	ldd	r24, Y+53	; 0x35
    22ce:	8f 93       	push	r24
    22d0:	9c a9       	ldd	r25, Y+52	; 0x34
    22d2:	9f 93       	push	r25
    22d4:	2b a9       	ldd	r18, Y+51	; 0x33
    22d6:	2f 93       	push	r18
    22d8:	3a a9       	ldd	r19, Y+50	; 0x32
    22da:	3f 93       	push	r19
    22dc:	3f 92       	push	r3
    22de:	2f 92       	push	r2
    22e0:	89 a0       	ldd	r8, Y+33	; 0x21
    22e2:	9a a0       	ldd	r9, Y+34	; 0x22
    22e4:	ab a0       	ldd	r10, Y+35	; 0x23
    22e6:	bc a0       	ldd	r11, Y+36	; 0x24
    22e8:	cd a0       	ldd	r12, Y+37	; 0x25
    22ea:	de a0       	ldd	r13, Y+38	; 0x26
    22ec:	ef a0       	ldd	r14, Y+39	; 0x27
    22ee:	f8 a4       	ldd	r15, Y+40	; 0x28
    22f0:	09 a5       	ldd	r16, Y+41	; 0x29
    22f2:	1a a5       	ldd	r17, Y+42	; 0x2a
    22f4:	2b a5       	ldd	r18, Y+43	; 0x2b
    22f6:	3c a5       	ldd	r19, Y+44	; 0x2c
    22f8:	4d a5       	ldd	r20, Y+45	; 0x2d
    22fa:	5e a5       	ldd	r21, Y+46	; 0x2e
    22fc:	6f a5       	ldd	r22, Y+47	; 0x2f
    22fe:	78 a9       	ldd	r23, Y+48	; 0x30
    2300:	89 a9       	ldd	r24, Y+49	; 0x31
    2302:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <print_broken_up_decimal(double_components, void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char*, unsigned int) [clone .constprop.44]>
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	43 cf       	rjmp	.-378    	; 0x2198 <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]+0x74>

00002312 <Ticker::update()>:
_ZN6Ticker6updateEv():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:71
	else diffTime = micros() - lastTime;
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
    2312:	cf 92       	push	r12
    2314:	df 92       	push	r13
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
tick():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:76
	if (tick()) callback();
	}

bool Ticker::tick() {
	if (!enabled)	return false;	
    2322:	fc 01       	movw	r30, r24
    2324:	20 81       	ld	r18, Z
    2326:	22 23       	and	r18, r18
    2328:	09 f4       	brne	.+2      	; 0x232c <Ticker::update()+0x1a>
    232a:	4e c0       	rjmp	.+156    	; 0x23c8 <Ticker::update()+0xb6>
    232c:	ec 01       	movw	r28, r24
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:77
	uint32_t currentTime = (resolution == MILLIS) ? millis() : micros();
    232e:	81 85       	ldd	r24, Z+9	; 0x09
    2330:	92 85       	ldd	r25, Z+10	; 0x0a
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	09 f0       	breq	.+2      	; 0x2338 <Ticker::update()+0x26>
    2336:	45 c0       	rjmp	.+138    	; 0x23c2 <Ticker::update()+0xb0>
    2338:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:78
 	if ((currentTime - lastTime) >= timer) {
    233c:	0b 89       	ldd	r16, Y+19	; 0x13
    233e:	1c 89       	ldd	r17, Y+20	; 0x14
    2340:	2d 89       	ldd	r18, Y+21	; 0x15
    2342:	3e 89       	ldd	r19, Y+22	; 0x16
    2344:	6b 01       	movw	r12, r22
    2346:	7c 01       	movw	r14, r24
    2348:	c0 1a       	sub	r12, r16
    234a:	d1 0a       	sbc	r13, r17
    234c:	e2 0a       	sbc	r14, r18
    234e:	f3 0a       	sbc	r15, r19
    2350:	09 81       	ldd	r16, Y+1	; 0x01
    2352:	1a 81       	ldd	r17, Y+2	; 0x02
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	c0 16       	cp	r12, r16
    235a:	d1 06       	cpc	r13, r17
    235c:	e2 06       	cpc	r14, r18
    235e:	f3 06       	cpc	r15, r19
    2360:	98 f1       	brcs	.+102    	; 0x23c8 <Ticker::update()+0xb6>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:79
 		lastTime = currentTime;
    2362:	6b 8b       	std	Y+19, r22	; 0x13
    2364:	7c 8b       	std	Y+20, r23	; 0x14
    2366:	8d 8b       	std	Y+21, r24	; 0x15
    2368:	9e 8b       	std	Y+22, r25	; 0x16
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:80
 		if (repeat - counts == 1 && counts != 0xFFFFFFFF) {
    236a:	8b 85       	ldd	r24, Y+11	; 0x0b
    236c:	9c 85       	ldd	r25, Y+12	; 0x0c
    236e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2370:	be 85       	ldd	r27, Y+14	; 0x0e
    2372:	4d 81       	ldd	r20, Y+5	; 0x05
    2374:	5e 81       	ldd	r21, Y+6	; 0x06
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	48 1b       	sub	r20, r24
    237c:	59 0b       	sbc	r21, r25
    237e:	6a 0b       	sbc	r22, r26
    2380:	7b 0b       	sbc	r23, r27
    2382:	41 30       	cpi	r20, 0x01	; 1
    2384:	51 05       	cpc	r21, r1
    2386:	61 05       	cpc	r22, r1
    2388:	71 05       	cpc	r23, r1
    238a:	49 f4       	brne	.+18     	; 0x239e <Ticker::update()+0x8c>
    238c:	8f 3f       	cpi	r24, 0xFF	; 255
    238e:	ff ef       	ldi	r31, 0xFF	; 255
    2390:	9f 07       	cpc	r25, r31
    2392:	af 07       	cpc	r26, r31
    2394:	bf 07       	cpc	r27, r31
    2396:	19 f0       	breq	.+6      	; 0x239e <Ticker::update()+0x8c>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:81
			enabled = false;
    2398:	18 82       	st	Y, r1
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:82
			status = STOPPED;
    239a:	18 8a       	std	Y+16, r1	; 0x10
    239c:	1f 86       	std	Y+15, r1	; 0x0f
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:84
			}
		counts++;
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	a1 1d       	adc	r26, r1
    23a2:	b1 1d       	adc	r27, r1
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
    23a8:	ad 87       	std	Y+13, r26	; 0x0d
    23aa:	be 87       	std	Y+14, r27	; 0x0e
_ZN6Ticker6updateEv():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    23ac:	e9 89       	ldd	r30, Y+17	; 0x11
    23ae:	fa 89       	ldd	r31, Y+18	; 0x12
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:73
	}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    23c0:	19 94       	eijmp
tick():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:77
	}

bool Ticker::tick() {
	if (!enabled)	return false;	
	uint32_t currentTime = (resolution == MILLIS) ? millis() : micros();
    23c2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <micros>
    23c6:	ba cf       	rjmp	.-140    	; 0x233c <Ticker::update()+0x2a>
_ZN6Ticker6updateEv():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:73
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
	}
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	08 95       	ret

000023da <MovingAverage<float>::Insert(float)>:
_ZN13MovingAverageIfE6InsertEf():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:87
    return Average;
}


template<class T>
void MovingAverage<T>::Insert(T value){
    23da:	2f 92       	push	r2
    23dc:	3f 92       	push	r3
    23de:	4f 92       	push	r4
    23e0:	5f 92       	push	r5
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	ec 01       	movw	r28, r24
    2400:	6a 01       	movw	r12, r20
    2402:	7b 01       	movw	r14, r22
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:88
    Average = value/MaxLength + Average - Element[++NextElement]/MaxLength;
    2404:	68 85       	ldd	r22, Y+8	; 0x08
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__floatsisf>
    2410:	4b 01       	movw	r8, r22
    2412:	5c 01       	movw	r10, r24
    2414:	ac 01       	movw	r20, r24
    2416:	9b 01       	movw	r18, r22
    2418:	c7 01       	movw	r24, r14
    241a:	b6 01       	movw	r22, r12
    241c:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    2420:	2a 81       	ldd	r18, Y+2	; 0x02
    2422:	3b 81       	ldd	r19, Y+3	; 0x03
    2424:	4c 81       	ldd	r20, Y+4	; 0x04
    2426:	5d 81       	ldd	r21, Y+5	; 0x05
    2428:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    242c:	2b 01       	movw	r4, r22
    242e:	3c 01       	movw	r6, r24
    2430:	88 81       	ld	r24, Y
    2432:	99 81       	ldd	r25, Y+1	; 0x01
    2434:	0e 81       	ldd	r16, Y+6	; 0x06
    2436:	1f 81       	ldd	r17, Y+7	; 0x07
    2438:	0f 5f       	subi	r16, 0xFF	; 255
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	1f 83       	std	Y+7, r17	; 0x07
    243e:	0e 83       	std	Y+6, r16	; 0x06
    2440:	18 01       	movw	r2, r16
    2442:	22 0c       	add	r2, r2
    2444:	33 1c       	adc	r3, r3
    2446:	22 0c       	add	r2, r2
    2448:	33 1c       	adc	r3, r3
    244a:	28 0e       	add	r2, r24
    244c:	39 1e       	adc	r3, r25
    244e:	a5 01       	movw	r20, r10
    2450:	94 01       	movw	r18, r8
    2452:	f1 01       	movw	r30, r2
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    2460:	9b 01       	movw	r18, r22
    2462:	ac 01       	movw	r20, r24
    2464:	c3 01       	movw	r24, r6
    2466:	b2 01       	movw	r22, r4
    2468:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    246c:	6a 83       	std	Y+2, r22	; 0x02
    246e:	7b 83       	std	Y+3, r23	; 0x03
    2470:	8c 83       	std	Y+4, r24	; 0x04
    2472:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:89
    Element[NextElement] = value;
    2474:	f1 01       	movw	r30, r2
    2476:	c0 82       	st	Z, r12
    2478:	d1 82       	std	Z+1, r13	; 0x01
    247a:	e2 82       	std	Z+2, r14	; 0x02
    247c:	f3 82       	std	Z+3, r15	; 0x03
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:90
    if(NextElement>=(MaxLength-1))   
    247e:	88 85       	ldd	r24, Y+8	; 0x08
    2480:	81 50       	subi	r24, 0x01	; 1
    2482:	99 0b       	sbc	r25, r25
    2484:	08 17       	cp	r16, r24
    2486:	19 07       	cpc	r17, r25
    2488:	10 f0       	brcs	.+4      	; 0x248e <MovingAverage<float>::Insert(float)+0xb4>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:91
        NextElement=0;
    248a:	1f 82       	std	Y+7, r1	; 0x07
    248c:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MovingAverage.h:93
    
}
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	9f 90       	pop	r9
    24a4:	8f 90       	pop	r8
    24a6:	7f 90       	pop	r7
    24a8:	6f 90       	pop	r6
    24aa:	5f 90       	pop	r5
    24ac:	4f 90       	pop	r4
    24ae:	3f 90       	pop	r3
    24b0:	2f 90       	pop	r2
    24b2:	08 95       	ret

000024b4 <tick1Sec()>:
_Z8tick1Secv():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:357
    heater_counter = 0;
  }
}

void tick1Sec(void) {
  digitalWrite(LED7, !digitalRead(LED7));
    24b4:	8a e2       	ldi	r24, 0x2A	; 42
    24b6:	0e 94 04 06 	call	0xc08	; 0xc08 <digitalRead>
    24ba:	61 e0       	ldi	r22, 0x01	; 1
    24bc:	89 2b       	or	r24, r25
    24be:	09 f0       	breq	.+2      	; 0x24c2 <tick1Sec()+0xe>
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	8a e2       	ldi	r24, 0x2A	; 42
    24c4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:359

  if (state == heating || state == sterilizing || state == cooling) {
    24c8:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    24cc:	81 50       	subi	r24, 0x01	; 1
    24ce:	83 30       	cpi	r24, 0x03	; 3
    24d0:	48 f4       	brcc	.+18     	; 0x24e4 <tick1Sec()+0x30>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:360
    Seconds++;
    24d2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Seconds>
    24d6:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <Seconds+0x1>
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <Seconds+0x1>
    24e0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <Seconds>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:364
  } else {
    // Seconds = 0;
  }
}
    24e4:	08 95       	ret

000024e6 <tickHeater()>:
_Z10tickHeaterv():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:313
  if (Temperature < 102.0) {
    digitalWrite(VENT_SOLENOID, VALVE_OPEN);
  } 
}

void tickHeater(void) {
    24e6:	4f 92       	push	r4
    24e8:	5f 92       	push	r5
    24ea:	6f 92       	push	r6
    24ec:	7f 92       	push	r7
    24ee:	8f 92       	push	r8
    24f0:	9f 92       	push	r9
    24f2:	af 92       	push	r10
    24f4:	bf 92       	push	r11
    24f6:	cf 92       	push	r12
    24f8:	df 92       	push	r13
    24fa:	ef 92       	push	r14
    24fc:	ff 92       	push	r15
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	00 d0       	rcall	.+0      	; 0x2504 <tickHeater()+0x1e>
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:317
  static uint8_t heater_counter = 0;
  int heater;

  digitalWrite(LED6, !digitalRead(LED6));
    250a:	8b e2       	ldi	r24, 0x2B	; 43
    250c:	0e 94 04 06 	call	0xc08	; 0xc08 <digitalRead>
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	89 2b       	or	r24, r25
    2514:	09 f0       	breq	.+2      	; 0x2518 <tickHeater()+0x32>
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	8b e2       	ldi	r24, 0x2B	; 43
    251a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
    251e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:319

  if (InCycle && (state == heating) || (state == sterilizing)) {
    2522:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <InCycle>
    2526:	99 23       	and	r25, r25
    2528:	11 f0       	breq	.+4      	; 0x252e <tickHeater()+0x48>
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	19 f0       	breq	.+6      	; 0x2534 <tickHeater()+0x4e>
    252e:	82 30       	cpi	r24, 0x02	; 2
    2530:	09 f0       	breq	.+2      	; 0x2534 <tickHeater()+0x4e>
    2532:	d8 c1       	rjmp	.+944    	; 0x28e4 <tickHeater()+0x3fe>
run():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:44
bool AutoPID::atSetPoint(double threshold) {
  return abs(*_setpoint - *_input) <= threshold;
}//bool AutoPID::atSetPoint

void AutoPID::run() {
  if (_stopped) {
    2534:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <pid+0x32>
    2538:	88 23       	and	r24, r24
    253a:	e1 f0       	breq	.+56     	; 0x2574 <tickHeater()+0x8e>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:45
    _stopped = false;
    253c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <pid+0x32>
reset():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:76
void AutoPID::stop() {
  _stopped = true;
  reset();
}
void AutoPID::reset() {
  _lastStep = millis();
    2540:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    2544:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <pid+0x2e>
    2548:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <pid+0x2f>
    254c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <pid+0x30>
    2550:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <pid+0x31>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:77
  _integral = 0;
    2554:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <pid+0xc>
    2558:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <pid+0xd>
    255c:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <pid+0xe>
    2560:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <pid+0xf>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:78
  _previousError = 0;
    2564:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <pid+0x10>
    2568:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <pid+0x11>
    256c:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <pid+0x12>
    2570:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <pid+0x13>
run():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:49
  if (_stopped) {
    _stopped = false;
    reset();
  }
  //if bang thresholds are defined and we're outside of them, use bang-bang control
  if (_bangOn && ((*_setpoint - *_input) > _bangOn)) {
    2574:	c0 90 37 05 	lds	r12, 0x0537	; 0x800537 <pid+0x14>
    2578:	d0 90 38 05 	lds	r13, 0x0538	; 0x800538 <pid+0x15>
    257c:	e0 90 39 05 	lds	r14, 0x0539	; 0x800539 <pid+0x16>
    2580:	f0 90 3a 05 	lds	r15, 0x053A	; 0x80053a <pid+0x17>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	a9 01       	movw	r20, r18
    258a:	c7 01       	movw	r24, r14
    258c:	b6 01       	movw	r22, r12
    258e:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    2592:	88 23       	and	r24, r24
    2594:	09 f4       	brne	.+2      	; 0x2598 <tickHeater()+0xb2>
    2596:	6d c0       	rjmp	.+218    	; 0x2672 <tickHeater()+0x18c>
    2598:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pid+0x1e>
    259c:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pid+0x1f>
    25a0:	a0 91 3f 05 	lds	r26, 0x053F	; 0x80053f <pid+0x1c>
    25a4:	b0 91 40 05 	lds	r27, 0x0540	; 0x800540 <pid+0x1d>
    25a8:	2d 91       	ld	r18, X+
    25aa:	3d 91       	ld	r19, X+
    25ac:	4d 91       	ld	r20, X+
    25ae:	5c 91       	ld	r21, X
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    25bc:	9b 01       	movw	r18, r22
    25be:	ac 01       	movw	r20, r24
    25c0:	c7 01       	movw	r24, r14
    25c2:	b6 01       	movw	r22, r12
    25c4:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    25c8:	87 ff       	sbrs	r24, 7
    25ca:	53 c0       	rjmp	.+166    	; 0x2672 <tickHeater()+0x18c>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:50
    *_output = _outputMax;
    25cc:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pid+0x26>
    25d0:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pid+0x27>
    25d4:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <pid+0x28>
    25d8:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <pid+0x29>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:53
    _lastStep = millis();
  } else if (_bangOff && ((*_input - *_setpoint) > _bangOff)) {
    *_output = _outputMin;
    25dc:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <pid+0x20>
    25e0:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <pid+0x21>
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	a2 83       	std	Z+2, r26	; 0x02
    25ea:	b3 83       	std	Z+3, r27	; 0x03
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:54
    _lastStep = millis();
    25ec:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    25f0:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <pid+0x2e>
    25f4:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <pid+0x2f>
    25f8:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <pid+0x30>
    25fc:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <pid+0x31>
_Z10tickHeaterv():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:322
    pid.run();

    heater = pidOutput;  
    2600:	60 91 17 05 	lds	r22, 0x0517	; 0x800517 <pidOutput>
    2604:	70 91 18 05 	lds	r23, 0x0518	; 0x800518 <pidOutput+0x1>
    2608:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <pidOutput+0x2>
    260c:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <pidOutput+0x3>
    2610:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__fixsfsi>
    2614:	65 36       	cpi	r22, 0x65	; 101
    2616:	71 05       	cpc	r23, r1
    2618:	14 f0       	brlt	.+4      	; 0x261e <tickHeater()+0x138>
    261a:	64 e6       	ldi	r22, 0x64	; 100
    261c:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:332

    if (heater >= 100) {
      heater = 100;
    }

    if (heater > heater_counter) {
    261e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tickHeater()::heater_counter>
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	77 ff       	sbrs	r23, 7
    2626:	02 c0       	rjmp	.+4      	; 0x262c <tickHeater()+0x146>
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	86 17       	cp	r24, r22
    262e:	97 07       	cpc	r25, r23
    2630:	0c f0       	brlt	.+2      	; 0x2634 <tickHeater()+0x14e>
    2632:	58 c1       	rjmp	.+688    	; 0x28e4 <tickHeater()+0x3fe>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:333
      digitalWrite(HEATER1, HEATER_ON);
    2634:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:337
      // digitalWrite(HEATER2, HEATER_ON);
      // digitalWrite(HEATER3, HEATER_ON);
    } else {
      digitalWrite(HEATER1, HEATER_OFF);
    2636:	8a e1       	ldi	r24, 0x1A	; 26
    2638:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:349
    digitalWrite(HEATER1, HEATER_OFF);
    // digitalWrite(HEATER2, HEATER_OFF);
    // digitalWrite(HEATER3, HEATER_OFF);
  }

  heater_counter++;
    263c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tickHeater()::heater_counter>
    2640:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:351

  if (heater_counter > 100) {
    2642:	85 36       	cpi	r24, 0x65	; 101
    2644:	08 f0       	brcs	.+2      	; 0x2648 <tickHeater()+0x162>
    2646:	50 c1       	rjmp	.+672    	; 0x28e8 <tickHeater()+0x402>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:349
    digitalWrite(HEATER1, HEATER_OFF);
    // digitalWrite(HEATER2, HEATER_OFF);
    // digitalWrite(HEATER3, HEATER_OFF);
  }

  heater_counter++;
    2648:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <tickHeater()::heater_counter>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:354

  if (heater_counter > 100) {
    heater_counter = 0;
  }
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	cf 90       	pop	r12
    2660:	bf 90       	pop	r11
    2662:	af 90       	pop	r10
    2664:	9f 90       	pop	r9
    2666:	8f 90       	pop	r8
    2668:	7f 90       	pop	r7
    266a:	6f 90       	pop	r6
    266c:	5f 90       	pop	r5
    266e:	4f 90       	pop	r4
    2670:	08 95       	ret
run():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:52
  }
  //if bang thresholds are defined and we're outside of them, use bang-bang control
  if (_bangOn && ((*_setpoint - *_input) > _bangOn)) {
    *_output = _outputMax;
    _lastStep = millis();
  } else if (_bangOff && ((*_input - *_setpoint) > _bangOff)) {
    2672:	c0 90 3b 05 	lds	r12, 0x053B	; 0x80053b <pid+0x18>
    2676:	d0 90 3c 05 	lds	r13, 0x053C	; 0x80053c <pid+0x19>
    267a:	e0 90 3d 05 	lds	r14, 0x053D	; 0x80053d <pid+0x1a>
    267e:	f0 90 3e 05 	lds	r15, 0x053E	; 0x80053e <pid+0x1b>
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	a9 01       	movw	r20, r18
    2688:	c7 01       	movw	r24, r14
    268a:	b6 01       	movw	r22, r12
    268c:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    2690:	88 23       	and	r24, r24
    2692:	19 f1       	breq	.+70     	; 0x26da <tickHeater()+0x1f4>
    2694:	e0 91 3f 05 	lds	r30, 0x053F	; 0x80053f <pid+0x1c>
    2698:	f0 91 40 05 	lds	r31, 0x0540	; 0x800540 <pid+0x1d>
    269c:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pid+0x1e>
    26a0:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pid+0x1f>
    26a4:	2d 91       	ld	r18, X+
    26a6:	3d 91       	ld	r19, X+
    26a8:	4d 91       	ld	r20, X+
    26aa:	5c 91       	ld	r21, X
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	c7 01       	movw	r24, r14
    26be:	b6 01       	movw	r22, r12
    26c0:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    26c4:	87 ff       	sbrs	r24, 7
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <tickHeater()+0x1f4>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:53
    *_output = _outputMin;
    26c8:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <pid+0x22>
    26cc:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <pid+0x23>
    26d0:	a0 91 47 05 	lds	r26, 0x0547	; 0x800547 <pid+0x24>
    26d4:	b0 91 48 05 	lds	r27, 0x0548	; 0x800548 <pid+0x25>
    26d8:	81 cf       	rjmp	.-254    	; 0x25dc <tickHeater()+0xf6>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:56
    _lastStep = millis();
  } else {                                    //otherwise use PID control
    unsigned long _dT = millis() - _lastStep;   //calculate time since last update
    26da:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    26de:	c0 90 51 05 	lds	r12, 0x0551	; 0x800551 <pid+0x2e>
    26e2:	d0 90 52 05 	lds	r13, 0x0552	; 0x800552 <pid+0x2f>
    26e6:	e0 90 53 05 	lds	r14, 0x0553	; 0x800553 <pid+0x30>
    26ea:	f0 90 54 05 	lds	r15, 0x0554	; 0x800554 <pid+0x31>
    26ee:	4b 01       	movw	r8, r22
    26f0:	5c 01       	movw	r10, r24
    26f2:	8c 18       	sub	r8, r12
    26f4:	9d 08       	sbc	r9, r13
    26f6:	ae 08       	sbc	r10, r14
    26f8:	bf 08       	sbc	r11, r15
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:57
    if (_dT >= _timeStep) {                     //if long enough, do PID calculations
    26fa:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <pid+0x2a>
    26fe:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <pid+0x2b>
    2702:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <pid+0x2c>
    2706:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <pid+0x2d>
    270a:	88 16       	cp	r8, r24
    270c:	99 06       	cpc	r9, r25
    270e:	aa 06       	cpc	r10, r26
    2710:	bb 06       	cpc	r11, r27
    2712:	08 f4       	brcc	.+2      	; 0x2716 <tickHeater()+0x230>
    2714:	75 cf       	rjmp	.-278    	; 0x2600 <tickHeater()+0x11a>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:58
      _lastStep = millis();
    2716:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    271a:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <pid+0x2e>
    271e:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <pid+0x2f>
    2722:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <pid+0x30>
    2726:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <pid+0x31>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:59
      _error = *_setpoint - *_input;
    272a:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pid+0x1e>
    272e:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pid+0x1f>
    2732:	a0 91 3f 05 	lds	r26, 0x053F	; 0x80053f <pid+0x1c>
    2736:	b0 91 40 05 	lds	r27, 0x0540	; 0x800540 <pid+0x1d>
    273a:	2d 91       	ld	r18, X+
    273c:	3d 91       	ld	r19, X+
    273e:	4d 91       	ld	r20, X+
    2740:	5c 91       	ld	r21, X
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    274e:	6b 01       	movw	r12, r22
    2750:	7c 01       	movw	r14, r24
    2752:	c0 92 56 05 	sts	0x0556, r12	; 0x800556 <pid+0x33>
    2756:	d0 92 57 05 	sts	0x0557, r13	; 0x800557 <pid+0x34>
    275a:	e0 92 58 05 	sts	0x0558, r14	; 0x800558 <pid+0x35>
    275e:	f0 92 59 05 	sts	0x0559, r15	; 0x800559 <pid+0x36>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:60
      _integral += (_error + _previousError) / 2 * _dT / 1000.0;   //Riemann sum integral
    2762:	40 90 33 05 	lds	r4, 0x0533	; 0x800533 <pid+0x10>
    2766:	50 90 34 05 	lds	r5, 0x0534	; 0x800534 <pid+0x11>
    276a:	60 90 35 05 	lds	r6, 0x0535	; 0x800535 <pid+0x12>
    276e:	70 90 36 05 	lds	r7, 0x0536	; 0x800536 <pid+0x13>
    2772:	c5 01       	movw	r24, r10
    2774:	b4 01       	movw	r22, r8
    2776:	0e 94 7d 25 	call	0x4afa	; 0x4afa <__floatunsisf>
    277a:	69 83       	std	Y+1, r22	; 0x01
    277c:	7a 83       	std	Y+2, r23	; 0x02
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	a3 01       	movw	r20, r6
    2784:	92 01       	movw	r18, r4
    2786:	c7 01       	movw	r24, r14
    2788:	b6 01       	movw	r22, r12
    278a:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    279a:	29 81       	ldd	r18, Y+1	; 0x01
    279c:	3a 81       	ldd	r19, Y+2	; 0x02
    279e:	4b 81       	ldd	r20, Y+3	; 0x03
    27a0:	5c 81       	ldd	r21, Y+4	; 0x04
    27a2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a e7       	ldi	r20, 0x7A	; 122
    27ac:	54 e4       	ldi	r21, 0x44	; 68
    27ae:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    27b2:	20 91 2f 05 	lds	r18, 0x052F	; 0x80052f <pid+0xc>
    27b6:	30 91 30 05 	lds	r19, 0x0530	; 0x800530 <pid+0xd>
    27ba:	40 91 31 05 	lds	r20, 0x0531	; 0x800531 <pid+0xe>
    27be:	50 91 32 05 	lds	r21, 0x0532	; 0x800532 <pid+0xf>
    27c2:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    27c6:	4b 01       	movw	r8, r22
    27c8:	5c 01       	movw	r10, r24
    27ca:	80 92 2f 05 	sts	0x052F, r8	; 0x80052f <pid+0xc>
    27ce:	90 92 30 05 	sts	0x0530, r9	; 0x800530 <pid+0xd>
    27d2:	a0 92 31 05 	sts	0x0531, r10	; 0x800531 <pid+0xe>
    27d6:	b0 92 32 05 	sts	0x0532, r11	; 0x800532 <pid+0xf>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:62
      //_integral = constrain(_integral, _outputMin/_Ki, _outputMax/_Ki);
      _dError = (_error - _previousError) / _dT / 1000.0;   //derivative
    27da:	a3 01       	movw	r20, r6
    27dc:	92 01       	movw	r18, r4
    27de:	c7 01       	movw	r24, r14
    27e0:	b6 01       	movw	r22, r12
    27e2:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    27e6:	29 81       	ldd	r18, Y+1	; 0x01
    27e8:	3a 81       	ldd	r19, Y+2	; 0x02
    27ea:	4b 81       	ldd	r20, Y+3	; 0x03
    27ec:	5c 81       	ldd	r21, Y+4	; 0x04
    27ee:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a e7       	ldi	r20, 0x7A	; 122
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    27fe:	2b 01       	movw	r4, r22
    2800:	3c 01       	movw	r6, r24
    2802:	40 92 5a 05 	sts	0x055A, r4	; 0x80055a <pid+0x37>
    2806:	50 92 5b 05 	sts	0x055B, r5	; 0x80055b <pid+0x38>
    280a:	60 92 5c 05 	sts	0x055C, r6	; 0x80055c <pid+0x39>
    280e:	70 92 5d 05 	sts	0x055D, r7	; 0x80055d <pid+0x3a>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:63
      _previousError = _error;
    2812:	c0 92 33 05 	sts	0x0533, r12	; 0x800533 <pid+0x10>
    2816:	d0 92 34 05 	sts	0x0534, r13	; 0x800534 <pid+0x11>
    281a:	e0 92 35 05 	sts	0x0535, r14	; 0x800535 <pid+0x12>
    281e:	f0 92 36 05 	sts	0x0536, r15	; 0x800536 <pid+0x13>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:64
      double PID = (_Kp * _error) + (_Ki * _integral) + (_Kd * _dError);
    2822:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <pid>
    2826:	30 91 24 05 	lds	r19, 0x0524	; 0x800524 <pid+0x1>
    282a:	40 91 25 05 	lds	r20, 0x0525	; 0x800525 <pid+0x2>
    282e:	50 91 26 05 	lds	r21, 0x0526	; 0x800526 <pid+0x3>
    2832:	c7 01       	movw	r24, r14
    2834:	b6 01       	movw	r22, r12
    2836:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    283a:	6b 01       	movw	r12, r22
    283c:	7c 01       	movw	r14, r24
    283e:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <pid+0x4>
    2842:	30 91 28 05 	lds	r19, 0x0528	; 0x800528 <pid+0x5>
    2846:	40 91 29 05 	lds	r20, 0x0529	; 0x800529 <pid+0x6>
    284a:	50 91 2a 05 	lds	r21, 0x052A	; 0x80052a <pid+0x7>
    284e:	c5 01       	movw	r24, r10
    2850:	b4 01       	movw	r22, r8
    2852:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    2856:	9b 01       	movw	r18, r22
    2858:	ac 01       	movw	r20, r24
    285a:	c7 01       	movw	r24, r14
    285c:	b6 01       	movw	r22, r12
    285e:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    2862:	6b 01       	movw	r12, r22
    2864:	7c 01       	movw	r14, r24
    2866:	20 91 2b 05 	lds	r18, 0x052B	; 0x80052b <pid+0x8>
    286a:	30 91 2c 05 	lds	r19, 0x052C	; 0x80052c <pid+0x9>
    286e:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <pid+0xa>
    2872:	50 91 2e 05 	lds	r21, 0x052E	; 0x80052e <pid+0xb>
    2876:	c3 01       	movw	r24, r6
    2878:	b2 01       	movw	r22, r4
    287a:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	c7 01       	movw	r24, r14
    2884:	b6 01       	movw	r22, r12
    2886:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    288a:	4b 01       	movw	r8, r22
    288c:	5c 01       	movw	r10, r24
constrain():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Arduino.h:345
    return rad * RAD_TO_DEG;
  }

  template<class T, class L, class H>
	auto constrain(const T& x, const L& l, const H& h) -> decltype((x < l) ? l : (x > h) ? h : x) {
		return (x < l) ? l : (x > h) ? h : x;
    288e:	c0 90 45 05 	lds	r12, 0x0545	; 0x800545 <pid+0x22>
    2892:	d0 90 46 05 	lds	r13, 0x0546	; 0x800546 <pid+0x23>
    2896:	e0 90 47 05 	lds	r14, 0x0547	; 0x800547 <pid+0x24>
    289a:	f0 90 48 05 	lds	r15, 0x0548	; 0x800548 <pid+0x25>
    289e:	96 01       	movw	r18, r12
    28a0:	a7 01       	movw	r20, r14
    28a2:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    28a6:	87 fd       	sbrc	r24, 7
    28a8:	12 c0       	rjmp	.+36     	; 0x28ce <tickHeater()+0x3e8>
    28aa:	c0 90 49 05 	lds	r12, 0x0549	; 0x800549 <pid+0x26>
    28ae:	d0 90 4a 05 	lds	r13, 0x054A	; 0x80054a <pid+0x27>
    28b2:	e0 90 4b 05 	lds	r14, 0x054B	; 0x80054b <pid+0x28>
    28b6:	f0 90 4c 05 	lds	r15, 0x054C	; 0x80054c <pid+0x29>
    28ba:	96 01       	movw	r18, r12
    28bc:	a7 01       	movw	r20, r14
    28be:	b4 01       	movw	r22, r8
    28c0:	c5 01       	movw	r24, r10
    28c2:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	14 f0       	brlt	.+4      	; 0x28ce <tickHeater()+0x3e8>
_Z10tickHeaterv():
    28ca:	64 01       	movw	r12, r8
    28cc:	75 01       	movw	r14, r10
run():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:66
      //*_output = _outputMin + (constrain(PID, 0, 1) * (_outputMax - _outputMin));
      *_output = constrain(PID, _outputMin, _outputMax);
    28ce:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <pid+0x20>
    28d2:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <pid+0x21>
    28d6:	c6 01       	movw	r24, r12
    28d8:	d7 01       	movw	r26, r14
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
    28e2:	8e ce       	rjmp	.-740    	; 0x2600 <tickHeater()+0x11a>
_Z10tickHeaterv():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:337
    if (heater > heater_counter) {
      digitalWrite(HEATER1, HEATER_ON);
      // digitalWrite(HEATER2, HEATER_ON);
      // digitalWrite(HEATER3, HEATER_ON);
    } else {
      digitalWrite(HEATER1, HEATER_OFF);
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	a7 ce       	rjmp	.-690    	; 0x2636 <tickHeater()+0x150>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:352
  }

  heater_counter++;

  if (heater_counter > 100) {
    heater_counter = 0;
    28e8:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <tickHeater()::heater_counter>
    28ec:	af ce       	rjmp	.-674    	; 0x264c <tickHeater()+0x166>

000028ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>:
_ZN14VFD_NEC_FC20X25PrintEPch.constprop.51():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:43

        void ClearDisplay() {
            _serPort->write(CLEAR_DISPLAY);
        }

        int  Print(char *text, uint8_t pos) {
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	ec 01       	movw	r28, r24
    28f6:	16 2f       	mov	r17, r22
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:44
            _serPort->write(ESCAPE);
    28f8:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
    28fc:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
    2900:	dc 01       	movw	r26, r24
    2902:	ed 91       	ld	r30, X+
    2904:	fc 91       	ld	r31, X
    2906:	01 90       	ld	r0, Z+
    2908:	f0 81       	ld	r31, Z
    290a:	e0 2d       	mov	r30, r0
    290c:	6b e1       	ldi	r22, 0x1B	; 27
    290e:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:45
            _serPort->write(pos);
    2910:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
    2914:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
    2918:	dc 01       	movw	r26, r24
    291a:	ed 91       	ld	r30, X+
    291c:	fc 91       	ld	r31, X
    291e:	01 90       	ld	r0, Z+
    2920:	f0 81       	ld	r31, Z
    2922:	e0 2d       	mov	r30, r0
    2924:	61 2f       	mov	r22, r17
    2926:	19 95       	eicall
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:46
            _serPort->print((char *)text);
    2928:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <vfd>
    292c:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <vfd+0x1>
write():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    2930:	fe 01       	movw	r30, r28
    2932:	01 90       	ld	r0, Z+
    2934:	00 20       	and	r0, r0
    2936:	e9 f7       	brne	.-6      	; 0x2932 <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]+0x44>
    2938:	31 97       	sbiw	r30, 0x01	; 1
    293a:	af 01       	movw	r20, r30
    293c:	4c 1b       	sub	r20, r28
    293e:	5d 0b       	sbc	r21, r29
    2940:	dc 01       	movw	r26, r24
    2942:	ed 91       	ld	r30, X+
    2944:	fc 91       	ld	r31, X
    2946:	02 80       	ldd	r0, Z+2	; 0x02
    2948:	f3 81       	ldd	r31, Z+3	; 0x03
    294a:	e0 2d       	mov	r30, r0
    294c:	be 01       	movw	r22, r28
_ZN14VFD_NEC_FC20X25PrintEPch.constprop.51():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:47
        }
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
write():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/Print.h:54
    2954:	19 94       	eijmp

00002956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>:
_ZN11EEPROMClass3getIdEERT_iS2_.isra.2():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:130
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return E2END + 1; }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	eb 01       	movw	r28, r22
    2968:	7b 01       	movw	r14, r22
    296a:	24 e0       	ldi	r18, 0x04	; 4
    296c:	e2 0e       	add	r14, r18
    296e:	f1 1c       	adc	r15, r1
    2970:	8b 01       	movw	r16, r22
operator*():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2972:	6c 01       	movw	r12, r24
    2974:	c6 1a       	sub	r12, r22
    2976:	d7 0a       	sbc	r13, r23
    2978:	c6 01       	movw	r24, r12
    297a:	80 0f       	add	r24, r16
    297c:	91 1f       	adc	r25, r17
    297e:	0e 94 19 24 	call	0x4832	; 0x4832 <eeprom_read_byte>
_ZN11EEPROMClass3getIdEERT_iS2_.isra.2():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:133

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    2982:	f8 01       	movw	r30, r16
    2984:	81 93       	st	Z+, r24
    2986:	8f 01       	movw	r16, r30
    2988:	ee 15       	cp	r30, r14
    298a:	ff 05       	cpc	r31, r15
    298c:	a9 f7       	brne	.-22     	; 0x2978 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]+0x22>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:135
        return t;
    }
    298e:	ce 01       	movw	r24, r28
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	08 95       	ret

000029a2 <sprintf_>:
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1134
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
    29a2:	2f 92       	push	r2
    29a4:	3f 92       	push	r3
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	2c 97       	sbiw	r28, 0x0c	; 12
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1136
  va_list va;
  va_start(va, format);
    29d6:	8e 01       	movw	r16, r28
    29d8:	0a 5d       	subi	r16, 0xDA	; 218
    29da:	1f 4f       	sbci	r17, 0xFF	; 255
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1137
  const int ret = _vsnprintf(out_buffer, buffer, (size_t)-1, format, va);
    29dc:	31 2c       	mov	r3, r1
    29de:	21 2c       	mov	r2, r1
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:834
  if (!buffer) {
    // use null output function
    out = out_discard;
  }

  while (*format)
    29e0:	ac a1       	ldd	r26, Y+36	; 0x24
    29e2:	bd a1       	ldd	r27, Y+37	; 0x25
    29e4:	8c 91       	ld	r24, X
    29e6:	88 23       	and	r24, r24
    29e8:	09 f4       	brne	.+2      	; 0x29ec <sprintf_+0x4a>
    29ea:	cf c3       	rjmp	.+1950   	; 0x318a <sprintf_+0x7e8>
    29ec:	11 96       	adiw	r26, 0x01	; 1
    29ee:	bd a3       	std	Y+37, r27	; 0x25
    29f0:	ac a3       	std	Y+36, r26	; 0x24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:837
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    29f2:	85 32       	cpi	r24, 0x25	; 37
    29f4:	51 f0       	breq	.+20     	; 0x2a0a <sprintf_+0x68>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1106
        break;
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        out(*format, buffer, idx++, maxlen);
    29f6:	71 01       	movw	r14, r2
    29f8:	bf ef       	ldi	r27, 0xFF	; 255
    29fa:	eb 1a       	sub	r14, r27
    29fc:	fb 0a       	sbc	r15, r27
    29fe:	2f ef       	ldi	r18, 0xFF	; 255
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	a1 01       	movw	r20, r2
    2a04:	6a a1       	ldd	r22, Y+34	; 0x22
    2a06:	7b a1       	ldd	r23, Y+35	; 0x23
    2a08:	d1 c0       	rjmp	.+418    	; 0x2bac <sprintf_+0x20a>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:849
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    2a0a:	b1 2c       	mov	r11, r1
    2a0c:	a1 2c       	mov	r10, r1
    2a0e:	08 c0       	rjmp	.+16     	; 0x2a20 <sprintf_+0x7e>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:851
    do {
      switch (*format) {
    2a10:	8d 32       	cpi	r24, 0x2D	; 45
    2a12:	71 f1       	breq	.+92     	; 0x2a70 <sprintf_+0xce>
    2a14:	80 33       	cpi	r24, 0x30	; 48
    2a16:	71 f4       	brne	.+28     	; 0x2a34 <sprintf_+0x92>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:852
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2a18:	68 94       	set
    2a1a:	a0 f8       	bld	r10, 0
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1137

int sprintf_(char* buffer, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(out_buffer, buffer, (size_t)-1, format, va);
    2a1c:	fd a3       	std	Y+37, r31	; 0x25
    2a1e:	ec a3       	std	Y+36, r30	; 0x24
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:851
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2a20:	ec a1       	ldd	r30, Y+36	; 0x24
    2a22:	fd a1       	ldd	r31, Y+37	; 0x25
    2a24:	81 91       	ld	r24, Z+
    2a26:	8b 32       	cpi	r24, 0x2B	; 43
    2a28:	31 f1       	breq	.+76     	; 0x2a76 <sprintf_+0xd4>
    2a2a:	94 f7       	brge	.-28     	; 0x2a10 <sprintf_+0x6e>
    2a2c:	80 32       	cpi	r24, 0x20	; 32
    2a2e:	31 f1       	breq	.+76     	; 0x2a7c <sprintf_+0xda>
    2a30:	83 32       	cpi	r24, 0x23	; 35
    2a32:	39 f1       	breq	.+78     	; 0x2a82 <sprintf_+0xe0>
is_digit_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:276

// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
  return (ch >= '0') && (ch <= '9');
    2a34:	90 ed       	ldi	r25, 0xD0	; 208
    2a36:	98 0f       	add	r25, r24
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:863
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (is_digit_(*format)) {
    2a38:	9a 30       	cpi	r25, 0x0A	; 10
    2a3a:	30 f5       	brcc	.+76     	; 0x2a88 <sprintf_+0xe6>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:283


// internal ASCII string to unsigned int conversion
static unsigned int atoi_(const char** str)
{
  unsigned int i = 0U;
    2a3c:	71 2c       	mov	r7, r1
    2a3e:	61 2c       	mov	r6, r1
atoi_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:284
  while (is_digit_(**str)) {
    2a40:	ec a1       	ldd	r30, Y+36	; 0x24
    2a42:	fd a1       	ldd	r31, Y+37	; 0x25
    2a44:	81 91       	ld	r24, Z+
is_digit_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:276

// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
  return (ch >= '0') && (ch <= '9');
    2a46:	90 ed       	ldi	r25, 0xD0	; 208
    2a48:	98 0f       	add	r25, r24
atoi_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:284

// internal ASCII string to unsigned int conversion
static unsigned int atoi_(const char** str)
{
  unsigned int i = 0U;
  while (is_digit_(**str)) {
    2a4a:	9a 30       	cpi	r25, 0x0A	; 10
    2a4c:	80 f5       	brcc	.+96     	; 0x2aae <sprintf_+0x10c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:285
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2a4e:	2a e0       	ldi	r18, 0x0A	; 10
    2a50:	26 9d       	mul	r18, r6
    2a52:	70 01       	movw	r14, r0
    2a54:	27 9d       	mul	r18, r7
    2a56:	f0 0c       	add	r15, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	30 e3       	ldi	r19, 0x30	; 48
    2a5c:	e3 1a       	sub	r14, r19
    2a5e:	f1 08       	sbc	r15, r1
    2a60:	37 01       	movw	r6, r14
    2a62:	68 0e       	add	r6, r24
    2a64:	71 1c       	adc	r7, r1
    2a66:	87 fd       	sbrc	r24, 7
    2a68:	7a 94       	dec	r7
    2a6a:	fd a3       	std	Y+37, r31	; 0x25
    2a6c:	ec a3       	std	Y+36, r30	; 0x24
    2a6e:	e8 cf       	rjmp	.-48     	; 0x2a40 <sprintf_+0x9e>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:853
    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2a70:	68 94       	set
    2a72:	a1 f8       	bld	r10, 1
    2a74:	d3 cf       	rjmp	.-90     	; 0x2a1c <sprintf_+0x7a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:854
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2a76:	68 94       	set
    2a78:	a2 f8       	bld	r10, 2
    2a7a:	d0 cf       	rjmp	.-96     	; 0x2a1c <sprintf_+0x7a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:855
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2a7c:	68 94       	set
    2a7e:	a3 f8       	bld	r10, 3
    2a80:	cd cf       	rjmp	.-102    	; 0x2a1c <sprintf_+0x7a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:856
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2a82:	68 94       	set
    2a84:	a4 f8       	bld	r10, 4
    2a86:	ca cf       	rjmp	.-108    	; 0x2a1c <sprintf_+0x7a>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:862
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    2a88:	71 2c       	mov	r7, r1
    2a8a:	61 2c       	mov	r6, r1
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:866
    if (is_digit_(*format)) {
      width = atoi_(&format);
    }
    else if (*format == '*') {
    2a8c:	8a 32       	cpi	r24, 0x2A	; 42
    2a8e:	79 f4       	brne	.+30     	; 0x2aae <sprintf_+0x10c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:867
      const int w = va_arg(va, int);
    2a90:	c8 01       	movw	r24, r16
    2a92:	02 96       	adiw	r24, 0x02	; 2
    2a94:	d8 01       	movw	r26, r16
    2a96:	6d 90       	ld	r6, X+
    2a98:	7c 90       	ld	r7, X
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:868
      if (w < 0) {
    2a9a:	77 fe       	sbrs	r7, 7
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <sprintf_+0x106>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:869
        flags |= FLAGS_LEFT;    // reverse padding
    2a9e:	68 94       	set
    2aa0:	a1 f8       	bld	r10, 1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:870
        width = (unsigned int)-w;
    2aa2:	71 94       	neg	r7
    2aa4:	61 94       	neg	r6
    2aa6:	71 08       	sbc	r7, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:867
    width = 0U;
    if (is_digit_(*format)) {
      width = atoi_(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	fd a3       	std	Y+37, r31	; 0x25
    2aac:	ec a3       	std	Y+36, r30	; 0x24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:880
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    2aae:	ec a1       	ldd	r30, Y+36	; 0x24
    2ab0:	fd a1       	ldd	r31, Y+37	; 0x25
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8e 32       	cpi	r24, 0x2E	; 46
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <sprintf_+0x118>
    2ab8:	49 c0       	rjmp	.+146    	; 0x2b4c <sprintf_+0x1aa>
    2aba:	cf 01       	movw	r24, r30
    2abc:	01 96       	adiw	r24, 0x01	; 1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:881
      flags |= FLAGS_PRECISION;
    2abe:	68 94       	set
    2ac0:	b2 f8       	bld	r11, 2
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:883
      format++;
      if (is_digit_(*format)) {
    2ac2:	21 81       	ldd	r18, Z+1	; 0x01
is_digit_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:276

// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
  return (ch >= '0') && (ch <= '9');
    2ac4:	30 ed       	ldi	r19, 0xD0	; 208
    2ac6:	32 0f       	add	r19, r18
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:883
    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
      if (is_digit_(*format)) {
    2ac8:	3a 30       	cpi	r19, 0x0A	; 10
    2aca:	c0 f4       	brcc	.+48     	; 0x2afc <sprintf_+0x15a>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:283


// internal ASCII string to unsigned int conversion
static unsigned int atoi_(const char** str)
{
  unsigned int i = 0U;
    2acc:	51 2c       	mov	r5, r1
    2ace:	41 2c       	mov	r4, r1
atoi_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:284
  while (is_digit_(**str)) {
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	21 91       	ld	r18, Z+
is_digit_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:276

// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
  return (ch >= '0') && (ch <= '9');
    2ad4:	30 ed       	ldi	r19, 0xD0	; 208
    2ad6:	32 0f       	add	r19, r18
atoi_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:284

// internal ASCII string to unsigned int conversion
static unsigned int atoi_(const char** str)
{
  unsigned int i = 0U;
  while (is_digit_(**str)) {
    2ad8:	3a 30       	cpi	r19, 0x0A	; 10
    2ada:	98 f5       	brcc	.+102    	; 0x2b42 <sprintf_+0x1a0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:285
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2adc:	3a e0       	ldi	r19, 0x0A	; 10
    2ade:	34 9d       	mul	r19, r4
    2ae0:	70 01       	movw	r14, r0
    2ae2:	35 9d       	mul	r19, r5
    2ae4:	f0 0c       	add	r15, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	80 e3       	ldi	r24, 0x30	; 48
    2aea:	e8 1a       	sub	r14, r24
    2aec:	f1 08       	sbc	r15, r1
    2aee:	27 01       	movw	r4, r14
    2af0:	42 0e       	add	r4, r18
    2af2:	51 1c       	adc	r5, r1
    2af4:	27 fd       	sbrc	r18, 7
    2af6:	5a 94       	dec	r5
    2af8:	cf 01       	movw	r24, r30
    2afa:	ea cf       	rjmp	.-44     	; 0x2ad0 <sprintf_+0x12e>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:886
      flags |= FLAGS_PRECISION;
      format++;
      if (is_digit_(*format)) {
        precision = atoi_(&format);
      }
      else if (*format == '*') {
    2afc:	2a 32       	cpi	r18, 0x2A	; 42
    2afe:	21 f5       	brne	.+72     	; 0x2b48 <sprintf_+0x1a6>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:887
        const int precision_ = (int)va_arg(va, int);
    2b00:	c8 01       	movw	r24, r16
    2b02:	02 96       	adiw	r24, 0x02	; 2
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:888
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
    2b04:	d8 01       	movw	r26, r16
    2b06:	4d 90       	ld	r4, X+
    2b08:	5c 90       	ld	r5, X
    2b0a:	57 fe       	sbrs	r5, 7
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <sprintf_+0x170>
    2b0e:	51 2c       	mov	r5, r1
    2b10:	41 2c       	mov	r4, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:889
        format++;
    2b12:	ec a1       	ldd	r30, Y+36	; 0x24
    2b14:	fd a1       	ldd	r31, Y+37	; 0x25
    2b16:	32 96       	adiw	r30, 0x02	; 2
    2b18:	fd a3       	std	Y+37, r31	; 0x25
    2b1a:	ec a3       	std	Y+36, r30	; 0x24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:887
      format++;
      if (is_digit_(*format)) {
        precision = atoi_(&format);
      }
      else if (*format == '*') {
        const int precision_ = (int)va_arg(va, int);
    2b1c:	8c 01       	movw	r16, r24
    2b1e:	2c a1       	ldd	r18, Y+36	; 0x24
    2b20:	3d a1       	ldd	r19, Y+37	; 0x25
    2b22:	2f 5f       	subi	r18, 0xFF	; 255
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:894
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2b26:	ac a1       	ldd	r26, Y+36	; 0x24
    2b28:	bd a1       	ldd	r27, Y+37	; 0x25
    2b2a:	8c 91       	ld	r24, X
    2b2c:	8c 36       	cpi	r24, 0x6C	; 108
    2b2e:	c1 f0       	breq	.+48     	; 0x2b60 <sprintf_+0x1be>
    2b30:	84 f4       	brge	.+32     	; 0x2b52 <sprintf_+0x1b0>
    2b32:	88 36       	cpi	r24, 0x68	; 104
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <sprintf_+0x196>
    2b36:	45 c0       	rjmp	.+138    	; 0x2bc2 <sprintf_+0x220>
    2b38:	8a 36       	cpi	r24, 0x6A	; 106
    2b3a:	79 f0       	breq	.+30     	; 0x2b5a <sprintf_+0x1b8>
    2b3c:	2c a1       	ldd	r18, Y+36	; 0x24
    2b3e:	3d a1       	ldd	r19, Y+37	; 0x25
    2b40:	16 c0       	rjmp	.+44     	; 0x2b6e <sprintf_+0x1cc>
atoi_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:284

// internal ASCII string to unsigned int conversion
static unsigned int atoi_(const char** str)
{
  unsigned int i = 0U;
  while (is_digit_(**str)) {
    2b42:	9d a3       	std	Y+37, r25	; 0x25
    2b44:	8c a3       	std	Y+36, r24	; 0x24
    2b46:	eb cf       	rjmp	.-42     	; 0x2b1e <sprintf_+0x17c>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:882

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    2b48:	9d a3       	std	Y+37, r25	; 0x25
    2b4a:	8c a3       	std	Y+36, r24	; 0x24
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:879
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    2b4c:	51 2c       	mov	r5, r1
    2b4e:	41 2c       	mov	r4, r1
    2b50:	e6 cf       	rjmp	.-52     	; 0x2b1e <sprintf_+0x17c>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:894
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2b52:	84 37       	cpi	r24, 0x74	; 116
    2b54:	11 f0       	breq	.+4      	; 0x2b5a <sprintf_+0x1b8>
    2b56:	8a 37       	cpi	r24, 0x7A	; 122
    2b58:	89 f7       	brne	.-30     	; 0x2b3c <sprintf_+0x19a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:920
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2b5a:	68 94       	set
    2b5c:	b1 f8       	bld	r11, 1
    2b5e:	07 c0       	rjmp	.+14     	; 0x2b6e <sprintf_+0x1cc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:898
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    2b60:	ec a1       	ldd	r30, Y+36	; 0x24
    2b62:	fd a1       	ldd	r31, Y+37	; 0x25
    2b64:	81 81       	ldd	r24, Z+1	; 0x01
    2b66:	8c 36       	cpi	r24, 0x6C	; 108
    2b68:	29 f1       	breq	.+74     	; 0x2bb4 <sprintf_+0x212>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:896
    }

    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
    2b6a:	68 94       	set
    2b6c:	b0 f8       	bld	r11, 0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2b6e:	f9 01       	movw	r30, r18
    2b70:	81 91       	ld	r24, Z+
    2b72:	fd a3       	std	Y+37, r31	; 0x25
    2b74:	ec a3       	std	Y+36, r30	; 0x24
    2b76:	85 36       	cpi	r24, 0x65	; 101
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <sprintf_+0x1da>
    2b7a:	df c1       	rjmp	.+958    	; 0x2f3a <sprintf_+0x598>
    2b7c:	0c f0       	brlt	.+2      	; 0x2b80 <sprintf_+0x1de>
    2b7e:	ab c0       	rjmp	.+342    	; 0x2cd6 <sprintf_+0x334>
    2b80:	87 34       	cpi	r24, 0x47	; 71
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <sprintf_+0x1e4>
    2b84:	da c1       	rjmp	.+948    	; 0x2f3a <sprintf_+0x598>
    2b86:	4c f5       	brge	.+82     	; 0x2bda <sprintf_+0x238>
    2b88:	85 34       	cpi	r24, 0x45	; 69
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <sprintf_+0x1ec>
    2b8c:	d6 c1       	rjmp	.+940    	; 0x2f3a <sprintf_+0x598>
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <sprintf_+0x1f0>
    2b90:	b9 c1       	rjmp	.+882    	; 0x2f04 <sprintf_+0x562>
    2b92:	85 32       	cpi	r24, 0x25	; 37
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <sprintf_+0x1f6>
    2b96:	2f cf       	rjmp	.-418    	; 0x29f6 <sprintf_+0x54>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1084
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2b98:	71 01       	movw	r14, r2
    2b9a:	ef ef       	ldi	r30, 0xFF	; 255
    2b9c:	ee 1a       	sub	r14, r30
    2b9e:	fe 0a       	sbc	r15, r30
    2ba0:	2f ef       	ldi	r18, 0xFF	; 255
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	a1 01       	movw	r20, r2
    2ba6:	6a a1       	ldd	r22, Y+34	; 0x22
    2ba8:	7b a1       	ldd	r23, Y+35	; 0x23
    2baa:	85 e2       	ldi	r24, 0x25	; 37
    2bac:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
sprintf_():
    2bb0:	17 01       	movw	r2, r14
    2bb2:	16 cf       	rjmp	.-468    	; 0x29e0 <sprintf_+0x3e>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:899
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
          flags |= FLAGS_LONG_LONG;
    2bb4:	f3 e0       	ldi	r31, 0x03	; 3
    2bb6:	bf 2a       	or	r11, r31
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:908
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
          format++;
    2bb8:	2c a1       	ldd	r18, Y+36	; 0x24
    2bba:	3d a1       	ldd	r19, Y+37	; 0x25
    2bbc:	2e 5f       	subi	r18, 0xFE	; 254
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	d6 cf       	rjmp	.-84     	; 0x2b6e <sprintf_+0x1cc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:906
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    2bc2:	ac a1       	ldd	r26, Y+36	; 0x24
    2bc4:	bd a1       	ldd	r27, Y+37	; 0x25
    2bc6:	11 96       	adiw	r26, 0x01	; 1
    2bc8:	8c 91       	ld	r24, X
    2bca:	88 36       	cpi	r24, 0x68	; 104
    2bcc:	19 f0       	breq	.+6      	; 0x2bd4 <sprintf_+0x232>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:904
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    2bce:	68 94       	set
    2bd0:	a7 f8       	bld	r10, 7
    2bd2:	cd cf       	rjmp	.-102    	; 0x2b6e <sprintf_+0x1cc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:907
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    2bd4:	b0 ec       	ldi	r27, 0xC0	; 192
    2bd6:	ab 2a       	or	r10, r27
    2bd8:	ef cf       	rjmp	.-34     	; 0x2bb8 <sprintf_+0x216>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2bda:	82 36       	cpi	r24, 0x62	; 98
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <sprintf_+0x23e>
    2bde:	00 c3       	rjmp	.+1536   	; 0x31e0 <sprintf_+0x83e>
    2be0:	44 f4       	brge	.+16     	; 0x2bf2 <sprintf_+0x250>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:953
          base = BASE_DECIMAL;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    2be2:	68 94       	set
    2be4:	a5 f8       	bld	r10, 5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2be6:	88 35       	cpi	r24, 0x58	; 88
    2be8:	09 f0       	breq	.+2      	; 0x2bec <sprintf_+0x24a>
    2bea:	05 cf       	rjmp	.-502    	; 0x29f6 <sprintf_+0x54>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:939
      case 'o' :
      case 'b' : {
        // set the base
        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
          base = BASE_HEX;
    2bec:	f0 e1       	ldi	r31, 0x10	; 16
    2bee:	8f 2e       	mov	r8, r31
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <sprintf_+0x26c>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2bf2:	83 36       	cpi	r24, 0x63	; 99
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <sprintf_+0x256>
    2bf6:	b8 c1       	rjmp	.+880    	; 0x2f68 <sprintf_+0x5c6>
    2bf8:	84 36       	cpi	r24, 0x64	; 100
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <sprintf_+0x25c>
    2bfc:	fc ce       	rjmp	.-520    	; 0x29f6 <sprintf_+0x54>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:949
        else if (*format == 'b') {
          base =  BASE_BINARY;
        }
        else {
          base = BASE_DECIMAL;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2bfe:	e8 94       	clt
    2c00:	a4 f8       	bld	r10, 4
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:948
        }
        else if (*format == 'b') {
          base =  BASE_BINARY;
        }
        else {
          base = BASE_DECIMAL;
    2c02:	aa e0       	ldi	r26, 0x0A	; 10
    2c04:	8a 2e       	mov	r8, r26
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:957
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2c06:	89 36       	cpi	r24, 0x69	; 105
    2c08:	21 f0       	breq	.+8      	; 0x2c12 <sprintf_+0x270>
    2c0a:	84 36       	cpi	r24, 0x64	; 100
    2c0c:	11 f0       	breq	.+4      	; 0x2c12 <sprintf_+0x270>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:958
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2c0e:	f3 ef       	ldi	r31, 0xF3	; 243
    2c10:	af 22       	and	r10, r31
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:962
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2c12:	b2 fe       	sbrs	r11, 2
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <sprintf_+0x278>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:963
          flags &= ~FLAGS_ZEROPAD;
    2c16:	e8 94       	clt
    2c18:	a0 f8       	bld	r10, 0
    2c1a:	95 01       	movw	r18, r10
    2c1c:	22 27       	eor	r18, r18
    2c1e:	32 70       	andi	r19, 0x02	; 2
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:967
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2c20:	89 36       	cpi	r24, 0x69	; 105
    2c22:	19 f0       	breq	.+6      	; 0x2c2a <sprintf_+0x288>
    2c24:	84 36       	cpi	r24, 0x64	; 100
    2c26:	09 f0       	breq	.+2      	; 0x2c2a <sprintf_+0x288>
    2c28:	1c c1       	rjmp	.+568    	; 0x2e62 <sprintf_+0x4c0>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:969
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2c2a:	23 2b       	or	r18, r19
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <sprintf_+0x28e>
    2c2e:	98 c0       	rjmp	.+304    	; 0x2d60 <sprintf_+0x3be>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:971
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(va, long long);
    2c30:	98 01       	movw	r18, r16
    2c32:	28 5f       	subi	r18, 0xF8	; 248
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	3e 83       	std	Y+6, r19	; 0x06
    2c38:	2d 83       	std	Y+5, r18	; 0x05
    2c3a:	d8 01       	movw	r26, r16
    2c3c:	cc 90       	ld	r12, X
    2c3e:	11 96       	adiw	r26, 0x01	; 1
    2c40:	dc 90       	ld	r13, X
    2c42:	11 97       	sbiw	r26, 0x01	; 1
    2c44:	12 96       	adiw	r26, 0x02	; 2
    2c46:	ec 90       	ld	r14, X
    2c48:	12 97       	sbiw	r26, 0x02	; 2
    2c4a:	13 96       	adiw	r26, 0x03	; 3
    2c4c:	fc 90       	ld	r15, X
    2c4e:	13 97       	sbiw	r26, 0x03	; 3
    2c50:	14 96       	adiw	r26, 0x04	; 4
    2c52:	9c 90       	ld	r9, X
    2c54:	14 97       	sbiw	r26, 0x04	; 4
    2c56:	15 96       	adiw	r26, 0x05	; 5
    2c58:	ac 91       	ld	r26, X
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	f6 81       	ldd	r31, Z+6	; 0x06
    2c5e:	f9 83       	std	Y+1, r31	; 0x01
    2c60:	f8 01       	movw	r30, r16
    2c62:	f7 81       	ldd	r31, Z+7	; 0x07
    2c64:	ff 83       	std	Y+7, r31	; 0x07
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:972
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
    2c66:	96 01       	movw	r18, r12
    2c68:	a7 01       	movw	r20, r14
    2c6a:	69 2d       	mov	r22, r9
    2c6c:	7a 2f       	mov	r23, r26
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	9f 2f       	mov	r25, r31
    2c72:	0f e3       	ldi	r16, 0x3F	; 63
    2c74:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__lshrdi3>
    2c78:	b2 2f       	mov	r27, r18
    2c7a:	09 2d       	mov	r16, r9
    2c7c:	1a 2f       	mov	r17, r26
    2c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c80:	ef 81       	ldd	r30, Y+7	; 0x07
    2c82:	96 01       	movw	r18, r12
    2c84:	a7 01       	movw	r20, r14
    2c86:	b8 01       	movw	r22, r16
    2c88:	8f 2f       	mov	r24, r31
    2c8a:	9e 2f       	mov	r25, r30
    2c8c:	a0 e0       	ldi	r26, 0x00	; 0
    2c8e:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    2c92:	3c f4       	brge	.+14     	; 0x2ca2 <sprintf_+0x300>
    2c94:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
    2c98:	69 01       	movw	r12, r18
    2c9a:	7a 01       	movw	r14, r20
    2c9c:	8b 01       	movw	r16, r22
    2c9e:	f8 2f       	mov	r31, r24
    2ca0:	e9 2f       	mov	r30, r25
    2ca2:	bf 92       	push	r11
    2ca4:	af 92       	push	r10
    2ca6:	7f 92       	push	r7
    2ca8:	6f 92       	push	r6
    2caa:	5f 92       	push	r5
    2cac:	4f 92       	push	r4
    2cae:	ab 2e       	mov	r10, r27
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:977
#endif
          }
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
    2cb0:	2f 2f       	mov	r18, r31
    2cb2:	3e 2f       	mov	r19, r30
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:996
          else if (flags & FLAGS_LONG) {
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
    2cb4:	a1 01       	movw	r20, r2
    2cb6:	6a a1       	ldd	r22, Y+34	; 0x22
    2cb8:	7b a1       	ldd	r23, Y+35	; 0x23
    2cba:	8c e2       	ldi	r24, 0x2C	; 44
    2cbc:	9a e0       	ldi	r25, 0x0A	; 10
    2cbe:	0e 94 45 02 	call	0x48a	; 0x48a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]>
    2cc2:	1c 01       	movw	r2, r24
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1042
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    2cd0:	0d 81       	ldd	r16, Y+5	; 0x05
    2cd2:	1e 81       	ldd	r17, Y+6	; 0x06
    2cd4:	85 ce       	rjmp	.-758    	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2cd6:	8f 36       	cpi	r24, 0x6F	; 111
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <sprintf_+0x33a>
    2cda:	7f c2       	rjmp	.+1278   	; 0x31da <sprintf_+0x838>
    2cdc:	9c f4       	brge	.+38     	; 0x2d04 <sprintf_+0x362>
    2cde:	87 36       	cpi	r24, 0x67	; 103
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <sprintf_+0x342>
    2ce2:	2b c1       	rjmp	.+598    	; 0x2f3a <sprintf_+0x598>
    2ce4:	0c f4       	brge	.+2      	; 0x2ce8 <sprintf_+0x346>
    2ce6:	0e c1       	rjmp	.+540    	; 0x2f04 <sprintf_+0x562>
    2ce8:	89 36       	cpi	r24, 0x69	; 105
    2cea:	09 f4       	brne	.+2      	; 0x2cee <sprintf_+0x34c>
    2cec:	88 cf       	rjmp	.-240    	; 0x2bfe <sprintf_+0x25c>
    2cee:	8e 36       	cpi	r24, 0x6E	; 110
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <sprintf_+0x352>
    2cf2:	81 ce       	rjmp	.-766    	; 0x29f6 <sprintf_+0x54>
    2cf4:	d8 01       	movw	r26, r16
    2cf6:	ed 91       	ld	r30, X+
    2cf8:	fd 91       	ld	r31, X+
    2cfa:	8d 01       	movw	r16, r26
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1093
      // Many people prefer to disable support for %n, as it lets the caller
      // engineer a write to an arbitrary location, of a value the caller
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(va, char*))      = (char) idx;
    2cfc:	a6 fe       	sbrs	r10, 6
    2cfe:	2a c2       	rjmp	.+1108   	; 0x3154 <sprintf_+0x7b2>
    2d00:	20 82       	st	Z, r2
    2d02:	6e ce       	rjmp	.-804    	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2d04:	83 37       	cpi	r24, 0x73	; 115
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <sprintf_+0x368>
    2d08:	77 c1       	rjmp	.+750    	; 0x2ff8 <sprintf_+0x656>
    2d0a:	1c f5       	brge	.+70     	; 0x2d52 <sprintf_+0x3b0>
    2d0c:	80 37       	cpi	r24, 0x70	; 112
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <sprintf_+0x370>
    2d10:	72 ce       	rjmp	.-796    	; 0x29f6 <sprintf_+0x54>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1074
        break;
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
    2d12:	65 01       	movw	r12, r10
    2d14:	68 94       	set
    2d16:	c0 f8       	bld	r12, 0
    2d18:	d4 f8       	bld	r13, 4
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1075
        uintptr_t value = (uintptr_t)va_arg(va, void*);
    2d1a:	38 01       	movw	r6, r16
    2d1c:	f2 e0       	ldi	r31, 0x02	; 2
    2d1e:	6f 0e       	add	r6, r31
    2d20:	71 1c       	adc	r7, r1
    2d22:	d8 01       	movw	r26, r16
    2d24:	0d 91       	ld	r16, X+
    2d26:	1c 91       	ld	r17, X
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1076
        idx = (value == (uintptr_t) NULL) ?
    2d28:	01 15       	cp	r16, r1
    2d2a:	11 05       	cpc	r17, r1
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <sprintf_+0x38e>
    2d2e:	f2 c1       	rjmp	.+996    	; 0x3114 <sprintf_+0x772>
    2d30:	46 e0       	ldi	r20, 0x06	; 6
    2d32:	e4 2e       	mov	r14, r20
    2d34:	f1 2c       	mov	r15, r1
    2d36:	05 e0       	ldi	r16, 0x05	; 5
    2d38:	10 e0       	ldi	r17, 0x00	; 0
    2d3a:	29 e7       	ldi	r18, 0x79	; 121
    2d3c:	32 e0       	ldi	r19, 0x02	; 2
    2d3e:	a1 01       	movw	r20, r2
    2d40:	6a a1       	ldd	r22, Y+34	; 0x22
    2d42:	7b a1       	ldd	r23, Y+35	; 0x23
    2d44:	8c e2       	ldi	r24, 0x2C	; 44
    2d46:	9a e0       	ldi	r25, 0x0A	; 10
    2d48:	0e 94 bb 01 	call	0x376	; 0x376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>
    2d4c:	1c 01       	movw	r2, r24
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1075
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
        uintptr_t value = (uintptr_t)va_arg(va, void*);
    2d4e:	83 01       	movw	r16, r6
    2d50:	47 ce       	rjmp	.-882    	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:928
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
    2d52:	85 37       	cpi	r24, 0x75	; 117
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <sprintf_+0x3b6>
    2d56:	53 cf       	rjmp	.-346    	; 0x2bfe <sprintf_+0x25c>
    2d58:	88 37       	cpi	r24, 0x78	; 120
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <sprintf_+0x3bc>
    2d5c:	47 cf       	rjmp	.-370    	; 0x2bec <sprintf_+0x24a>
    2d5e:	4b ce       	rjmp	.-874    	; 0x29f6 <sprintf_+0x54>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:975
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(va, long long);
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
    2d60:	b0 fe       	sbrs	r11, 0
    2d62:	47 c0       	rjmp	.+142    	; 0x2df2 <sprintf_+0x450>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:976
            const long value = va_arg(va, long);
    2d64:	98 01       	movw	r18, r16
    2d66:	2c 5f       	subi	r18, 0xFC	; 252
    2d68:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6a:	3e 83       	std	Y+6, r19	; 0x06
    2d6c:	2d 83       	std	Y+5, r18	; 0x05
    2d6e:	d8 01       	movw	r26, r16
    2d70:	cd 90       	ld	r12, X+
    2d72:	dd 90       	ld	r13, X+
    2d74:	ed 90       	ld	r14, X+
    2d76:	fc 90       	ld	r15, X
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:977
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
    2d78:	d7 01       	movw	r26, r14
    2d7a:	c6 01       	movw	r24, r12
    2d7c:	88 27       	eor	r24, r24
    2d7e:	b7 fd       	sbrc	r27, 7
    2d80:	83 95       	inc	r24
    2d82:	99 27       	eor	r25, r25
    2d84:	aa 27       	eor	r26, r26
    2d86:	bb 27       	eor	r27, r27
    2d88:	89 87       	std	Y+9, r24	; 0x09
    2d8a:	9a 87       	std	Y+10, r25	; 0x0a
    2d8c:	ab 87       	std	Y+11, r26	; 0x0b
    2d8e:	bc 87       	std	Y+12, r27	; 0x0c
    2d90:	d7 01       	movw	r26, r14
    2d92:	c6 01       	movw	r24, r12
    2d94:	bb 0f       	add	r27, r27
    2d96:	88 0b       	sbc	r24, r24
    2d98:	98 2f       	mov	r25, r24
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	ab 83       	std	Y+3, r26	; 0x03
    2da2:	bc 83       	std	Y+4, r27	; 0x04
    2da4:	cf 82       	std	Y+7, r12	; 0x07
    2da6:	d8 86       	std	Y+8, r13	; 0x08
    2da8:	9e 2c       	mov	r9, r14
    2daa:	bf 2d       	mov	r27, r15
    2dac:	09 81       	ldd	r16, Y+1	; 0x01
    2dae:	10 2f       	mov	r17, r16
    2db0:	f0 2f       	mov	r31, r16
    2db2:	e0 2f       	mov	r30, r16
    2db4:	96 01       	movw	r18, r12
    2db6:	a7 01       	movw	r20, r14
    2db8:	6f 2f       	mov	r22, r31
    2dba:	70 2f       	mov	r23, r16
    2dbc:	80 2f       	mov	r24, r16
    2dbe:	9f 2f       	mov	r25, r31
    2dc0:	a0 e0       	ldi	r26, 0x00	; 0
    2dc2:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    2dc6:	4c f4       	brge	.+18     	; 0x2dda <sprintf_+0x438>
    2dc8:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
    2dcc:	2f 83       	std	Y+7, r18	; 0x07
    2dce:	38 87       	std	Y+8, r19	; 0x08
    2dd0:	94 2e       	mov	r9, r20
    2dd2:	b5 2f       	mov	r27, r21
    2dd4:	8b 01       	movw	r16, r22
    2dd6:	f8 2f       	mov	r31, r24
    2dd8:	e9 2f       	mov	r30, r25
    2dda:	bf 92       	push	r11
    2ddc:	af 92       	push	r10
    2dde:	7f 92       	push	r7
    2de0:	6f 92       	push	r6
    2de2:	5f 92       	push	r5
    2de4:	4f 92       	push	r4
    2de6:	a9 84       	ldd	r10, Y+9	; 0x09
    2de8:	cf 80       	ldd	r12, Y+7	; 0x07
    2dea:	d8 84       	ldd	r13, Y+8	; 0x08
    2dec:	e9 2c       	mov	r14, r9
    2dee:	fb 2e       	mov	r15, r27
    2df0:	5f cf       	rjmp	.-322    	; 0x2cb0 <sprintf_+0x30e>
    2df2:	d8 01       	movw	r26, r16
    2df4:	12 96       	adiw	r26, 0x02	; 2
    2df6:	be 83       	std	Y+6, r27	; 0x06
    2df8:	ad 83       	std	Y+5, r26	; 0x05
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:980
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2dfa:	d8 01       	movw	r26, r16
    2dfc:	a6 fe       	sbrs	r10, 6
    2dfe:	2e c0       	rjmp	.+92     	; 0x2e5c <sprintf_+0x4ba>
    2e00:	ec 91       	ld	r30, X
    2e02:	0e 2e       	mov	r0, r30
    2e04:	00 0c       	add	r0, r0
    2e06:	ff 0b       	sbc	r31, r31
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:981
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
    2e08:	bf 2f       	mov	r27, r31
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	bb 27       	eor	r27, r27
    2e0e:	bb 1f       	adc	r27, r27
    2e10:	b9 83       	std	Y+1, r27	; 0x01
    2e12:	6f 01       	movw	r12, r30
    2e14:	ef 2e       	mov	r14, r31
    2e16:	ee 0c       	add	r14, r14
    2e18:	ee 08       	sbc	r14, r14
    2e1a:	fe 2c       	mov	r15, r14
    2e1c:	0e 2d       	mov	r16, r14
    2e1e:	1e 2d       	mov	r17, r14
    2e20:	9e 2c       	mov	r9, r14
    2e22:	be 2d       	mov	r27, r14
    2e24:	9f 01       	movw	r18, r30
    2e26:	4e 2d       	mov	r20, r14
    2e28:	5e 2d       	mov	r21, r14
    2e2a:	6e 2d       	mov	r22, r14
    2e2c:	7e 2d       	mov	r23, r14
    2e2e:	8e 2d       	mov	r24, r14
    2e30:	9e 2d       	mov	r25, r14
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	0e 94 91 28 	call	0x5122	; 0x5122 <__cmpdi2_s8>
    2e38:	3c f4       	brge	.+14     	; 0x2e48 <sprintf_+0x4a6>
    2e3a:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
    2e3e:	69 01       	movw	r12, r18
    2e40:	7a 01       	movw	r14, r20
    2e42:	8b 01       	movw	r16, r22
    2e44:	98 2e       	mov	r9, r24
    2e46:	b9 2f       	mov	r27, r25
    2e48:	bf 92       	push	r11
    2e4a:	af 92       	push	r10
    2e4c:	7f 92       	push	r7
    2e4e:	6f 92       	push	r6
    2e50:	5f 92       	push	r5
    2e52:	4f 92       	push	r4
    2e54:	a9 80       	ldd	r10, Y+1	; 0x01
    2e56:	29 2d       	mov	r18, r9
    2e58:	3b 2f       	mov	r19, r27
    2e5a:	2c cf       	rjmp	.-424    	; 0x2cb4 <sprintf_+0x312>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:980
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2e5c:	ed 91       	ld	r30, X+
    2e5e:	fc 91       	ld	r31, X
    2e60:	d3 cf       	rjmp	.-90     	; 0x2e08 <sprintf_+0x466>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:988
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
#if PRINTF_SUPPORT_LONG_LONG
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
    2e62:	f8 01       	movw	r30, r16
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:986
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2e64:	23 2b       	or	r18, r19
    2e66:	19 f1       	breq	.+70     	; 0x2eae <sprintf_+0x50c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:988
#if PRINTF_SUPPORT_LONG_LONG
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
    2e68:	38 96       	adiw	r30, 0x08	; 8
    2e6a:	fe 83       	std	Y+6, r31	; 0x06
    2e6c:	ed 83       	std	Y+5, r30	; 0x05
    2e6e:	d8 01       	movw	r26, r16
    2e70:	cc 90       	ld	r12, X
    2e72:	11 96       	adiw	r26, 0x01	; 1
    2e74:	dc 90       	ld	r13, X
    2e76:	11 97       	sbiw	r26, 0x01	; 1
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	ec 90       	ld	r14, X
    2e7c:	12 97       	sbiw	r26, 0x02	; 2
    2e7e:	13 96       	adiw	r26, 0x03	; 3
    2e80:	fc 90       	ld	r15, X
    2e82:	13 97       	sbiw	r26, 0x03	; 3
    2e84:	14 96       	adiw	r26, 0x04	; 4
    2e86:	9c 91       	ld	r25, X
    2e88:	14 97       	sbiw	r26, 0x04	; 4
    2e8a:	15 96       	adiw	r26, 0x05	; 5
    2e8c:	8c 91       	ld	r24, X
    2e8e:	15 97       	sbiw	r26, 0x05	; 5
    2e90:	16 96       	adiw	r26, 0x06	; 6
    2e92:	2c 91       	ld	r18, X
    2e94:	16 97       	sbiw	r26, 0x06	; 6
    2e96:	17 96       	adiw	r26, 0x07	; 7
    2e98:	3c 91       	ld	r19, X
    2e9a:	bf 92       	push	r11
    2e9c:	af 92       	push	r10
    2e9e:	7f 92       	push	r7
    2ea0:	6f 92       	push	r6
    2ea2:	5f 92       	push	r5
    2ea4:	4f 92       	push	r4
    2ea6:	a1 2c       	mov	r10, r1
    2ea8:	09 2f       	mov	r16, r25
    2eaa:	18 2f       	mov	r17, r24
    2eac:	03 cf       	rjmp	.-506    	; 0x2cb4 <sprintf_+0x312>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:991
#endif
          }
          else if (flags & FLAGS_LONG) {
    2eae:	b0 fe       	sbrs	r11, 0
    2eb0:	16 c0       	rjmp	.+44     	; 0x2ede <sprintf_+0x53c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:992
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
    2eb2:	34 96       	adiw	r30, 0x04	; 4
    2eb4:	fe 83       	std	Y+6, r31	; 0x06
    2eb6:	ed 83       	std	Y+5, r30	; 0x05
    2eb8:	d8 01       	movw	r26, r16
    2eba:	0d 91       	ld	r16, X+
    2ebc:	1d 91       	ld	r17, X+
    2ebe:	2d 91       	ld	r18, X+
    2ec0:	3c 91       	ld	r19, X
    2ec2:	bf 92       	push	r11
    2ec4:	af 92       	push	r10
    2ec6:	7f 92       	push	r7
    2ec8:	6f 92       	push	r6
    2eca:	5f 92       	push	r5
    2ecc:	4f 92       	push	r4
    2ece:	a1 2c       	mov	r10, r1
    2ed0:	68 01       	movw	r12, r16
    2ed2:	79 01       	movw	r14, r18
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:996
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
    2ed4:	00 e0       	ldi	r16, 0x00	; 0
    2ed6:	10 e0       	ldi	r17, 0x00	; 0
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	eb ce       	rjmp	.-554    	; 0x2cb4 <sprintf_+0x312>
    2ede:	32 96       	adiw	r30, 0x02	; 2
    2ee0:	fe 83       	std	Y+6, r31	; 0x06
    2ee2:	ed 83       	std	Y+5, r30	; 0x05
    2ee4:	d8 01       	movw	r26, r16
    2ee6:	0d 91       	ld	r16, X+
    2ee8:	1c 91       	ld	r17, X
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:995
          }
          else if (flags & FLAGS_LONG) {
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2eea:	a6 fc       	sbrc	r10, 6
    2eec:	11 27       	eor	r17, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:996
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
    2eee:	bf 92       	push	r11
    2ef0:	af 92       	push	r10
    2ef2:	7f 92       	push	r7
    2ef4:	6f 92       	push	r6
    2ef6:	5f 92       	push	r5
    2ef8:	4f 92       	push	r4
    2efa:	a1 2c       	mov	r10, r1
    2efc:	68 01       	movw	r12, r16
    2efe:	e1 2c       	mov	r14, r1
    2f00:	f1 2c       	mov	r15, r1
    2f02:	e8 cf       	rjmp	.-48     	; 0x2ed4 <sprintf_+0x532>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1005
        break;
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2f04:	86 34       	cpi	r24, 0x46	; 70
    2f06:	11 f4       	brne	.+4      	; 0x2f0c <sprintf_+0x56a>
    2f08:	68 94       	set
    2f0a:	a5 f8       	bld	r10, 5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1006
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	34 96       	adiw	r30, 0x04	; 4
    2f10:	fa 83       	std	Y+2, r31	; 0x02
    2f12:	e9 83       	std	Y+1, r30	; 0x01
    2f14:	d8 01       	movw	r26, r16
    2f16:	0d 91       	ld	r16, X+
    2f18:	1d 91       	ld	r17, X+
    2f1a:	2d 91       	ld	r18, X+
    2f1c:	3c 91       	ld	r19, X
    2f1e:	81 2c       	mov	r8, r1
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1017
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
    2f20:	63 01       	movw	r12, r6
    2f22:	72 01       	movw	r14, r4
    2f24:	a1 01       	movw	r20, r2
    2f26:	6a a1       	ldd	r22, Y+34	; 0x22
    2f28:	7b a1       	ldd	r23, Y+35	; 0x23
    2f2a:	8c e2       	ldi	r24, 0x2C	; 44
    2f2c:	9a e0       	ldi	r25, 0x0A	; 10
    2f2e:	0e 94 92 10 	call	0x2124	; 0x2124 <print_floating_point(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.40]>
    2f32:	1c 01       	movw	r2, r24
    2f34:	09 81       	ldd	r16, Y+1	; 0x01
    2f36:	1a 81       	ldd	r17, Y+2	; 0x02
    2f38:	53 cd       	rjmp	.-1370   	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1015
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	9f 7d       	andi	r25, 0xDF	; 223
    2f3e:	97 34       	cpi	r25, 0x47	; 71
    2f40:	19 f4       	brne	.+6      	; 0x2f48 <sprintf_+0x5a6>
    2f42:	68 94       	set
    2f44:	b3 f8       	bld	r11, 3
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1016
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    2f46:	8d 7f       	andi	r24, 0xFD	; 253
    2f48:	85 34       	cpi	r24, 0x45	; 69
    2f4a:	11 f4       	brne	.+4      	; 0x2f50 <sprintf_+0x5ae>
    2f4c:	68 94       	set
    2f4e:	a5 f8       	bld	r10, 5
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1017
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
    2f50:	f8 01       	movw	r30, r16
    2f52:	34 96       	adiw	r30, 0x04	; 4
    2f54:	fa 83       	std	Y+2, r31	; 0x02
    2f56:	e9 83       	std	Y+1, r30	; 0x01
    2f58:	d8 01       	movw	r26, r16
    2f5a:	0d 91       	ld	r16, X+
    2f5c:	1d 91       	ld	r17, X+
    2f5e:	2d 91       	ld	r18, X+
    2f60:	3c 91       	ld	r19, X
    2f62:	88 24       	eor	r8, r8
    2f64:	83 94       	inc	r8
    2f66:	dc cf       	rjmp	.-72     	; 0x2f20 <sprintf_+0x57e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1024
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2f68:	45 01       	movw	r8, r10
    2f6a:	b2 e0       	ldi	r27, 0x02	; 2
    2f6c:	8b 22       	and	r8, r27
    2f6e:	99 24       	eor	r9, r9
    2f70:	a1 01       	movw	r20, r2
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1022
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        unsigned int l = 1U;
    2f72:	cc 24       	eor	r12, r12
    2f74:	c3 94       	inc	r12
    2f76:	d1 2c       	mov	r13, r1
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1024
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2f78:	a1 fc       	sbrc	r10, 1
    2f7a:	17 c0       	rjmp	.+46     	; 0x2faa <sprintf_+0x608>
    2f7c:	f1 2c       	mov	r15, r1
    2f7e:	e1 2c       	mov	r14, r1
    2f80:	a1 01       	movw	r20, r2
    2f82:	4e 0d       	add	r20, r14
    2f84:	5f 1d       	adc	r21, r15
    2f86:	67 01       	movw	r12, r14
    2f88:	e2 e0       	ldi	r30, 0x02	; 2
    2f8a:	ce 0e       	add	r12, r30
    2f8c:	d1 1c       	adc	r13, r1
    2f8e:	ff ef       	ldi	r31, 0xFF	; 255
    2f90:	ef 1a       	sub	r14, r31
    2f92:	ff 0a       	sbc	r15, r31
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1025
          while (l++ < width) {
    2f94:	e6 14       	cp	r14, r6
    2f96:	f7 04       	cpc	r15, r7
    2f98:	40 f4       	brcc	.+16     	; 0x2faa <sprintf_+0x608>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1026
            out(' ', buffer, idx++, maxlen);
    2f9a:	2f ef       	ldi	r18, 0xFF	; 255
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	6a a1       	ldd	r22, Y+34	; 0x22
    2fa0:	7b a1       	ldd	r23, Y+35	; 0x23
    2fa2:	80 e2       	ldi	r24, 0x20	; 32
    2fa4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
    2fa8:	eb cf       	rjmp	.-42     	; 0x2f80 <sprintf_+0x5de>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1030
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2faa:	1a 01       	movw	r2, r20
    2fac:	2f ef       	ldi	r18, 0xFF	; 255
    2fae:	22 1a       	sub	r2, r18
    2fb0:	32 0a       	sbc	r3, r18
    2fb2:	78 01       	movw	r14, r16
    2fb4:	32 e0       	ldi	r19, 0x02	; 2
    2fb6:	e3 0e       	add	r14, r19
    2fb8:	f1 1c       	adc	r15, r1
    2fba:	2f ef       	ldi	r18, 0xFF	; 255
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	6a a1       	ldd	r22, Y+34	; 0x22
    2fc0:	7b a1       	ldd	r23, Y+35	; 0x23
    2fc2:	d8 01       	movw	r26, r16
    2fc4:	8c 91       	ld	r24, X
    2fc6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1032
        // post padding
        if (flags & FLAGS_LEFT) {
    2fca:	89 28       	or	r8, r9
    2fcc:	99 f0       	breq	.+38     	; 0x2ff4 <sprintf_+0x652>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1033
          while (l++ < width) {
    2fce:	c6 14       	cp	r12, r6
    2fd0:	d7 04       	cpc	r13, r7
    2fd2:	80 f4       	brcc	.+32     	; 0x2ff4 <sprintf_+0x652>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1034
            out(' ', buffer, idx++, maxlen);
    2fd4:	81 01       	movw	r16, r2
    2fd6:	0f 5f       	subi	r16, 0xFF	; 255
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	2f ef       	ldi	r18, 0xFF	; 255
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	a1 01       	movw	r20, r2
    2fe0:	6a a1       	ldd	r22, Y+34	; 0x22
    2fe2:	7b a1       	ldd	r23, Y+35	; 0x23
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
    2fea:	bf ef       	ldi	r27, 0xFF	; 255
    2fec:	cb 1a       	sub	r12, r27
    2fee:	db 0a       	sbc	r13, r27
sprintf_():
    2ff0:	18 01       	movw	r2, r16
    2ff2:	ed cf       	rjmp	.-38     	; 0x2fce <sprintf_+0x62c>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1030
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2ff4:	87 01       	movw	r16, r14
    2ff6:	f4 cc       	rjmp	.-1560   	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1042
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	32 96       	adiw	r30, 0x02	; 2
    2ffc:	fe 83       	std	Y+6, r31	; 0x06
    2ffe:	ed 83       	std	Y+5, r30	; 0x05
    3000:	d8 01       	movw	r26, r16
    3002:	0d 91       	ld	r16, X+
    3004:	1c 91       	ld	r17, X
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1043
        if (p == NULL) {
    3006:	01 15       	cp	r16, r1
    3008:	11 05       	cpc	r17, r1
    300a:	79 f4       	brne	.+30     	; 0x302a <sprintf_+0x688>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1044
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
    300c:	65 01       	movw	r12, r10
    300e:	73 01       	movw	r14, r6
    3010:	06 e0       	ldi	r16, 0x06	; 6
    3012:	10 e0       	ldi	r17, 0x00	; 0
    3014:	22 e7       	ldi	r18, 0x72	; 114
    3016:	32 e0       	ldi	r19, 0x02	; 2
    3018:	a1 01       	movw	r20, r2
    301a:	6a a1       	ldd	r22, Y+34	; 0x22
    301c:	7b a1       	ldd	r23, Y+35	; 0x23
    301e:	8c e2       	ldi	r24, 0x2C	; 44
    3020:	9a e0       	ldi	r25, 0x0A	; 10
    3022:	0e 94 bb 01 	call	0x376	; 0x376 <out_rev_(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int) [clone .constprop.47]>
    3026:	1c 01       	movw	r2, r24
    3028:	53 ce       	rjmp	.-858    	; 0x2cd0 <sprintf_+0x32e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1047
        }
        else {
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
    302a:	92 01       	movw	r18, r4
    302c:	41 14       	cp	r4, r1
    302e:	51 04       	cpc	r5, r1
    3030:	11 f4       	brne	.+4      	; 0x3036 <sprintf_+0x694>
sprintf_():
    3032:	2f ef       	ldi	r18, 0xFF	; 255
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	f8 01       	movw	r30, r16
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	af 01       	movw	r20, r30
    303e:	4f 5f       	subi	r20, 0xFF	; 255
    3040:	5f 4f       	sbci	r21, 0xFF	; 255
strnlen_s_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:267
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int strnlen_s_(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    3042:	60 81       	ld	r22, Z
    3044:	66 23       	and	r22, r22
    3046:	31 f0       	breq	.+12     	; 0x3054 <sprintf_+0x6b2>
    3048:	82 17       	cp	r24, r18
    304a:	93 07       	cpc	r25, r19
    304c:	19 f0       	breq	.+6      	; 0x3054 <sprintf_+0x6b2>
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	fa 01       	movw	r30, r20
    3052:	f4 cf       	rjmp	.-24     	; 0x303c <sprintf_+0x69a>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:268
  return (unsigned int)(s - str);
    3054:	e0 1b       	sub	r30, r16
    3056:	f1 0b       	sbc	r31, r17
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1049
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
        }
        else {
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
          // pre padding
          if (flags & FLAGS_PRECISION) {
    3058:	95 01       	movw	r18, r10
    305a:	22 27       	eor	r18, r18
    305c:	34 70       	andi	r19, 0x04	; 4
    305e:	3a 83       	std	Y+2, r19	; 0x02
    3060:	29 83       	std	Y+1, r18	; 0x01
    3062:	b2 fe       	sbrs	r11, 2
    3064:	04 c0       	rjmp	.+8      	; 0x306e <sprintf_+0x6cc>
    3066:	4e 16       	cp	r4, r30
    3068:	5f 06       	cpc	r5, r31
    306a:	08 f4       	brcc	.+2      	; 0x306e <sprintf_+0x6cc>
    306c:	f2 01       	movw	r30, r4
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1052
            l = (l < precision ? l : precision);
          }
          if (!(flags & FLAGS_LEFT)) {
    306e:	45 01       	movw	r8, r10
    3070:	32 e0       	ldi	r19, 0x02	; 2
    3072:	83 22       	and	r8, r19
    3074:	99 24       	eor	r9, r9
    3076:	7f 01       	movw	r14, r30
    3078:	a1 01       	movw	r20, r2
    307a:	a1 fc       	sbrc	r10, 1
    307c:	15 c0       	rjmp	.+42     	; 0x30a8 <sprintf_+0x706>
    307e:	2e 1a       	sub	r2, r30
    3080:	3f 0a       	sbc	r3, r31
    3082:	a1 01       	movw	r20, r2
    3084:	4e 0f       	add	r20, r30
    3086:	5f 1f       	adc	r21, r31
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1053
            while (l++ < width) {
    3088:	7f 01       	movw	r14, r30
    308a:	8f ef       	ldi	r24, 0xFF	; 255
    308c:	e8 1a       	sub	r14, r24
    308e:	f8 0a       	sbc	r15, r24
    3090:	e6 15       	cp	r30, r6
    3092:	f7 05       	cpc	r31, r7
    3094:	48 f4       	brcc	.+18     	; 0x30a8 <sprintf_+0x706>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1054
              out(' ', buffer, idx++, maxlen);
    3096:	2f ef       	ldi	r18, 0xFF	; 255
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	6a a1       	ldd	r22, Y+34	; 0x22
    309c:	7b a1       	ldd	r23, Y+35	; 0x23
    309e:	80 e2       	ldi	r24, 0x20	; 32
    30a0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1053
          // pre padding
          if (flags & FLAGS_PRECISION) {
            l = (l < precision ? l : precision);
          }
          if (!(flags & FLAGS_LEFT)) {
            while (l++ < width) {
    30a4:	f7 01       	movw	r30, r14
    30a6:	ed cf       	rjmp	.-38     	; 0x3082 <sprintf_+0x6e0>
    30a8:	6a 01       	movw	r12, r20
    30aa:	c0 1a       	sub	r12, r16
    30ac:	d1 0a       	sbc	r13, r17
    30ae:	a6 01       	movw	r20, r12
    30b0:	40 0f       	add	r20, r16
    30b2:	51 1f       	adc	r21, r17
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1058
              out(' ', buffer, idx++, maxlen);
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    30b4:	d8 01       	movw	r26, r16
    30b6:	8d 91       	ld	r24, X+
    30b8:	8d 01       	movw	r16, r26
    30ba:	88 23       	and	r24, r24
    30bc:	89 f0       	breq	.+34     	; 0x30e0 <sprintf_+0x73e>
    30be:	e9 81       	ldd	r30, Y+1	; 0x01
    30c0:	fa 81       	ldd	r31, Y+2	; 0x02
    30c2:	ef 2b       	or	r30, r31
    30c4:	31 f0       	breq	.+12     	; 0x30d2 <sprintf_+0x730>
    30c6:	92 01       	movw	r18, r4
    30c8:	21 50       	subi	r18, 0x01	; 1
    30ca:	31 09       	sbc	r19, r1
    30cc:	45 28       	or	r4, r5
    30ce:	41 f0       	breq	.+16     	; 0x30e0 <sprintf_+0x73e>
    30d0:	29 01       	movw	r4, r18
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1059
            out(*(p++), buffer, idx++, maxlen);
    30d2:	2f ef       	ldi	r18, 0xFF	; 255
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	6a a1       	ldd	r22, Y+34	; 0x22
    30d8:	7b a1       	ldd	r23, Y+35	; 0x23
    30da:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
    30de:	e7 cf       	rjmp	.-50     	; 0x30ae <sprintf_+0x70c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1062
          }
          // post padding
          if (flags & FLAGS_LEFT) {
    30e0:	1a 01       	movw	r2, r20
    30e2:	89 28       	or	r8, r9
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <sprintf_+0x746>
    30e6:	f4 cd       	rjmp	.-1048   	; 0x2cd0 <sprintf_+0x32e>
    30e8:	e4 1a       	sub	r14, r20
    30ea:	f5 0a       	sbc	r15, r21
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1063
            while (l++ < width) {
    30ec:	c7 01       	movw	r24, r14
    30ee:	82 0d       	add	r24, r2
    30f0:	93 1d       	adc	r25, r3
    30f2:	86 15       	cp	r24, r6
    30f4:	97 05       	cpc	r25, r7
    30f6:	08 f0       	brcs	.+2      	; 0x30fa <sprintf_+0x758>
    30f8:	eb cd       	rjmp	.-1066   	; 0x2cd0 <sprintf_+0x32e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1064
              out(' ', buffer, idx++, maxlen);
    30fa:	81 01       	movw	r16, r2
    30fc:	0f 5f       	subi	r16, 0xFF	; 255
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	2f ef       	ldi	r18, 0xFF	; 255
    3102:	3f ef       	ldi	r19, 0xFF	; 255
    3104:	a1 01       	movw	r20, r2
    3106:	6a a1       	ldd	r22, Y+34	; 0x22
    3108:	7b a1       	ldd	r23, Y+35	; 0x23
    310a:	80 e2       	ldi	r24, 0x20	; 32
    310c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
sprintf_():
    3110:	18 01       	movw	r2, r16
    3112:	ec cf       	rjmp	.-40     	; 0x30ec <sprintf_+0x74a>
_vsnprintf():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1076

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
        uintptr_t value = (uintptr_t)va_arg(va, void*);
        idx = (value == (uintptr_t) NULL) ?
    3114:	df 92       	push	r13
    3116:	cf 92       	push	r12
    3118:	1f 92       	push	r1
    311a:	b6 e0       	ldi	r27, 0x06	; 6
    311c:	bf 93       	push	r27
    311e:	5f 92       	push	r5
    3120:	4f 92       	push	r4
    3122:	30 e1       	ldi	r19, 0x10	; 16
    3124:	83 2e       	mov	r8, r19
    3126:	a1 2c       	mov	r10, r1
    3128:	68 01       	movw	r12, r16
    312a:	e1 2c       	mov	r14, r1
    312c:	f1 2c       	mov	r15, r1
    312e:	00 e0       	ldi	r16, 0x00	; 0
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	a1 01       	movw	r20, r2
    3138:	6a a1       	ldd	r22, Y+34	; 0x22
    313a:	7b a1       	ldd	r23, Y+35	; 0x23
    313c:	8c e2       	ldi	r24, 0x2C	; 44
    313e:	9a e0       	ldi	r25, 0x0A	; 10
    3140:	0e 94 45 02 	call	0x48a	; 0x48a <print_integer(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned char, unsigned int, unsigned int, unsigned int) [clone .constprop.45]>
    3144:	1c 01       	movw	r2, r24
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	fd cd       	rjmp	.-1030   	; 0x2d4e <sprintf_+0x3ac>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1094
      // engineer a write to an arbitrary location, of a value the caller
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(va, char*))      = (char) idx;
        else if  (flags & FLAGS_SHORT)     *(va_arg(va, short*))     = (short) idx;
    3154:	a7 fe       	sbrs	r10, 7
    3156:	03 c0       	rjmp	.+6      	; 0x315e <sprintf_+0x7bc>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1099
        else if  (flags & FLAGS_LONG)      *(va_arg(va, long*))      = (long) idx;
#if PRINTF_SUPPORT_LONG_LONG
        else if  (flags & FLAGS_LONG_LONG) *(va_arg(va, long long*)) = (long long int) idx;
#endif // PRINTF_SUPPORT_LONG_LONG
        else                               *(va_arg(va, int*))       = (int) idx;
    3158:	31 82       	std	Z+1, r3	; 0x01
    315a:	20 82       	st	Z, r2
    315c:	41 cc       	rjmp	.-1918   	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1095
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(va, char*))      = (char) idx;
        else if  (flags & FLAGS_SHORT)     *(va_arg(va, short*))     = (short) idx;
        else if  (flags & FLAGS_LONG)      *(va_arg(va, long*))      = (long) idx;
    315e:	b0 fe       	sbrs	r11, 0
    3160:	08 c0       	rjmp	.+16     	; 0x3172 <sprintf_+0x7d0>
    3162:	c1 01       	movw	r24, r2
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	a0 e0       	ldi	r26, 0x00	; 0
    3168:	80 83       	st	Z, r24
    316a:	91 83       	std	Z+1, r25	; 0x01
    316c:	a2 83       	std	Z+2, r26	; 0x02
    316e:	b3 83       	std	Z+3, r27	; 0x03
    3170:	37 cc       	rjmp	.-1938   	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1097
#if PRINTF_SUPPORT_LONG_LONG
        else if  (flags & FLAGS_LONG_LONG) *(va_arg(va, long long*)) = (long long int) idx;
    3172:	b1 fe       	sbrs	r11, 1
    3174:	f1 cf       	rjmp	.-30     	; 0x3158 <sprintf_+0x7b6>
    3176:	41 01       	movw	r8, r2
    3178:	20 82       	st	Z, r2
    317a:	91 82       	std	Z+1, r9	; 0x01
    317c:	12 82       	std	Z+2, r1	; 0x02
    317e:	13 82       	std	Z+3, r1	; 0x03
    3180:	14 82       	std	Z+4, r1	; 0x04
    3182:	15 82       	std	Z+5, r1	; 0x05
    3184:	16 82       	std	Z+6, r1	; 0x06
    3186:	17 82       	std	Z+7, r1	; 0x07
    3188:	2b cc       	rjmp	.-1962   	; 0x29e0 <sprintf_+0x3e>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1113
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    318a:	a1 01       	movw	r20, r2
    318c:	ef ef       	ldi	r30, 0xFF	; 255
    318e:	2e 16       	cp	r2, r30
    3190:	3e 06       	cpc	r3, r30
    3192:	11 f4       	brne	.+4      	; 0x3198 <sprintf_+0x7f6>
sprintf_():
    3194:	4e ef       	ldi	r20, 0xFE	; 254
    3196:	5f ef       	ldi	r21, 0xFF	; 255
_vsnprintf():
    3198:	2f ef       	ldi	r18, 0xFF	; 255
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	6a a1       	ldd	r22, Y+34	; 0x22
    319e:	7b a1       	ldd	r23, Y+35	; 0x23
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <out_buffer(char, void*, unsigned int, unsigned int)>
sprintf_():
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:1140
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(out_buffer, buffer, (size_t)-1, format, va);
  va_end(va);
  return ret;
}
    31a6:	c1 01       	movw	r24, r2
    31a8:	2c 96       	adiw	r28, 0x0c	; 12
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	7f 90       	pop	r7
    31ce:	6f 90       	pop	r6
    31d0:	5f 90       	pop	r5
    31d2:	4f 90       	pop	r4
    31d4:	3f 90       	pop	r3
    31d6:	2f 90       	pop	r2
    31d8:	08 95       	ret
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:942
        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
          base = BASE_HEX;
        }
        else if (*format == 'o') {
          base =  BASE_OCTAL;
    31da:	28 e0       	ldi	r18, 0x08	; 8
    31dc:	82 2e       	mov	r8, r18
    31de:	17 cd       	rjmp	.-1490   	; 0x2c0e <sprintf_+0x26c>
c:\users\admin\documents\arduino\libraries\libprintf\extras\printf/printf.c:945
        }
        else if (*format == 'b') {
          base =  BASE_BINARY;
    31e0:	92 e0       	ldi	r25, 0x02	; 2
    31e2:	89 2e       	mov	r8, r25
    31e4:	14 cd       	rjmp	.-1496   	; 0x2c0e <sprintf_+0x26c>

000031e6 <Standby()>:
_Z7Standbyv():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:214
  Pressure = (7.5 * avgVolts.GetAverage()) - 3.9; 
  Pressure = (1.044227 * Pressure) + 0.061628;
  Pressure = Factor_Corr_Press * Pressure;
}

void Standby(void) {
    31e6:	cf 92       	push	r12
    31e8:	df 92       	push	r13
    31ea:	ef 92       	push	r14
    31ec:	ff 92       	push	r15
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	65 97       	sbiw	r28, 0x15	; 21
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:217
  char txt[21];
  
  sprintf(txt,"Listo              ");
    3206:	8f e7       	ldi	r24, 0x7F	; 127
    3208:	92 e0       	ldi	r25, 0x02	; 2
    320a:	9f 93       	push	r25
    320c:	8f 93       	push	r24
    320e:	8e 01       	movw	r16, r28
    3210:	0f 5f       	subi	r16, 0xFF	; 255
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	1f 93       	push	r17
    3216:	0f 93       	push	r16
    3218:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:218
  vfd.Print(txt,0);
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	c8 01       	movw	r24, r16
    3220:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:220

  sprintf(txt,"%1.1f C  ", Temperature);
    3224:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <Temperature+0x3>
    3228:	8f 93       	push	r24
    322a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    322e:	8f 93       	push	r24
    3230:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <Temperature+0x1>
    3234:	8f 93       	push	r24
    3236:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Temperature>
    323a:	8f 93       	push	r24
    323c:	83 e9       	ldi	r24, 0x93	; 147
    323e:	92 e0       	ldi	r25, 0x02	; 2
    3240:	9f 93       	push	r25
    3242:	8f 93       	push	r24
    3244:	1f 93       	push	r17
    3246:	0f 93       	push	r16
    3248:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:221
  vfd.Print(txt,20);
    324c:	64 e1       	ldi	r22, 0x14	; 20
    324e:	c8 01       	movw	r24, r16
    3250:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:225
  // Pos_VFD(20);
  // Serial1.print(txt);

  if (Pressure >= -0.4 && Pressure <= 0.4) {
    3254:	f0 90 92 03 	lds	r15, 0x0392	; 0x800392 <Pressure>
    3258:	e0 90 93 03 	lds	r14, 0x0393	; 0x800393 <Pressure+0x1>
    325c:	d0 90 94 03 	lds	r13, 0x0394	; 0x800394 <Pressure+0x2>
    3260:	c0 90 95 03 	lds	r12, 0x0395	; 0x800395 <Pressure+0x3>
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	2d ec       	ldi	r18, 0xCD	; 205
    3270:	3c ec       	ldi	r19, 0xCC	; 204
    3272:	4c ec       	ldi	r20, 0xCC	; 204
    3274:	5e eb       	ldi	r21, 0xBE	; 190
    3276:	d7 01       	movw	r26, r14
    3278:	f6 01       	movw	r30, r12
    327a:	6b 2f       	mov	r22, r27
    327c:	7a 2f       	mov	r23, r26
    327e:	8f 2f       	mov	r24, r31
    3280:	9e 2f       	mov	r25, r30
    3282:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    3286:	87 fd       	sbrc	r24, 7
    3288:	3c c0       	rjmp	.+120    	; 0x3302 <Standby()+0x11c>
    328a:	2d ec       	ldi	r18, 0xCD	; 205
    328c:	3c ec       	ldi	r19, 0xCC	; 204
    328e:	4c ec       	ldi	r20, 0xCC	; 204
    3290:	5e e3       	ldi	r21, 0x3E	; 62
    3292:	d7 01       	movw	r26, r14
    3294:	f6 01       	movw	r30, r12
    3296:	6b 2f       	mov	r22, r27
    3298:	7a 2f       	mov	r23, r26
    329a:	8f 2f       	mov	r24, r31
    329c:	9e 2f       	mov	r25, r30
    329e:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    32a2:	18 16       	cp	r1, r24
    32a4:	74 f1       	brlt	.+92     	; 0x3302 <Standby()+0x11c>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:226
    sprintf(txt," %1.1f Psi", 0.0);
    32a6:	1f 92       	push	r1
    32a8:	1f 92       	push	r1
    32aa:	1f 92       	push	r1
    32ac:	1f 92       	push	r1
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:229
    vfd.Print(txt,40-strlen(txt)+0);
  } else {
    sprintf(txt," %1.1f Psi", Pressure);
    32ae:	8d e9       	ldi	r24, 0x9D	; 157
    32b0:	92 e0       	ldi	r25, 0x02	; 2
    32b2:	9f 93       	push	r25
    32b4:	8f 93       	push	r24
    32b6:	1f 93       	push	r17
    32b8:	0f 93       	push	r16
    32ba:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:230
    vfd.Print(txt,40-strlen(txt)+0);
    32be:	f8 01       	movw	r30, r16
    32c0:	01 90       	ld	r0, Z+
    32c2:	00 20       	and	r0, r0
    32c4:	e9 f7       	brne	.-6      	; 0x32c0 <Standby()+0xda>
    32c6:	60 2f       	mov	r22, r16
    32c8:	6e 1b       	sub	r22, r30
    32ca:	67 5d       	subi	r22, 0xD7	; 215
    32cc:	c8 01       	movw	r24, r16
    32ce:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:233
  }

  digitalWrite(VENT_SOLENOID,VALVE_OPEN);
    32dc:	61 e0       	ldi	r22, 0x01	; 1
    32de:	88 e1       	ldi	r24, 0x18	; 24
    32e0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:235
// PrintRTDStatus(rtd.getStatus());
}
    32e4:	65 96       	adiw	r28, 0x15	; 21
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	ff 90       	pop	r15
    32fa:	ef 90       	pop	r14
    32fc:	df 90       	pop	r13
    32fe:	cf 90       	pop	r12
    3300:	08 95       	ret
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:229

  if (Pressure >= -0.4 && Pressure <= 0.4) {
    sprintf(txt," %1.1f Psi", 0.0);
    vfd.Print(txt,40-strlen(txt)+0);
  } else {
    sprintf(txt," %1.1f Psi", Pressure);
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	d1 cf       	rjmp	.-94     	; 0x32ae <Standby()+0xc8>

0000330c <__vector_23>:
__vector_23():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    330c:	1f 92       	push	r1
    330e:	0f 92       	push	r0
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	0f 92       	push	r0
    3314:	11 24       	eor	r1, r1
    3316:	2f 93       	push	r18
    3318:	3f 93       	push	r19
    331a:	8f 93       	push	r24
    331c:	9f 93       	push	r25
    331e:	af 93       	push	r26
    3320:	bf 93       	push	r27
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    3322:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <timer0_millis>
    3326:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <timer0_millis+0x1>
    332a:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <timer0_millis+0x2>
    332e:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    3332:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    3336:	23 e0       	ldi	r18, 0x03	; 3
    3338:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    333a:	2d 37       	cpi	r18, 0x7D	; 125
    333c:	68 f1       	brcs	.+90     	; 0x3398 <__vector_23+0x8c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    333e:	26 e8       	ldi	r18, 0x86	; 134
    3340:	23 0f       	add	r18, r19
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    3342:	02 96       	adiw	r24, 0x02	; 2
    3344:	a1 1d       	adc	r26, r1
    3346:	b1 1d       	adc	r27, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    3348:	20 93 9c 03 	sts	0x039C, r18	; 0x80039c <timer0_fract>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    334c:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <timer0_millis>
    3350:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <timer0_millis+0x1>
    3354:	a0 93 9f 03 	sts	0x039F, r26	; 0x80039f <timer0_millis+0x2>
    3358:	b0 93 a0 03 	sts	0x03A0, r27	; 0x8003a0 <timer0_millis+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    335c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <timer0_overflow_count>
    3360:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <timer0_overflow_count+0x1>
    3364:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <timer0_overflow_count+0x2>
    3368:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <timer0_overflow_count+0x3>
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	a1 1d       	adc	r26, r1
    3370:	b1 1d       	adc	r27, r1
    3372:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <timer0_overflow_count>
    3376:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <timer0_overflow_count+0x1>
    337a:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <timer0_overflow_count+0x2>
    337e:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <timer0_overflow_count+0x3>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    3382:	bf 91       	pop	r27
    3384:	af 91       	pop	r26
    3386:	9f 91       	pop	r25
    3388:	8f 91       	pop	r24
    338a:	3f 91       	pop	r19
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	0f 90       	pop	r0
    3394:	1f 90       	pop	r1
    3396:	18 95       	reti
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    3398:	01 96       	adiw	r24, 0x01	; 1
    339a:	a1 1d       	adc	r26, r1
    339c:	b1 1d       	adc	r27, r1
    339e:	d4 cf       	rjmp	.-88     	; 0x3348 <__vector_23+0x3c>

000033a0 <__vector_55>:
__vector_55():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:45
{
  Serial3._rx_complete_irq();
}

ISR(USART3_UDRE_vect)
{
    33a0:	1f 92       	push	r1
    33a2:	0f 92       	push	r0
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	0f 92       	push	r0
    33a8:	11 24       	eor	r1, r1
    33aa:	0b b6       	in	r0, 0x3b	; 59
    33ac:	0f 92       	push	r0
    33ae:	2f 93       	push	r18
    33b0:	3f 93       	push	r19
    33b2:	4f 93       	push	r20
    33b4:	5f 93       	push	r21
    33b6:	6f 93       	push	r22
    33b8:	7f 93       	push	r23
    33ba:	8f 93       	push	r24
    33bc:	9f 93       	push	r25
    33be:	af 93       	push	r26
    33c0:	bf 93       	push	r27
    33c2:	ef 93       	push	r30
    33c4:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:46
  Serial3._tx_udr_empty_irq();
    33c6:	87 ea       	ldi	r24, 0xA7	; 167
    33c8:	93 e0       	ldi	r25, 0x03	; 3
    33ca:	0e 94 12 09 	call	0x1224	; 0x1224 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:47
}
    33ce:	ff 91       	pop	r31
    33d0:	ef 91       	pop	r30
    33d2:	bf 91       	pop	r27
    33d4:	af 91       	pop	r26
    33d6:	9f 91       	pop	r25
    33d8:	8f 91       	pop	r24
    33da:	7f 91       	pop	r23
    33dc:	6f 91       	pop	r22
    33de:	5f 91       	pop	r21
    33e0:	4f 91       	pop	r20
    33e2:	3f 91       	pop	r19
    33e4:	2f 91       	pop	r18
    33e6:	0f 90       	pop	r0
    33e8:	0b be       	out	0x3b, r0	; 59
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0
    33f0:	1f 90       	pop	r1
    33f2:	18 95       	reti

000033f4 <__vector_54>:
__vector_54():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:40
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    33f4:	1f 92       	push	r1
    33f6:	0f 92       	push	r0
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	0b b6       	in	r0, 0x3b	; 59
    3400:	0f 92       	push	r0
    3402:	2f 93       	push	r18
    3404:	8f 93       	push	r24
    3406:	9f 93       	push	r25
    3408:	ef 93       	push	r30
    340a:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    340c:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial3+0x10>
    3410:	f0 91 b8 03 	lds	r31, 0x03B8	; 0x8003b8 <Serial3+0x11>
    3414:	80 81       	ld	r24, Z
    3416:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <Serial3+0x16>
    341a:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <Serial3+0x17>
    341e:	82 fd       	sbrc	r24, 2
    3420:	1d c0       	rjmp	.+58     	; 0x345c <__vector_54+0x68>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3422:	90 81       	ld	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3424:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <Serial3+0x19>
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    342c:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <Serial3+0x1a>
    3430:	82 17       	cp	r24, r18
    3432:	41 f0       	breq	.+16     	; 0x3444 <__vector_54+0x50>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    3434:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <Serial3+0x19>
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	e9 55       	subi	r30, 0x59	; 89
    343c:	fc 4f       	sbci	r31, 0xFC	; 252
    343e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    3440:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <Serial3+0x19>
__vector_54():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial3.cpp:42
  Serial3._rx_complete_irq();
}
    3444:	ff 91       	pop	r31
    3446:	ef 91       	pop	r30
    3448:	9f 91       	pop	r25
    344a:	8f 91       	pop	r24
    344c:	2f 91       	pop	r18
    344e:	0f 90       	pop	r0
    3450:	0b be       	out	0x3b, r0	; 59
    3452:	0f 90       	pop	r0
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	0f 90       	pop	r0
    3458:	1f 90       	pop	r1
    345a:	18 95       	reti
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    345c:	80 81       	ld	r24, Z
    345e:	f2 cf       	rjmp	.-28     	; 0x3444 <__vector_54+0x50>

00003460 <__vector_26>:
__vector_26():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3460:	1f 92       	push	r1
    3462:	0f 92       	push	r0
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	0b b6       	in	r0, 0x3b	; 59
    346c:	0f 92       	push	r0
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    3486:	84 e4       	ldi	r24, 0x44	; 68
    3488:	94 e0       	ldi	r25, 0x04	; 4
    348a:	0e 94 12 09 	call	0x1224	; 0x1224 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    348e:	ff 91       	pop	r31
    3490:	ef 91       	pop	r30
    3492:	bf 91       	pop	r27
    3494:	af 91       	pop	r26
    3496:	9f 91       	pop	r25
    3498:	8f 91       	pop	r24
    349a:	7f 91       	pop	r23
    349c:	6f 91       	pop	r22
    349e:	5f 91       	pop	r21
    34a0:	4f 91       	pop	r20
    34a2:	3f 91       	pop	r19
    34a4:	2f 91       	pop	r18
    34a6:	0f 90       	pop	r0
    34a8:	0b be       	out	0x3b, r0	; 59
    34aa:	0f 90       	pop	r0
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	0f 90       	pop	r0
    34b0:	1f 90       	pop	r1
    34b2:	18 95       	reti

000034b4 <__vector_25>:
__vector_25():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    34b4:	1f 92       	push	r1
    34b6:	0f 92       	push	r0
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	0f 92       	push	r0
    34bc:	11 24       	eor	r1, r1
    34be:	0b b6       	in	r0, 0x3b	; 59
    34c0:	0f 92       	push	r0
    34c2:	2f 93       	push	r18
    34c4:	8f 93       	push	r24
    34c6:	9f 93       	push	r25
    34c8:	ef 93       	push	r30
    34ca:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    34cc:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <Serial+0x10>
    34d0:	f0 91 55 04 	lds	r31, 0x0455	; 0x800455 <Serial+0x11>
    34d4:	80 81       	ld	r24, Z
    34d6:	e0 91 5a 04 	lds	r30, 0x045A	; 0x80045a <Serial+0x16>
    34da:	f0 91 5b 04 	lds	r31, 0x045B	; 0x80045b <Serial+0x17>
    34de:	82 fd       	sbrc	r24, 2
    34e0:	1d c0       	rjmp	.+58     	; 0x351c <__vector_25+0x68>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    34e2:	90 81       	ld	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    34e4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <Serial+0x19>
    34e8:	8f 5f       	subi	r24, 0xFF	; 255
    34ea:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    34ec:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <Serial+0x1a>
    34f0:	82 17       	cp	r24, r18
    34f2:	41 f0       	breq	.+16     	; 0x3504 <__vector_25+0x50>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    34f4:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <Serial+0x19>
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	ec 5b       	subi	r30, 0xBC	; 188
    34fc:	fb 4f       	sbci	r31, 0xFB	; 251
    34fe:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    3500:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <Serial+0x19>
__vector_25():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    3504:	ff 91       	pop	r31
    3506:	ef 91       	pop	r30
    3508:	9f 91       	pop	r25
    350a:	8f 91       	pop	r24
    350c:	2f 91       	pop	r18
    350e:	0f 90       	pop	r0
    3510:	0b be       	out	0x3b, r0	; 59
    3512:	0f 90       	pop	r0
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	0f 90       	pop	r0
    3518:	1f 90       	pop	r1
    351a:	18 95       	reti
_rx_complete_irq():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    351c:	80 81       	ld	r24, Z
    351e:	f2 cf       	rjmp	.-28     	; 0x3504 <__vector_25+0x50>

00003520 <__vector_39>:
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:528
  }
  return(flag);
}

ISR(TWI_vect)
{
    3520:	1f 92       	push	r1
    3522:	0f 92       	push	r0
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	0f 92       	push	r0
    3528:	11 24       	eor	r1, r1
    352a:	0b b6       	in	r0, 0x3b	; 59
    352c:	0f 92       	push	r0
    352e:	2f 93       	push	r18
    3530:	3f 93       	push	r19
    3532:	4f 93       	push	r20
    3534:	5f 93       	push	r21
    3536:	6f 93       	push	r22
    3538:	7f 93       	push	r23
    353a:	8f 93       	push	r24
    353c:	9f 93       	push	r25
    353e:	af 93       	push	r26
    3540:	bf 93       	push	r27
    3542:	ef 93       	push	r30
    3544:	ff 93       	push	r31
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
    3546:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    354a:	88 7f       	andi	r24, 0xF8	; 248
    354c:	80 36       	cpi	r24, 0x60	; 96
    354e:	09 f4       	brne	.+2      	; 0x3552 <__vector_39+0x32>
    3550:	4d c0       	rjmp	.+154    	; 0x35ec <__vector_39+0xcc>
    3552:	08 f0       	brcs	.+2      	; 0x3556 <__vector_39+0x36>
    3554:	40 c0       	rjmp	.+128    	; 0x35d6 <__vector_39+0xb6>
    3556:	88 32       	cpi	r24, 0x28	; 40
    3558:	09 f4       	brne	.+2      	; 0x355c <__vector_39+0x3c>
    355a:	a7 c0       	rjmp	.+334    	; 0x36aa <__vector_39+0x18a>
    355c:	28 f5       	brcc	.+74     	; 0x35a8 <__vector_39+0x88>
    355e:	80 31       	cpi	r24, 0x10	; 16
    3560:	09 f4       	brne	.+2      	; 0x3564 <__vector_39+0x44>
    3562:	9b c0       	rjmp	.+310    	; 0x369a <__vector_39+0x17a>
    3564:	c8 f4       	brcc	.+50     	; 0x3598 <__vector_39+0x78>
    3566:	88 23       	and	r24, r24
    3568:	09 f4       	brne	.+2      	; 0x356c <__vector_39+0x4c>
    356a:	f1 c0       	rjmp	.+482    	; 0x374e <__vector_39+0x22e>
    356c:	88 30       	cpi	r24, 0x08	; 8
    356e:	09 f4       	brne	.+2      	; 0x3572 <__vector_39+0x52>
    3570:	94 c0       	rjmp	.+296    	; 0x369a <__vector_39+0x17a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0b be       	out	0x3b, r0	; 59
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3598:	88 31       	cpi	r24, 0x18	; 24
    359a:	09 f4       	brne	.+2      	; 0x359e <__vector_39+0x7e>
    359c:	86 c0       	rjmp	.+268    	; 0x36aa <__vector_39+0x18a>
    359e:	80 32       	cpi	r24, 0x20	; 32
    35a0:	41 f7       	brne	.-48     	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    35a2:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_error>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <__vector_39+0xb0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    35a8:	80 34       	cpi	r24, 0x40	; 64
    35aa:	09 f4       	brne	.+2      	; 0x35ae <__vector_39+0x8e>
    35ac:	97 c0       	rjmp	.+302    	; 0x36dc <__vector_39+0x1bc>
    35ae:	40 f4       	brcc	.+16     	; 0x35c0 <__vector_39+0xa0>
    35b0:	80 33       	cpi	r24, 0x30	; 48
    35b2:	b9 f3       	breq	.-18     	; 0x35a2 <__vector_39+0x82>
    35b4:	88 33       	cpi	r24, 0x38	; 56
    35b6:	e9 f6       	brne	.-70     	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    35b8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_error>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35bc:	85 ec       	ldi	r24, 0xC5	; 197
    35be:	a8 c0       	rjmp	.+336    	; 0x3710 <__vector_39+0x1f0>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    35c0:	80 35       	cpi	r24, 0x50	; 80
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <__vector_39+0xa6>
    35c4:	81 c0       	rjmp	.+258    	; 0x36c8 <__vector_39+0x1a8>
    35c6:	88 35       	cpi	r24, 0x58	; 88
    35c8:	09 f4       	brne	.+2      	; 0x35cc <__vector_39+0xac>
    35ca:	90 c0       	rjmp	.+288    	; 0x36ec <__vector_39+0x1cc>
    35cc:	88 34       	cpi	r24, 0x48	; 72
    35ce:	89 f6       	brne	.-94     	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    35d0:	0e 94 ce 09 	call	0x139c	; 0x139c <twi_stop>
    35d4:	ce cf       	rjmp	.-100    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    35d6:	88 39       	cpi	r24, 0x98	; 152
    35d8:	09 f4       	brne	.+2      	; 0x35dc <__vector_39+0xbc>
    35da:	86 c0       	rjmp	.+268    	; 0x36e8 <__vector_39+0x1c8>
    35dc:	38 f5       	brcc	.+78     	; 0x362c <__vector_39+0x10c>
    35de:	88 37       	cpi	r24, 0x78	; 120
    35e0:	29 f0       	breq	.+10     	; 0x35ec <__vector_39+0xcc>
    35e2:	50 f4       	brcc	.+20     	; 0x35f8 <__vector_39+0xd8>
    35e4:	88 36       	cpi	r24, 0x68	; 104
    35e6:	11 f0       	breq	.+4      	; 0x35ec <__vector_39+0xcc>
    35e8:	80 37       	cpi	r24, 0x70	; 112
    35ea:	19 f6       	brne	.-122    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    35ec:	83 e0       	ldi	r24, 0x03	; 3
    35ee:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    35f2:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <twi_rxBufferIndex>
    35f6:	55 c0       	rjmp	.+170    	; 0x36a2 <__vector_39+0x182>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    35f8:	88 38       	cpi	r24, 0x88	; 136
    35fa:	09 f4       	brne	.+2      	; 0x35fe <__vector_39+0xde>
    35fc:	75 c0       	rjmp	.+234    	; 0x36e8 <__vector_39+0x1c8>
    35fe:	80 39       	cpi	r24, 0x90	; 144
    3600:	19 f0       	breq	.+6      	; 0x3608 <__vector_39+0xe8>
    3602:	80 38       	cpi	r24, 0x80	; 128
    3604:	09 f0       	breq	.+2      	; 0x3608 <__vector_39+0xe8>
    3606:	b5 cf       	rjmp	.-150    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3608:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <twi_rxBufferIndex>
    360c:	80 32       	cpi	r24, 0x20	; 32
    360e:	08 f0       	brcs	.+2      	; 0x3612 <__vector_39+0xf2>
    3610:	6b c0       	rjmp	.+214    	; 0x36e8 <__vector_39+0x1c8>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3612:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <twi_rxBufferIndex>
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	8e 0f       	add	r24, r30
    361a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <twi_rxBufferIndex>
    361e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	e8 5b       	subi	r30, 0xB8	; 184
    3626:	fc 4f       	sbci	r31, 0xFC	; 252
    3628:	80 83       	st	Z, r24
    362a:	3b c0       	rjmp	.+118    	; 0x36a2 <__vector_39+0x182>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    362c:	80 3b       	cpi	r24, 0xB0	; 176
    362e:	39 f0       	breq	.+14     	; 0x363e <__vector_39+0x11e>
    3630:	d0 f4       	brcc	.+52     	; 0x3666 <__vector_39+0x146>
    3632:	80 3a       	cpi	r24, 0xA0	; 160
    3634:	09 f4       	brne	.+2      	; 0x3638 <__vector_39+0x118>
    3636:	71 c0       	rjmp	.+226    	; 0x371a <__vector_39+0x1fa>
    3638:	88 3a       	cpi	r24, 0xA8	; 168
    363a:	09 f0       	breq	.+2      	; 0x363e <__vector_39+0x11e>
    363c:	9a cf       	rjmp	.-204    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    363e:	84 e0       	ldi	r24, 0x04	; 4
    3640:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3644:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <twi_txBufferIndex>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3648:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_txBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	e0 e0       	ldi	r30, 0x00	; 0
    3650:	19 95       	eicall
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3652:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_txBufferLength>
    3656:	81 11       	cpse	r24, r1
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <__vector_39+0x158>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_txBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    3660:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <twi_txBuffer>
    3664:	09 c0       	rjmp	.+18     	; 0x3678 <__vector_39+0x158>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3666:	80 3c       	cpi	r24, 0xC0	; 192
    3668:	09 f4       	brne	.+2      	; 0x366c <__vector_39+0x14c>
    366a:	a8 cf       	rjmp	.-176    	; 0x35bc <__vector_39+0x9c>
    366c:	88 3c       	cpi	r24, 0xC8	; 200
    366e:	09 f4       	brne	.+2      	; 0x3672 <__vector_39+0x152>
    3670:	a5 cf       	rjmp	.-182    	; 0x35bc <__vector_39+0x9c>
    3672:	88 3b       	cpi	r24, 0xB8	; 184
    3674:	09 f0       	breq	.+2      	; 0x3678 <__vector_39+0x158>
    3676:	7d cf       	rjmp	.-262    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3678:	e0 91 47 03 	lds	r30, 0x0347	; 0x800347 <twi_txBufferIndex>
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	8e 0f       	add	r24, r30
    3680:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <twi_txBufferIndex>
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	ea 5d       	subi	r30, 0xDA	; 218
    3688:	fc 4f       	sbci	r31, 0xFC	; 252
    368a:	80 81       	ld	r24, Z
    368c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3690:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <twi_txBufferIndex>
    3694:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_txBufferLength>
    3698:	25 c0       	rjmp	.+74     	; 0x36e4 <__vector_39+0x1c4>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    369a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_slarw>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    369e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36a2:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    36a8:	64 cf       	rjmp	.-312    	; 0x3572 <__vector_39+0x52>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    36aa:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_masterBufferIndex>
    36ae:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_masterBufferLength>
    36b2:	98 17       	cp	r25, r24
    36b4:	28 f5       	brcc	.+74     	; 0x3700 <__vector_39+0x1e0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    36b6:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	8e 0f       	add	r24, r30
    36be:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	eb cf       	rjmp	.-42     	; 0x369e <__vector_39+0x17e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    36c8:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	8e 0f       	add	r24, r30
    36d0:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    36d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    36dc:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_masterBufferIndex>
    36e0:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_masterBufferLength>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    36e4:	98 17       	cp	r25, r24
    36e6:	e8 f2       	brcs	.-70     	; 0x36a2 <__vector_39+0x182>
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36e8:	85 e8       	ldi	r24, 0x85	; 133
    36ea:	dc cf       	rjmp	.-72     	; 0x36a4 <__vector_39+0x184>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    36ec:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_masterBufferIndex>
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	8e 0f       	add	r24, r30
    36f4:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_masterBufferIndex>
    36f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    3700:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <twi_sendStop>
    3704:	81 11       	cpse	r24, r1
    3706:	64 cf       	rjmp	.-312    	; 0x35d0 <__vector_39+0xb0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <twi_inRepStart>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    370e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3714:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    3718:	2c cf       	rjmp	.-424    	; 0x3572 <__vector_39+0x52>
twi_releaseBus():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:468
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    371a:	85 ec       	ldi	r24, 0xC5	; 197
    371c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:471

  // update twi state
  twi_state = TWI_READY;
    3720:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
__vector_39():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:631
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3724:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <twi_rxBufferIndex>
    3728:	80 32       	cpi	r24, 0x20	; 32
    372a:	30 f4       	brcc	.+12     	; 0x3738 <__vector_39+0x218>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    372c:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <twi_rxBufferIndex>
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	e8 5b       	subi	r30, 0xB8	; 184
    3734:	fc 4f       	sbci	r31, 0xFC	; 252
    3736:	10 82       	st	Z, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3738:	60 91 68 03 	lds	r22, 0x0368	; 0x800368 <twi_rxBufferIndex>
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	88 e4       	ldi	r24, 0x48	; 72
    3740:	93 e0       	ldi	r25, 0x03	; 3
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	e0 e0       	ldi	r30, 0x00	; 0
    3746:	19 95       	eicall
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3748:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <twi_rxBufferIndex>
    374c:	12 cf       	rjmp	.-476    	; 0x3572 <__vector_39+0x52>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    374e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <twi_error>
    3752:	3e cf       	rjmp	.-388    	; 0x35d0 <__vector_39+0xb0>

00003754 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2923>:
_GLOBAL__I_65535_0_MarketForge_Control.ino.cpp.o.2923():
    3754:	cf 92       	push	r12
    3756:	df 92       	push	r13
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <Serial3+0x3>
    3764:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <Serial3+0x2>
    3768:	48 ee       	ldi	r20, 0xE8	; 232
    376a:	53 e0       	ldi	r21, 0x03	; 3
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	40 93 ab 03 	sts	0x03AB, r20	; 0x8003ab <Serial3+0x4>
    3774:	50 93 ac 03 	sts	0x03AC, r21	; 0x8003ac <Serial3+0x5>
    3778:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <Serial3+0x6>
    377c:	70 93 ae 03 	sts	0x03AE, r23	; 0x8003ae <Serial3+0x7>
    3780:	82 e5       	ldi	r24, 0x52	; 82
    3782:	92 e0       	ldi	r25, 0x02	; 2
    3784:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <Serial3+0x1>
    3788:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <Serial3>
    378c:	25 e3       	ldi	r18, 0x35	; 53
    378e:	31 e0       	ldi	r19, 0x01	; 1
    3790:	30 93 b4 03 	sts	0x03B4, r19	; 0x8003b4 <Serial3+0xd>
    3794:	20 93 b3 03 	sts	0x03B3, r18	; 0x8003b3 <Serial3+0xc>
    3798:	24 e3       	ldi	r18, 0x34	; 52
    379a:	31 e0       	ldi	r19, 0x01	; 1
    379c:	30 93 b6 03 	sts	0x03B6, r19	; 0x8003b6 <Serial3+0xf>
    37a0:	20 93 b5 03 	sts	0x03B5, r18	; 0x8003b5 <Serial3+0xe>
    37a4:	20 e3       	ldi	r18, 0x30	; 48
    37a6:	31 e0       	ldi	r19, 0x01	; 1
    37a8:	30 93 b8 03 	sts	0x03B8, r19	; 0x8003b8 <Serial3+0x11>
    37ac:	20 93 b7 03 	sts	0x03B7, r18	; 0x8003b7 <Serial3+0x10>
    37b0:	21 e3       	ldi	r18, 0x31	; 49
    37b2:	31 e0       	ldi	r19, 0x01	; 1
    37b4:	30 93 ba 03 	sts	0x03BA, r19	; 0x8003ba <Serial3+0x13>
    37b8:	20 93 b9 03 	sts	0x03B9, r18	; 0x8003b9 <Serial3+0x12>
    37bc:	22 e3       	ldi	r18, 0x32	; 50
    37be:	31 e0       	ldi	r19, 0x01	; 1
    37c0:	30 93 bc 03 	sts	0x03BC, r19	; 0x8003bc <Serial3+0x15>
    37c4:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <Serial3+0x14>
    37c8:	26 e3       	ldi	r18, 0x36	; 54
    37ca:	31 e0       	ldi	r19, 0x01	; 1
    37cc:	30 93 be 03 	sts	0x03BE, r19	; 0x8003be <Serial3+0x17>
    37d0:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <Serial3+0x16>
    37d4:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <Serial3+0x19>
    37d8:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <Serial3+0x1a>
    37dc:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <Serial3+0x1b>
    37e0:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <Serial3+0x1c>
    37e4:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <Serial+0x3>
    37e8:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <Serial+0x2>
    37ec:	40 93 48 04 	sts	0x0448, r20	; 0x800448 <Serial+0x4>
    37f0:	50 93 49 04 	sts	0x0449, r21	; 0x800449 <Serial+0x5>
    37f4:	60 93 4a 04 	sts	0x044A, r22	; 0x80044a <Serial+0x6>
    37f8:	70 93 4b 04 	sts	0x044B, r23	; 0x80044b <Serial+0x7>
    37fc:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <Serial+0x1>
    3800:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <Serial>
    3804:	85 ec       	ldi	r24, 0xC5	; 197
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <Serial+0xd>
    380c:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <Serial+0xc>
    3810:	84 ec       	ldi	r24, 0xC4	; 196
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <Serial+0xf>
    3818:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <Serial+0xe>
    381c:	80 ec       	ldi	r24, 0xC0	; 192
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <Serial+0x11>
    3824:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <Serial+0x10>
    3828:	81 ec       	ldi	r24, 0xC1	; 193
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <Serial+0x13>
    3830:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <Serial+0x12>
    3834:	82 ec       	ldi	r24, 0xC2	; 194
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <Serial+0x15>
    383c:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <Serial+0x14>
    3840:	86 ec       	ldi	r24, 0xC6	; 198
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <Serial+0x17>
    3848:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <Serial+0x16>
    384c:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <Serial+0x19>
    3850:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <Serial+0x1a>
    3854:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <Serial+0x1b>
    3858:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <Serial+0x1c>
    385c:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <tempSensor+0x1>
    3860:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <tempSensor>
    3864:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <tempSensor+0x3>
    3868:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <tempSensor+0x2>
    386c:	80 e2       	ldi	r24, 0x20	; 32
    386e:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tempSensor+0xb>
    3872:	87 e1       	ldi	r24, 0x17	; 23
    3874:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <tempSensor+0xc>
    3878:	8f e1       	ldi	r24, 0x1F	; 31
    387a:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <tempSensor+0xe>
    387e:	8e e1       	ldi	r24, 0x1E	; 30
    3880:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tempSensor+0xd>
    3884:	e6 e7       	ldi	r30, 0x76	; 118
    3886:	f2 e0       	ldi	r31, 0x02	; 2
    3888:	e4 91       	lpm	r30, Z
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	ee 0f       	add	r30, r30
    388e:	ff 1f       	adc	r31, r31
    3890:	e4 5c       	subi	r30, 0xC4	; 196
    3892:	fd 4f       	sbci	r31, 0xFD	; 253
    3894:	85 91       	lpm	r24, Z+
    3896:	94 91       	lpm	r25, Z
    3898:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <tempSensor+0x16>
    389c:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <tempSensor+0x15>
    38a0:	e6 e0       	ldi	r30, 0x06	; 6
    38a2:	f2 e0       	ldi	r31, 0x02	; 2
    38a4:	e4 91       	lpm	r30, Z
    38a6:	e0 93 96 05 	sts	0x0596, r30	; 0x800596 <tempSensor+0x1a>
    38aa:	e4 e7       	ldi	r30, 0x74	; 116
    38ac:	f2 e0       	ldi	r31, 0x02	; 2
    38ae:	e4 91       	lpm	r30, Z
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	ee 0f       	add	r30, r30
    38b4:	ff 1f       	adc	r31, r31
    38b6:	e4 5c       	subi	r30, 0xC4	; 196
    38b8:	fd 4f       	sbci	r31, 0xFD	; 253
    38ba:	85 91       	lpm	r24, Z+
    38bc:	94 91       	lpm	r25, Z
    38be:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <tempSensor+0x10>
    38c2:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <tempSensor+0xf>
    38c6:	e4 e0       	ldi	r30, 0x04	; 4
    38c8:	f2 e0       	ldi	r31, 0x02	; 2
    38ca:	e4 91       	lpm	r30, Z
    38cc:	e0 93 93 05 	sts	0x0593, r30	; 0x800593 <tempSensor+0x17>
    38d0:	e5 e7       	ldi	r30, 0x75	; 117
    38d2:	f2 e0       	ldi	r31, 0x02	; 2
    38d4:	e4 91       	lpm	r30, Z
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	e4 53       	subi	r30, 0x34	; 52
    38de:	fe 4f       	sbci	r31, 0xFE	; 254
    38e0:	85 91       	lpm	r24, Z+
    38e2:	94 91       	lpm	r25, Z
    38e4:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <tempSensor+0x14>
    38e8:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <tempSensor+0x13>
    38ec:	e5 e0       	ldi	r30, 0x05	; 5
    38ee:	f2 e0       	ldi	r31, 0x02	; 2
    38f0:	e4 91       	lpm	r30, Z
    38f2:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <tempSensor+0x18>
    38f6:	ed e6       	ldi	r30, 0x6D	; 109
    38f8:	f2 e0       	ldi	r31, 0x02	; 2
    38fa:	e4 91       	lpm	r30, Z
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	ee 0f       	add	r30, r30
    3900:	ff 1f       	adc	r31, r31
    3902:	e4 5c       	subi	r30, 0xC4	; 196
    3904:	fd 4f       	sbci	r31, 0xFD	; 253
    3906:	85 91       	lpm	r24, Z+
    3908:	94 91       	lpm	r25, Z
    390a:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <tempSensor+0x12>
    390e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <tempSensor+0x11>
    3912:	ed ef       	ldi	r30, 0xFD	; 253
    3914:	f1 e0       	ldi	r31, 0x01	; 1
    3916:	e4 91       	lpm	r30, Z
    3918:	e0 93 95 05 	sts	0x0595, r30	; 0x800595 <tempSensor+0x19>
    391c:	80 e4       	ldi	r24, 0x40	; 64
    391e:	92 e4       	ldi	r25, 0x42	; 66
    3920:	af e0       	ldi	r26, 0x0F	; 15
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <tempSensor+0x4>
    3928:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <tempSensor+0x5>
    392c:	a0 93 82 05 	sts	0x0582, r26	; 0x800582 <tempSensor+0x6>
    3930:	b0 93 83 05 	sts	0x0583, r27	; 0x800583 <tempSensor+0x7>
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <tempSensor+0x9>
    393c:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tempSensor+0x8>
    3940:	84 e0       	ldi	r24, 0x04	; 4
    3942:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <tempSensor+0xa>
    3946:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <tempSensor+0x1b>
    394a:	89 e0       	ldi	r24, 0x09	; 9
    394c:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <avgTemp+0x8>
    3950:	84 e2       	ldi	r24, 0x24	; 36
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 9d 28 	call	0x513a	; 0x513a <malloc>
    3958:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <avgTemp>
    395c:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <avgTemp+0x1>
    3960:	fc 01       	movw	r30, r24
    3962:	84 96       	adiw	r24, 0x24	; 36
    3964:	11 92       	st	Z+, r1
    3966:	11 92       	st	Z+, r1
    3968:	11 92       	st	Z+, r1
    396a:	11 92       	st	Z+, r1
    396c:	8e 17       	cp	r24, r30
    396e:	9f 07       	cpc	r25, r31
    3970:	c9 f7       	brne	.-14     	; 0x3964 <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2923+0x210>
    3972:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <avgTemp+0x2>
    3976:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <avgTemp+0x3>
    397a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <avgTemp+0x4>
    397e:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <avgTemp+0x5>
    3982:	8d e1       	ldi	r24, 0x1D	; 29
    3984:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <avgVolts+0x8>
    3988:	84 e7       	ldi	r24, 0x74	; 116
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	0e 94 9d 28 	call	0x513a	; 0x513a <malloc>
    3990:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <avgVolts>
    3994:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <avgVolts+0x1>
    3998:	fc 01       	movw	r30, r24
    399a:	8c 58       	subi	r24, 0x8C	; 140
    399c:	9f 4f       	sbci	r25, 0xFF	; 255
    399e:	11 92       	st	Z+, r1
    39a0:	11 92       	st	Z+, r1
    39a2:	11 92       	st	Z+, r1
    39a4:	11 92       	st	Z+, r1
    39a6:	e8 17       	cp	r30, r24
    39a8:	f9 07       	cpc	r31, r25
    39aa:	c9 f7       	brne	.-14     	; 0x399e <global constructors keyed to 65535_0_MarketForge_Control.ino.cpp.o.2923+0x24a>
    39ac:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <avgVolts+0x2>
    39b0:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <avgVolts+0x3>
    39b4:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <avgVolts+0x4>
    39b8:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <avgVolts+0x5>
    39bc:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <Kd>
    39c0:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <Kd+0x1>
    39c4:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <Kd+0x2>
    39c8:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <Kd+0x3>
    39cc:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <Ki>
    39d0:	50 91 63 05 	lds	r21, 0x0563	; 0x800563 <Ki+0x1>
    39d4:	60 91 64 05 	lds	r22, 0x0564	; 0x800564 <Ki+0x2>
    39d8:	70 91 65 05 	lds	r23, 0x0565	; 0x800565 <Ki+0x3>
    39dc:	00 91 5e 05 	lds	r16, 0x055E	; 0x80055e <Kp>
    39e0:	10 91 5f 05 	lds	r17, 0x055F	; 0x80055f <Kp+0x1>
    39e4:	20 91 60 05 	lds	r18, 0x0560	; 0x800560 <Kp+0x2>
    39e8:	30 91 61 05 	lds	r19, 0x0561	; 0x800561 <Kp+0x3>
    39ec:	ef e1       	ldi	r30, 0x1F	; 31
    39ee:	f5 e0       	ldi	r31, 0x05	; 5
    39f0:	f0 93 40 05 	sts	0x0540, r31	; 0x800540 <pid+0x1d>
    39f4:	e0 93 3f 05 	sts	0x053F, r30	; 0x80053f <pid+0x1c>
    39f8:	eb e1       	ldi	r30, 0x1B	; 27
    39fa:	f5 e0       	ldi	r31, 0x05	; 5
    39fc:	f0 93 42 05 	sts	0x0542, r31	; 0x800542 <pid+0x1f>
    3a00:	e0 93 41 05 	sts	0x0541, r30	; 0x800541 <pid+0x1e>
    3a04:	e7 e1       	ldi	r30, 0x17	; 23
    3a06:	f5 e0       	ldi	r31, 0x05	; 5
    3a08:	f0 93 44 05 	sts	0x0544, r31	; 0x800544 <pid+0x21>
    3a0c:	e0 93 43 05 	sts	0x0543, r30	; 0x800543 <pid+0x20>
    3a10:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <pid+0x22>
    3a14:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <pid+0x23>
    3a18:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <pid+0x24>
    3a1c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <pid+0x25>
    3a20:	c1 2c       	mov	r12, r1
    3a22:	d1 2c       	mov	r13, r1
    3a24:	e8 ec       	ldi	r30, 0xC8	; 200
    3a26:	ee 2e       	mov	r14, r30
    3a28:	e2 e4       	ldi	r30, 0x42	; 66
    3a2a:	fe 2e       	mov	r15, r30
    3a2c:	c0 92 49 05 	sts	0x0549, r12	; 0x800549 <pid+0x26>
    3a30:	d0 92 4a 05 	sts	0x054A, r13	; 0x80054a <pid+0x27>
    3a34:	e0 92 4b 05 	sts	0x054B, r14	; 0x80054b <pid+0x28>
    3a38:	f0 92 4c 05 	sts	0x054C, r15	; 0x80054c <pid+0x29>
    3a3c:	00 93 23 05 	sts	0x0523, r16	; 0x800523 <pid>
    3a40:	10 93 24 05 	sts	0x0524, r17	; 0x800524 <pid+0x1>
    3a44:	20 93 25 05 	sts	0x0525, r18	; 0x800525 <pid+0x2>
    3a48:	30 93 26 05 	sts	0x0526, r19	; 0x800526 <pid+0x3>
    3a4c:	40 93 27 05 	sts	0x0527, r20	; 0x800527 <pid+0x4>
    3a50:	50 93 28 05 	sts	0x0528, r21	; 0x800528 <pid+0x5>
    3a54:	60 93 29 05 	sts	0x0529, r22	; 0x800529 <pid+0x6>
    3a58:	70 93 2a 05 	sts	0x052A, r23	; 0x80052a <pid+0x7>
    3a5c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <pid+0x8>
    3a60:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <pid+0x9>
    3a64:	a0 93 2d 05 	sts	0x052D, r26	; 0x80052d <pid+0xa>
    3a68:	b0 93 2e 05 	sts	0x052E, r27	; 0x80052e <pid+0xb>
    3a6c:	48 ee       	ldi	r20, 0xE8	; 232
    3a6e:	53 e0       	ldi	r21, 0x03	; 3
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	40 93 4d 05 	sts	0x054D, r20	; 0x80054d <pid+0x2a>
    3a78:	50 93 4e 05 	sts	0x054E, r21	; 0x80054e <pid+0x2b>
    3a7c:	60 93 4f 05 	sts	0x054F, r22	; 0x80054f <pid+0x2c>
    3a80:	70 93 50 05 	sts	0x0550, r23	; 0x800550 <pid+0x2d>
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <timer1Sec+0xa>
    3a8c:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <timer1Sec+0x9>
    3a90:	40 93 fd 04 	sts	0x04FD, r20	; 0x8004fd <timer1Sec+0x1>
    3a94:	50 93 fe 04 	sts	0x04FE, r21	; 0x8004fe <timer1Sec+0x2>
    3a98:	60 93 ff 04 	sts	0x04FF, r22	; 0x8004ff <timer1Sec+0x3>
    3a9c:	70 93 00 05 	sts	0x0500, r23	; 0x800500 <timer1Sec+0x4>
    3aa0:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <timer1Sec+0x5>
    3aa4:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <timer1Sec+0x6>
    3aa8:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <timer1Sec+0x7>
    3aac:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <timer1Sec+0x8>
    3ab0:	2a e5       	ldi	r18, 0x5A	; 90
    3ab2:	32 e1       	ldi	r19, 0x12	; 18
    3ab4:	30 93 0e 05 	sts	0x050E, r19	; 0x80050e <timer1Sec+0x12>
    3ab8:	20 93 0d 05 	sts	0x050D, r18	; 0x80050d <timer1Sec+0x11>
    3abc:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <timer1Sec>
    3ac0:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <timer1Sec+0x13>
    3ac4:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <timer1Sec+0x14>
    3ac8:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <timer1Sec+0x15>
    3acc:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <timer1Sec+0x16>
    3ad0:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <timer1Sec+0xb>
    3ad4:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <timer1Sec+0xc>
    3ad8:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <timer1Sec+0xd>
    3adc:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <timer1Sec+0xe>
    3ae0:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <timer50mSec+0xa>
    3ae4:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <timer50mSec+0x9>
    3ae8:	82 e3       	ldi	r24, 0x32	; 50
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	a0 e0       	ldi	r26, 0x00	; 0
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <timer50mSec+0x1>
    3af4:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <timer50mSec+0x2>
    3af8:	a0 93 e4 04 	sts	0x04E4, r26	; 0x8004e4 <timer50mSec+0x3>
    3afc:	b0 93 e5 04 	sts	0x04E5, r27	; 0x8004e5 <timer50mSec+0x4>
    3b00:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <timer50mSec+0x5>
    3b04:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <timer50mSec+0x6>
    3b08:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <timer50mSec+0x7>
    3b0c:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <timer50mSec+0x8>
    3b10:	83 e7       	ldi	r24, 0x73	; 115
    3b12:	92 e1       	ldi	r25, 0x12	; 18
    3b14:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <timer50mSec+0x12>
    3b18:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <timer50mSec+0x11>
    3b1c:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <timer50mSec>
    3b20:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <timer50mSec+0x13>
    3b24:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <timer50mSec+0x14>
    3b28:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <timer50mSec+0x15>
    3b2c:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <timer50mSec+0x16>
    3b30:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <timer50mSec+0xb>
    3b34:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <timer50mSec+0xc>
    3b38:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <timer50mSec+0xd>
    3b3c:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <timer50mSec+0xe>
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	ff 90       	pop	r15
    3b46:	ef 90       	pop	r14
    3b48:	df 90       	pop	r13
    3b4a:	cf 90       	pop	r12
    3b4c:	08 95       	ret

00003b4e <main>:
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	68 97       	sbiw	r28, 0x18	; 24
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3b62:	78 94       	sei
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3b64:	84 b5       	in	r24, 0x24	; 36
    3b66:	83 60       	ori	r24, 0x03	; 3
    3b68:	84 bd       	out	0x24, r24	; 36
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3b6a:	85 b5       	in	r24, 0x25	; 37
    3b6c:	83 60       	ori	r24, 0x03	; 3
    3b6e:	85 bd       	out	0x25, r24	; 37
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    3b70:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    3b74:	81 60       	ori	r24, 0x01	; 1
    3b76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3b80:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    3b84:	81 60       	ori	r24, 0x01	; 1
    3b86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3b8a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3b8e:	81 60       	ori	r24, 0x01	; 1
    3b90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3b94:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    3b98:	84 60       	ori	r24, 0x04	; 4
    3b9a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    3b9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3ba2:	81 60       	ori	r24, 0x01	; 1
    3ba4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    3ba8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    3bac:	83 60       	ori	r24, 0x03	; 3
    3bae:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    3bb2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3bb6:	81 60       	ori	r24, 0x01	; 1
    3bb8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    3bbc:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    3bc0:	83 60       	ori	r24, 0x03	; 3
    3bc2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    3bc6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3bca:	81 60       	ori	r24, 0x01	; 1
    3bcc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    3bd0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    3bd4:	83 60       	ori	r24, 0x03	; 3
    3bd6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    3bda:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3bde:	81 60       	ori	r24, 0x01	; 1
    3be0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    3be4:	87 e8       	ldi	r24, 0x87	; 135
    3be6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    3bea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
setup():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:373
Ticker  timer50mSec(&tickHeater, 50, 0, MILLIS);


void setup() {
  // put your setup code here, to run once:
    state = ready;
    3bee:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <state>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:93
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
  if (_cs != -1) {
    3bf2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tempSensor+0xb>
    3bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    3bf8:	41 f0       	breq	.+16     	; 0x3c0a <main+0xbc>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:94
    pinMode(_cs, OUTPUT);
    3bfa:	61 e0       	ldi	r22, 0x01	; 1
    3bfc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:95
    digitalWrite(_cs, HIGH);
    3c00:	61 e0       	ldi	r22, 0x01	; 1
    3c02:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <tempSensor+0xb>
    3c06:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:98
  }

  if (_spi) { // hardware SPI
    3c0a:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <tempSensor>
    3c0e:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <tempSensor+0x1>
    3c12:	89 2b       	or	r24, r25
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <main+0xca>
    3c16:	18 c4       	rjmp	.+2096   	; 0x4448 <main+0x8fa>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    3c18:	1f b7       	in	r17, 0x3f	; 63
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3c1a:	f8 94       	cli
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    3c1c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <SPIClass::initialized>
    3c20:	81 11       	cpse	r24, r1
    3c22:	27 c0       	rjmp	.+78     	; 0x3c72 <main+0x124>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3c24:	eb e8       	ldi	r30, 0x8B	; 139
    3c26:	f2 e0       	ldi	r31, 0x02	; 2
    3c28:	84 91       	lpm	r24, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    3c2a:	eb e1       	ldi	r30, 0x1B	; 27
    3c2c:	f2 e0       	ldi	r31, 0x02	; 2
    3c2e:	94 91       	lpm	r25, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    3c30:	e8 2f       	mov	r30, r24
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	ee 0f       	add	r30, r30
    3c36:	ff 1f       	adc	r31, r31
    3c38:	e4 5a       	subi	r30, 0xA4	; 164
    3c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3c:	a5 91       	lpm	r26, Z+
    3c3e:	b4 91       	lpm	r27, Z
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3c40:	ec 91       	ld	r30, X
    3c42:	e9 23       	and	r30, r25
    3c44:	21 f4       	brne	.+8      	; 0x3c4e <main+0x100>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    3c46:	61 e0       	ldi	r22, 0x01	; 1
    3c48:	85 e3       	ldi	r24, 0x35	; 53
    3c4a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3c4e:	61 e0       	ldi	r22, 0x01	; 1
    3c50:	85 e3       	ldi	r24, 0x35	; 53
    3c52:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3c56:	8c b5       	in	r24, 0x2c	; 44
    3c58:	80 61       	ori	r24, 0x10	; 16
    3c5a:	8c bd       	out	0x2c, r24	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    3c5c:	8c b5       	in	r24, 0x2c	; 44
    3c5e:	80 64       	ori	r24, 0x40	; 64
    3c60:	8c bd       	out	0x2c, r24	; 44
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3c62:	61 e0       	ldi	r22, 0x01	; 1
    3c64:	84 e3       	ldi	r24, 0x34	; 52
    3c66:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    3c6a:	61 e0       	ldi	r22, 0x01	; 1
    3c6c:	83 e3       	ldi	r24, 0x33	; 51
    3c6e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    3c72:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <SPIClass::initialized>
    3c76:	8f 5f       	subi	r24, 0xFF	; 255
    3c78:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <SPIClass::initialized>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    3c7c:	1f bf       	out	0x3f, r17	; 63
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:121
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <tempSensor+0x1b>
setWires():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:209
    MAX31865_3WIRE, or MAX31865_4WIRE
    @param wires The number of wires in enum format
*/
/**************************************************************************/
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
    3c84:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:214
  if (wires == MAX31865_3WIRE) {
    t |= MAX31865_CONFIG_3WIRE;
  } else {
    // 2 or 4 wire
    t &= ~MAX31865_CONFIG_3WIRE;
    3c88:	68 2f       	mov	r22, r24
    3c8a:	6f 7e       	andi	r22, 0xEF	; 239
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:216
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:63
/**************************************************************************/
bool Adafruit_MAX31865::begin(max31865_numwires_t wires) {
  spi_dev.begin();

  setWires(wires);
  enableBias(false);
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Adafruit_MAX31865::enableBias(bool) [clone .constprop.20]>
autoConvert():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:140
    @brief Whether we want to have continuous conversions (50/60 Hz)
    @param b If true, auto conversion is enabled
*/
/**************************************************************************/
void Adafruit_MAX31865::autoConvert(bool b) {
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
    3c98:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Adafruit_MAX31865::readRegister8(unsigned char) [clone .constprop.24]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:144
  if (b) {
    t |= MAX31865_CONFIG_MODEAUTO; // enable autoconvert
  } else {
    t &= ~MAX31865_CONFIG_MODEAUTO; // disable autoconvert
    3c9c:	68 2f       	mov	r22, r24
    3c9e:	6f 7b       	andi	r22, 0xBF	; 191
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:146
  }
  writeRegister8(MAX31865_CONFIG_REG, t);
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
setThresholds():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:175
    @param lower raw lower threshold
    @param upper raw upper threshold
*/
/**************************************************************************/
void Adafruit_MAX31865::setThresholds(uint16_t lower, uint16_t upper) {
  writeRegister8(MAX31865_LFAULTLSB_REG, lower & 0xFF);
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	86 e0       	ldi	r24, 0x06	; 6
    3caa:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:176
  writeRegister8(MAX31865_LFAULTMSB_REG, lower >> 8);
    3cae:	60 e0       	ldi	r22, 0x00	; 0
    3cb0:	85 e0       	ldi	r24, 0x05	; 5
    3cb2:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:177
  writeRegister8(MAX31865_HFAULTLSB_REG, upper & 0xFF);
    3cb6:	6f ef       	ldi	r22, 0xFF	; 255
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:178
  writeRegister8(MAX31865_HFAULTMSB_REG, upper >> 8);
    3cbe:	6f ef       	ldi	r22, 0xFF	; 255
    3cc0:	83 e0       	ldi	r24, 0x03	; 3
    3cc2:	0e 94 91 07 	call	0xf22	; 0xf22 <Adafruit_MAX31865::writeRegister8(unsigned char, unsigned char) [clone .constprop.27]>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:66

  setWires(wires);
  enableBias(false);
  autoConvert(false);
  setThresholds(0, 0xFFFF);
  clearFault();
    3cc6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <Adafruit_MAX31865::clearFault() [clone .constprop.23]>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3cca:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial3+0x10>
    3cce:	f0 91 b8 03 	lds	r31, 0x03B8	; 0x8003b8 <Serial3+0x11>
    3cd2:	82 e0       	ldi	r24, 0x02	; 2
    3cd4:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3cd6:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial3+0xc>
    3cda:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <Serial3+0xd>
    3cde:	10 82       	st	Z, r1
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    3ce0:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <Serial3+0xe>
    3ce4:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <Serial3+0xf>
    3ce8:	8f ec       	ldi	r24, 0xCF	; 207
    3cea:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    3cec:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <Serial3+0x18>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3cf0:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <Serial3+0x14>
    3cf4:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <Serial3+0x15>
    3cf8:	86 e0       	ldi	r24, 0x06	; 6
    3cfa:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    3cfc:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <Serial3+0x12>
    3d00:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <Serial3+0x13>
    3d04:	80 81       	ld	r24, Z
    3d06:	88 69       	ori	r24, 0x98	; 152
    3d08:	80 83       	st	Z, r24
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3d0a:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <Serial3+0x12>
    3d0e:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <Serial3+0x13>
    3d12:	80 81       	ld	r24, Z
    3d14:	8f 7d       	andi	r24, 0xDF	; 223
    3d16:	80 83       	st	Z, r24
_ZN14VFD_NEC_FC20X213setSerialPortEP6Stream():
c:\Users\admin\Documents\Arduino\libraries\VFD_NEC_FC20X2/vfd_nec_fc20x2.h:29
#define ESCAPE              0x1B    //Used to position the cursor at specific pos.

class VFD_NEC_FC20X2 {
    public:
        void setSerialPort(Stream * streamObject) {
            _serPort = streamObject;
    3d18:	87 ea       	ldi	r24, 0xA7	; 167
    3d1a:	93 e0       	ldi	r25, 0x03	; 3
    3d1c:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <vfd+0x1>
    3d20:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <vfd>
setup():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:379

  bool res = tempSensor.begin(MAX31865_4WIRE);
  Serial3.begin(9600);
  // Serial3.print(("Test"));
  vfd.setSerialPort(&Serial3);
  vfd.Init();
    3d24:	0e 94 8b 01 	call	0x316	; 0x316 <VFD_NEC_FC20X2::Init() [clone .constprop.52]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:383

  //LED
  //Initialize LEDS
  pinMode(LED0, OUTPUT);
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	81 e3       	ldi	r24, 0x31	; 49
    3d2c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:384
  pinMode(LED1, OUTPUT);
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	80 e3       	ldi	r24, 0x30	; 48
    3d34:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:385
  pinMode(LED2, OUTPUT);
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	8f e2       	ldi	r24, 0x2F	; 47
    3d3c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:386
  pinMode(LED3, OUTPUT);
    3d40:	61 e0       	ldi	r22, 0x01	; 1
    3d42:	8e e2       	ldi	r24, 0x2E	; 46
    3d44:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:387
  pinMode(LED4, OUTPUT);
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	8d e2       	ldi	r24, 0x2D	; 45
    3d4c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:388
  pinMode(LED5, OUTPUT);
    3d50:	61 e0       	ldi	r22, 0x01	; 1
    3d52:	8c e2       	ldi	r24, 0x2C	; 44
    3d54:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:389
  pinMode(LED6, OUTPUT);
    3d58:	61 e0       	ldi	r22, 0x01	; 1
    3d5a:	8b e2       	ldi	r24, 0x2B	; 43
    3d5c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:390
  pinMode(LED7, OUTPUT);
    3d60:	61 e0       	ldi	r22, 0x01	; 1
    3d62:	8a e2       	ldi	r24, 0x2A	; 42
    3d64:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:391
  pinMode(LED_OC, OUTPUT);
    3d68:	61 e0       	ldi	r22, 0x01	; 1
    3d6a:	8a e2       	ldi	r24, 0x2A	; 42
    3d6c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:392
  digitalWrite(LED0, LED_OFF);
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	81 e3       	ldi	r24, 0x31	; 49
    3d74:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:393
  digitalWrite(LED1, LED_OFF);
    3d78:	60 e0       	ldi	r22, 0x00	; 0
    3d7a:	80 e3       	ldi	r24, 0x30	; 48
    3d7c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:394
  digitalWrite(LED2, LED_OFF);
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	8f e2       	ldi	r24, 0x2F	; 47
    3d84:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:395
  digitalWrite(LED3, LED_OFF);
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	8e e2       	ldi	r24, 0x2E	; 46
    3d8c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:396
  digitalWrite(LED4, LED_OFF);
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	8d e2       	ldi	r24, 0x2D	; 45
    3d94:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:397
  digitalWrite(LED5, LED_OFF);
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	8c e2       	ldi	r24, 0x2C	; 44
    3d9c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:398
  digitalWrite(LED6, LED_OFF);
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	8b e2       	ldi	r24, 0x2B	; 43
    3da4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:399
  digitalWrite(LED7, LED_OFF);
    3da8:	60 e0       	ldi	r22, 0x00	; 0
    3daa:	8a e2       	ldi	r24, 0x2A	; 42
    3dac:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:402

  //Initialize Vent Solenoid
  pinMode(VENT_SOLENOID,OUTPUT);
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	88 e1       	ldi	r24, 0x18	; 24
    3db4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:403
  digitalWrite(VENT_SOLENOID,VALVE_OPEN);
    3db8:	61 e0       	ldi	r22, 0x01	; 1
    3dba:	88 e1       	ldi	r24, 0x18	; 24
    3dbc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:406

  //Initialize Start ans Stop buttons
  pinMode(BTN_START, INPUT);
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	89 e1       	ldi	r24, 0x19	; 25
    3dc4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:407
  pinMode(BTN_STOP, INPUT);
    3dc8:	60 e0       	ldi	r22, 0x00	; 0
    3dca:	8b e1       	ldi	r24, 0x1B	; 27
    3dcc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:408
  digitalWrite(BTN_START,1);
    3dd0:	61 e0       	ldi	r22, 0x01	; 1
    3dd2:	89 e1       	ldi	r24, 0x19	; 25
    3dd4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:409
  digitalWrite(BTN_STOP,1);
    3dd8:	61 e0       	ldi	r22, 0x01	; 1
    3dda:	8b e1       	ldi	r24, 0x1B	; 27
    3ddc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:411

  pinMode(HEATER1,OUTPUT);
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	8a e1       	ldi	r24, 0x1A	; 26
    3de4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:414
  // pinMode(HEATER2,OUTPUT);
  // pinMode(HEATER3,OUTPUT);
  pinMode(HEATER_ENABLE,OUTPUT);
    3de8:	61 e0       	ldi	r22, 0x01	; 1
    3dea:	8c e1       	ldi	r24, 0x1C	; 28
    3dec:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:415
  digitalWrite(HEATER1, HEATER_OFF);
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	8a e1       	ldi	r24, 0x1A	; 26
    3df4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:418
  // digitalWrite(HEATER2, HEATER_OFF);
  // digitalWrite(HEATER3, HEATER_OFF);
  digitalWrite(HEATER_ENABLE, HEATER_OFF);
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	8c e1       	ldi	r24, 0x1C	; 28
    3dfc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
Read_EEPROM():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:118

/*
  Functions
*/
void Read_EEPROM(void) {
  ee_position = 0;
    3e00:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <ee_position+0x1>
    3e04:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:119
  EEPROM.get(ee_position, EE_Setpoint);
    3e08:	68 e8       	ldi	r22, 0x88	; 136
    3e0a:	73 e0       	ldi	r23, 0x03	; 3
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:120
  Setpoint = EE_Setpoint = 121.0;
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	a2 ef       	ldi	r26, 0xF2	; 242
    3e1a:	b2 e4       	ldi	r27, 0x42	; 66
    3e1c:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <EE_Setpoint>
    3e20:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <EE_Setpoint+0x1>
    3e24:	a0 93 8a 03 	sts	0x038A, r26	; 0x80038a <EE_Setpoint+0x2>
    3e28:	b0 93 8b 03 	sts	0x038B, r27	; 0x80038b <EE_Setpoint+0x3>
    3e2c:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Setpoint>
    3e30:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <Setpoint+0x1>
    3e34:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <Setpoint+0x2>
    3e38:	b0 93 1e 05 	sts	0x051E, r27	; 0x80051e <Setpoint+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:121
  ee_position += sizeof(EE_Setpoint);
    3e3c:	84 e0       	ldi	r24, 0x04	; 4
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3e44:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:123

  EEPROM.get(ee_position, EE_Proportional);
    3e48:	64 e8       	ldi	r22, 0x84	; 132
    3e4a:	73 e0       	ldi	r23, 0x03	; 3
    3e4c:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:124
  Kp = EE_Proportional = 20.0;
    3e50:	81 2c       	mov	r8, r1
    3e52:	91 2c       	mov	r9, r1
    3e54:	80 ea       	ldi	r24, 0xA0	; 160
    3e56:	a8 2e       	mov	r10, r24
    3e58:	81 e4       	ldi	r24, 0x41	; 65
    3e5a:	b8 2e       	mov	r11, r24
    3e5c:	80 92 84 03 	sts	0x0384, r8	; 0x800384 <EE_Proportional>
    3e60:	90 92 85 03 	sts	0x0385, r9	; 0x800385 <EE_Proportional+0x1>
    3e64:	a0 92 86 03 	sts	0x0386, r10	; 0x800386 <EE_Proportional+0x2>
    3e68:	b0 92 87 03 	sts	0x0387, r11	; 0x800387 <EE_Proportional+0x3>
    3e6c:	80 92 5e 05 	sts	0x055E, r8	; 0x80055e <Kp>
    3e70:	90 92 5f 05 	sts	0x055F, r9	; 0x80055f <Kp+0x1>
    3e74:	a0 92 60 05 	sts	0x0560, r10	; 0x800560 <Kp+0x2>
    3e78:	b0 92 61 05 	sts	0x0561, r11	; 0x800561 <Kp+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:125
  ee_position += sizeof(EE_Proportional);
    3e7c:	88 e0       	ldi	r24, 0x08	; 8
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3e84:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:127

  EEPROM.get(ee_position, EE_Integral);
    3e88:	60 e8       	ldi	r22, 0x80	; 128
    3e8a:	73 e0       	ldi	r23, 0x03	; 3
    3e8c:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:128
  Ki = EE_Integral = 0.08;
    3e90:	9a e0       	ldi	r25, 0x0A	; 10
    3e92:	c9 2e       	mov	r12, r25
    3e94:	97 ed       	ldi	r25, 0xD7	; 215
    3e96:	d9 2e       	mov	r13, r25
    3e98:	93 ea       	ldi	r25, 0xA3	; 163
    3e9a:	e9 2e       	mov	r14, r25
    3e9c:	9d e3       	ldi	r25, 0x3D	; 61
    3e9e:	f9 2e       	mov	r15, r25
    3ea0:	c0 92 80 03 	sts	0x0380, r12	; 0x800380 <EE_Integral>
    3ea4:	d0 92 81 03 	sts	0x0381, r13	; 0x800381 <EE_Integral+0x1>
    3ea8:	e0 92 82 03 	sts	0x0382, r14	; 0x800382 <EE_Integral+0x2>
    3eac:	f0 92 83 03 	sts	0x0383, r15	; 0x800383 <EE_Integral+0x3>
    3eb0:	c0 92 62 05 	sts	0x0562, r12	; 0x800562 <Ki>
    3eb4:	d0 92 63 05 	sts	0x0563, r13	; 0x800563 <Ki+0x1>
    3eb8:	e0 92 64 05 	sts	0x0564, r14	; 0x800564 <Ki+0x2>
    3ebc:	f0 92 65 05 	sts	0x0565, r15	; 0x800565 <Ki+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:129
  ee_position += sizeof(EE_Integral);
    3ec0:	8c e0       	ldi	r24, 0x0C	; 12
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3ec8:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:131

  EEPROM.get(ee_position, EE_Derivative);
    3ecc:	6c e7       	ldi	r22, 0x7C	; 124
    3ece:	73 e0       	ldi	r23, 0x03	; 3
    3ed0:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:132
  Kd = EE_Derivative = 0.0;
    3ed4:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <EE_Derivative>
    3ed8:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <EE_Derivative+0x1>
    3edc:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <EE_Derivative+0x2>
    3ee0:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <EE_Derivative+0x3>
    3ee4:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <Kd>
    3ee8:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <Kd+0x1>
    3eec:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <Kd+0x2>
    3ef0:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <Kd+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:133
  ee_position += sizeof(EE_Derivative);
    3ef4:	80 e1       	ldi	r24, 0x10	; 16
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3efc:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:135

  EEPROM.get(ee_position, EE_Temp_Cor_Factor);
    3f00:	68 e7       	ldi	r22, 0x78	; 120
    3f02:	73 e0       	ldi	r23, 0x03	; 3
    3f04:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:136
  Factor_Corr_Temp = EE_Temp_Cor_Factor = 1.0;
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a0 e8       	ldi	r26, 0x80	; 128
    3f0e:	bf e3       	ldi	r27, 0x3F	; 63
    3f10:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <EE_Temp_Cor_Factor>
    3f14:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <EE_Temp_Cor_Factor+0x1>
    3f18:	a0 93 7a 03 	sts	0x037A, r26	; 0x80037a <EE_Temp_Cor_Factor+0x2>
    3f1c:	b0 93 7b 03 	sts	0x037B, r27	; 0x80037b <EE_Temp_Cor_Factor+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:137
  ee_position += sizeof(EE_Temp_Cor_Factor);
    3f20:	84 e1       	ldi	r24, 0x14	; 20
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3f28:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:139

  EEPROM.get(ee_position, EE_Pres_Cor_Fctr);
    3f2c:	64 e7       	ldi	r22, 0x74	; 116
    3f2e:	73 e0       	ldi	r23, 0x03	; 3
    3f30:	0e 94 ab 14 	call	0x2956	; 0x2956 <double& EEPROMClass::get<double>(int, double&) [clone .isra.2]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:140
  Factor_Corr_Press = EE_Pres_Cor_Fctr = 0.993;
    3f34:	8f e3       	ldi	r24, 0x3F	; 63
    3f36:	95 e3       	ldi	r25, 0x35	; 53
    3f38:	ae e7       	ldi	r26, 0x7E	; 126
    3f3a:	bf e3       	ldi	r27, 0x3F	; 63
    3f3c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <EE_Pres_Cor_Fctr>
    3f40:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <EE_Pres_Cor_Fctr+0x1>
    3f44:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <EE_Pres_Cor_Fctr+0x2>
    3f48:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <EE_Pres_Cor_Fctr+0x3>
    3f4c:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <Factor_Corr_Press>
    3f50:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <Factor_Corr_Press+0x1>
    3f54:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <Factor_Corr_Press+0x2>
    3f58:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <Factor_Corr_Press+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:144
  ee_position += sizeof(EE_Pres_Cor_Fctr);

  EEPROM.get(ee_position, EE_Min);
  MinutesSetpoint = EE_Min = 15;
    3f5c:	8f e0       	ldi	r24, 0x0F	; 15
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <EE_Min+0x1>
    3f64:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <EE_Min>
    3f68:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <MinutesSetpoint+0x1>
    3f6c:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <MinutesSetpoint>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:145
  ee_position += sizeof(EE_Min);
    3f70:	8a e1       	ldi	r24, 0x1A	; 26
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <ee_position+0x1>
    3f78:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <ee_position>
operator*():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    3f7c:	0e 94 19 24 	call	0x4832	; 0x4832 <eeprom_read_byte>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.5():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\libraries\EEPROM\src/EEPROM.h:133

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    3f80:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <EE_Open_Valve_At_End_Of_Cycle>
setGains():
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:15
  setGains(Kp, Ki, Kd);
  _timeStep = 1000;
}//AutoPID::AutoPID

void AutoPID::setGains(double Kp, double Ki, double Kd) {
  _Kp = Kp;
    3f84:	80 92 23 05 	sts	0x0523, r8	; 0x800523 <pid>
    3f88:	90 92 24 05 	sts	0x0524, r9	; 0x800524 <pid+0x1>
    3f8c:	a0 92 25 05 	sts	0x0525, r10	; 0x800525 <pid+0x2>
    3f90:	b0 92 26 05 	sts	0x0526, r11	; 0x800526 <pid+0x3>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:16
  _Ki = Ki;
    3f94:	c0 92 27 05 	sts	0x0527, r12	; 0x800527 <pid+0x4>
    3f98:	d0 92 28 05 	sts	0x0528, r13	; 0x800528 <pid+0x5>
    3f9c:	e0 92 29 05 	sts	0x0529, r14	; 0x800529 <pid+0x6>
    3fa0:	f0 92 2a 05 	sts	0x052A, r15	; 0x80052a <pid+0x7>
c:\Users\admin\Documents\Arduino\libraries\AutoPID/AutoPID.cpp:17
  _Kd = Kd;
    3fa4:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <pid+0x8>
    3fa8:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <pid+0x9>
    3fac:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <pid+0xa>
    3fb0:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <pid+0xb>
Sterilizing():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:262
}

void Sterilizing(void) {
  char txt[20];
  
  sprintf(txt,"Esteriliz.  ");
    3fb4:	8e 01       	movw	r16, r28
    3fb6:	0f 5f       	subi	r16, 0xFF	; 255
    3fb8:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:265
  vfd.Print(txt,0);

  sprintf(txt,"%02d:%02d:%02d",Seconds/3600, Seconds/60, Seconds % 60);
    3fba:	2c e3       	ldi	r18, 0x3C	; 60
    3fbc:	a2 2e       	mov	r10, r18
    3fbe:	b1 2c       	mov	r11, r1
    3fc0:	3f ed       	ldi	r19, 0xDF	; 223
    3fc2:	23 2e       	mov	r2, r19
    3fc4:	32 e0       	ldi	r19, 0x02	; 2
    3fc6:	33 2e       	mov	r3, r19
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:278
    vfd.Print(txt,40-strlen(txt));
  } else {
    sprintf(txt,"%1.1f C   ", Temperature);
    vfd.Print(txt,20);

    sprintf(txt," %1.1f Psi ", Pressure);
    3fc8:	49 ef       	ldi	r20, 0xF9	; 249
    3fca:	84 2e       	mov	r8, r20
    3fcc:	42 e0       	ldi	r20, 0x02	; 2
    3fce:	94 2e       	mov	r9, r20
analogRead():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:61
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    3fd0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    3fd4:	87 7f       	andi	r24, 0xF7	; 247
    3fd6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    3fda:	20 e4       	ldi	r18, 0x40	; 64
    3fdc:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    3fe0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    3fe4:	80 64       	ori	r24, 0x40	; 64
    3fe6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    3fea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    3fee:	86 fd       	sbrc	r24, 6
    3ff0:	fc cf       	rjmp	.-8      	; 0x3fea <main+0x49c>
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    3ff2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3ff6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
Read_Pressure():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:207

}

void Read_Pressure(void) {
  //Test Analog Voltage
  float voltage = analogRead(analogVoltPin) * ANALAOG_RES;
    3ffa:	07 2e       	mov	r0, r23
    3ffc:	00 0c       	add	r0, r0
    3ffe:	88 0b       	sbc	r24, r24
    4000:	99 0b       	sbc	r25, r25
    4002:	0e 94 7f 25 	call	0x4afe	; 0x4afe <__floatsisf>
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 ea       	ldi	r20, 0xA0	; 160
    400c:	5b e3       	ldi	r21, 0x3B	; 59
    400e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4012:	ab 01       	movw	r20, r22
    4014:	bc 01       	movw	r22, r24
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:208
  avgVolts.Insert(voltage); 
    4016:	8a e6       	ldi	r24, 0x6A	; 106
    4018:	95 e0       	ldi	r25, 0x05	; 5
    401a:	0e 94 ed 11 	call	0x23da	; 0x23da <MovingAverage<float>::Insert(float)>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:209
  Pressure = (7.5 * avgVolts.GetAverage()) - 3.9; 
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	40 ef       	ldi	r20, 0xF0	; 240
    4024:	50 e4       	ldi	r21, 0x40	; 64
    4026:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <avgVolts+0x2>
    402a:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <avgVolts+0x3>
    402e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <avgVolts+0x4>
    4032:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <avgVolts+0x5>
    4036:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    403a:	2a e9       	ldi	r18, 0x9A	; 154
    403c:	39 e9       	ldi	r19, 0x99	; 153
    403e:	49 e7       	ldi	r20, 0x79	; 121
    4040:	50 e4       	ldi	r21, 0x40	; 64
    4042:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:210
  Pressure = (1.044227 * Pressure) + 0.061628;
    4046:	2b e3       	ldi	r18, 0x3B	; 59
    4048:	39 ea       	ldi	r19, 0xA9	; 169
    404a:	45 e8       	ldi	r20, 0x85	; 133
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4052:	24 ea       	ldi	r18, 0xA4	; 164
    4054:	3d e6       	ldi	r19, 0x6D	; 109
    4056:	4c e7       	ldi	r20, 0x7C	; 124
    4058:	5d e3       	ldi	r21, 0x3D	; 61
    405a:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:211
  Pressure = Factor_Corr_Press * Pressure;
    405e:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <Factor_Corr_Press>
    4062:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <Factor_Corr_Press+0x1>
    4066:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <Factor_Corr_Press+0x2>
    406a:	50 91 91 03 	lds	r21, 0x0391	; 0x800391 <Factor_Corr_Press+0x3>
    406e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4072:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <Pressure>
    4076:	70 93 93 03 	sts	0x0393, r23	; 0x800393 <Pressure+0x1>
    407a:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <Pressure+0x2>
    407e:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <Pressure+0x3>
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:433
  //Get the pressure sensor
  Read_Pressure();


  ////Read MAX31865
  uint16_t getMAX31865 = tempSensor.readRTD();
    4082:	0e 94 49 08 	call	0x1092	; 0x1092 <Adafruit_MAX31865::readRTD() [clone .constprop.4]>
temperature():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:233
    430 or 4300
    @returns Temperature in C
*/
/**************************************************************************/
float Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
  return calculateTemperature(readRTD(), RTDnominal, refResistor);
    4086:	0e 94 49 08 	call	0x1092	; 0x1092 <Adafruit_MAX31865::readRTD() [clone .constprop.4]>
calculateTemperature():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:253
/**************************************************************************/
float Adafruit_MAX31865::calculateTemperature(uint16_t RTDraw, float RTDnominal,
                                              float refResistor) {
  float Z1, Z2, Z3, Z4, Rt, temp;

  Rt = RTDraw;
    408a:	bc 01       	movw	r22, r24
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	0e 94 7d 25 	call	0x4afa	; 0x4afa <__floatunsisf>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:254
  Rt /= 32768;
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	58 e3       	ldi	r21, 0x38	; 56
    409c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:255
  Rt *= refResistor;
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	47 ed       	ldi	r20, 0xD7	; 215
    40a6:	53 e4       	ldi	r21, 0x43	; 67
    40a8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    40ac:	2b 01       	movw	r4, r22
    40ae:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:264
  Z1 = -RTD_A;
  Z2 = RTD_A * RTD_A - (4 * RTD_B);
  Z3 = (4 * RTD_B) / RTDnominal;
  Z4 = 2 * RTD_B;

  temp = Z2 + (Z3 * Rt);
    40b0:	2f e6       	ldi	r18, 0x6F	; 111
    40b2:	3d e6       	ldi	r19, 0x6D	; 109
    40b4:	46 ec       	ldi	r20, 0xC6	; 198
    40b6:	52 eb       	ldi	r21, 0xB2	; 178
    40b8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    40bc:	26 e1       	ldi	r18, 0x16	; 22
    40be:	33 e8       	ldi	r19, 0x83	; 131
    40c0:	43 e9       	ldi	r20, 0x93	; 147
    40c2:	57 e3       	ldi	r21, 0x37	; 55
    40c4:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:265
  temp = (sqrt(temp) + Z1) / Z4;
    40c8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <sqrt>
    40cc:	22 e3       	ldi	r18, 0x32	; 50
    40ce:	31 e1       	ldi	r19, 0x11	; 17
    40d0:	40 e8       	ldi	r20, 0x80	; 128
    40d2:	5b e3       	ldi	r21, 0x3B	; 59
    40d4:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    40d8:	2f e7       	ldi	r18, 0x7F	; 127
    40da:	35 e0       	ldi	r19, 0x05	; 5
    40dc:	4b e9       	ldi	r20, 0x9B	; 155
    40de:	55 eb       	ldi	r21, 0xB5	; 181
    40e0:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    40e4:	6b 01       	movw	r12, r22
    40e6:	7c 01       	movw	r14, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:267

  if (temp >= 0)
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	a9 01       	movw	r20, r18
    40ee:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    40f2:	87 ff       	sbrs	r24, 7
    40f4:	80 c0       	rjmp	.+256    	; 0x41f6 <main+0x6a8>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:271
    return temp;

  // ugh.
  Rt /= RTDnominal;
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	48 ec       	ldi	r20, 0xC8	; 200
    40fc:	52 e4       	ldi	r21, 0x42	; 66
    40fe:	c3 01       	movw	r24, r6
    4100:	b2 01       	movw	r22, r4
    4102:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:272
  Rt *= 100; // normalize to 100 ohm
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	48 ec       	ldi	r20, 0xC8	; 200
    410c:	52 e4       	ldi	r21, 0x42	; 66
    410e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4112:	6b 01       	movw	r12, r22
    4114:	7c 01       	movw	r14, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:277

  float rpoly = Rt;

  temp = -242.02;
  temp += 2.2228 * rpoly;
    4116:	2b e5       	ldi	r18, 0x5B	; 91
    4118:	32 e4       	ldi	r19, 0x42	; 66
    411a:	4e e0       	ldi	r20, 0x0E	; 14
    411c:	50 e4       	ldi	r21, 0x40	; 64
    411e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4122:	2f e1       	ldi	r18, 0x1F	; 31
    4124:	35 e0       	ldi	r19, 0x05	; 5
    4126:	42 e7       	ldi	r20, 0x72	; 114
    4128:	53 e4       	ldi	r21, 0x43	; 67
    412a:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    412e:	6d 8b       	std	Y+21, r22	; 0x15
    4130:	7e 8b       	std	Y+22, r23	; 0x16
    4132:	8f 8b       	std	Y+23, r24	; 0x17
    4134:	98 8f       	std	Y+24, r25	; 0x18
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:278
  rpoly *= Rt; // square
    4136:	a7 01       	movw	r20, r14
    4138:	96 01       	movw	r18, r12
    413a:	c7 01       	movw	r24, r14
    413c:	b6 01       	movw	r22, r12
    413e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4142:	2b 01       	movw	r4, r22
    4144:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:279
  temp += 2.5859e-3 * rpoly;
    4146:	24 e3       	ldi	r18, 0x34	; 52
    4148:	38 e7       	ldi	r19, 0x78	; 120
    414a:	49 e2       	ldi	r20, 0x29	; 41
    414c:	5b e3       	ldi	r21, 0x3B	; 59
    414e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4152:	2d 89       	ldd	r18, Y+21	; 0x15
    4154:	3e 89       	ldd	r19, Y+22	; 0x16
    4156:	4f 89       	ldd	r20, Y+23	; 0x17
    4158:	58 8d       	ldd	r21, Y+24	; 0x18
    415a:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    415e:	6d 8b       	std	Y+21, r22	; 0x15
    4160:	7e 8b       	std	Y+22, r23	; 0x16
    4162:	8f 8b       	std	Y+23, r24	; 0x17
    4164:	98 8f       	std	Y+24, r25	; 0x18
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:280
  rpoly *= Rt; // ^3
    4166:	a3 01       	movw	r20, r6
    4168:	92 01       	movw	r18, r4
    416a:	c7 01       	movw	r24, r14
    416c:	b6 01       	movw	r22, r12
    416e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4172:	2b 01       	movw	r4, r22
    4174:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:281
  temp -= 4.8260e-6 * rpoly;
    4176:	26 e0       	ldi	r18, 0x06	; 6
    4178:	3f ee       	ldi	r19, 0xEF	; 239
    417a:	41 ea       	ldi	r20, 0xA1	; 161
    417c:	56 e3       	ldi	r21, 0x36	; 54
    417e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    4182:	9b 01       	movw	r18, r22
    4184:	ac 01       	movw	r20, r24
    4186:	6d 89       	ldd	r22, Y+21	; 0x15
    4188:	7e 89       	ldd	r23, Y+22	; 0x16
    418a:	8f 89       	ldd	r24, Y+23	; 0x17
    418c:	98 8d       	ldd	r25, Y+24	; 0x18
    418e:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    4192:	6d 8b       	std	Y+21, r22	; 0x15
    4194:	7e 8b       	std	Y+22, r23	; 0x16
    4196:	8f 8b       	std	Y+23, r24	; 0x17
    4198:	98 8f       	std	Y+24, r25	; 0x18
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:282
  rpoly *= Rt; // ^4
    419a:	a3 01       	movw	r20, r6
    419c:	92 01       	movw	r18, r4
    419e:	c7 01       	movw	r24, r14
    41a0:	b6 01       	movw	r22, r12
    41a2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    41a6:	2b 01       	movw	r4, r22
    41a8:	3c 01       	movw	r6, r24
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:283
  temp -= 2.8183e-8 * rpoly;
    41aa:	23 e1       	ldi	r18, 0x13	; 19
    41ac:	37 e1       	ldi	r19, 0x17	; 23
    41ae:	42 ef       	ldi	r20, 0xF2	; 242
    41b0:	52 e3       	ldi	r21, 0x32	; 50
    41b2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    41b6:	9b 01       	movw	r18, r22
    41b8:	ac 01       	movw	r20, r24
    41ba:	6d 89       	ldd	r22, Y+21	; 0x15
    41bc:	7e 89       	ldd	r23, Y+22	; 0x16
    41be:	8f 89       	ldd	r24, Y+23	; 0x17
    41c0:	98 8d       	ldd	r25, Y+24	; 0x18
    41c2:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    41c6:	6d 8b       	std	Y+21, r22	; 0x15
    41c8:	7e 8b       	std	Y+22, r23	; 0x16
    41ca:	8f 8b       	std	Y+23, r24	; 0x17
    41cc:	98 8f       	std	Y+24, r25	; 0x18
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:284
  rpoly *= Rt; // ^5
    41ce:	a3 01       	movw	r20, r6
    41d0:	92 01       	movw	r18, r4
    41d2:	c7 01       	movw	r24, r14
    41d4:	b6 01       	movw	r22, r12
    41d6:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_MAX31865_library/Adafruit_MAX31865.cpp:285
  temp += 1.5243e-10 * rpoly;
    41da:	2b e3       	ldi	r18, 0x3B	; 59
    41dc:	39 e9       	ldi	r19, 0x99	; 153
    41de:	47 e2       	ldi	r20, 0x27	; 39
    41e0:	5f e2       	ldi	r21, 0x2F	; 47
    41e2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__mulsf3>
    41e6:	2d 89       	ldd	r18, Y+21	; 0x15
    41e8:	3e 89       	ldd	r19, Y+22	; 0x16
    41ea:	4f 89       	ldd	r20, Y+23	; 0x17
    41ec:	58 8d       	ldd	r21, Y+24	; 0x18
    41ee:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    41f2:	6b 01       	movw	r12, r22
    41f4:	7c 01       	movw	r14, r24
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:438
  float    ratio = getMAX31865;
  ratio /= 32768;
  float   Resistance = 0.0;
  Resistance = RREF * ratio;
  avgTemp.Insert(tempSensor.temperature(RNOMINAL, RREF));
    41f6:	b7 01       	movw	r22, r14
    41f8:	a6 01       	movw	r20, r12
    41fa:	83 e7       	ldi	r24, 0x73	; 115
    41fc:	95 e0       	ldi	r25, 0x05	; 5
    41fe:	0e 94 ed 11 	call	0x23da	; 0x23da <MovingAverage<float>::Insert(float)>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:439
  Temperature = avgTemp.GetAverage();
    4202:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <avgTemp+0x2>
    4206:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <avgTemp+0x3>
    420a:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <avgTemp+0x4>
    420e:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <avgTemp+0x5>
    4212:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <Temperature>
    4216:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <Temperature+0x1>
    421a:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <Temperature+0x2>
    421e:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <Temperature+0x3>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:456
  // dtostrf(avgTemp.GetAverage(), 5,2, fValue);
  // sprintf(txt, "%s, T:%s  ", txt, fValue);
  // vfd.Print(txt, 20);
  

  digitalWrite(LED_OC, !digitalRead(LED_OC));
    4222:	8a e2       	ldi	r24, 0x2A	; 42
    4224:	0e 94 04 06 	call	0xc08	; 0xc08 <digitalRead>
    4228:	61 e0       	ldi	r22, 0x01	; 1
    422a:	89 2b       	or	r24, r25
    422c:	09 f0       	breq	.+2      	; 0x4230 <main+0x6e2>
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	8a e2       	ldi	r24, 0x2A	; 42
    4232:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:459
  //delay(100);
  
  timer1Sec.update();
    4236:	8c ef       	ldi	r24, 0xFC	; 252
    4238:	94 e0       	ldi	r25, 0x04	; 4
    423a:	0e 94 89 11 	call	0x2312	; 0x2312 <Ticker::update()>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:460
  timer50mSec.update();
    423e:	81 ee       	ldi	r24, 0xE1	; 225
    4240:	94 e0       	ldi	r25, 0x04	; 4
    4242:	0e 94 89 11 	call	0x2312	; 0x2312 <Ticker::update()>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:463

  // digitalWrite(LED5, !digitalRead(LED5));
  if ((digitalRead(BTN_START) == 0) && (state == ready)) {
    4246:	89 e1       	ldi	r24, 0x19	; 25
    4248:	0e 94 04 06 	call	0xc08	; 0xc08 <digitalRead>
    424c:	89 2b       	or	r24, r25
    424e:	09 f0       	breq	.+2      	; 0x4252 <main+0x704>
    4250:	49 c0       	rjmp	.+146    	; 0x42e4 <main+0x796>
    4252:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    4256:	81 11       	cpse	r24, r1
    4258:	45 c0       	rjmp	.+138    	; 0x42e4 <main+0x796>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:464
    state = heating;
    425a:	31 e0       	ldi	r19, 0x01	; 1
    425c:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:465
    Seconds = 0;
    4260:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <Seconds+0x1>
    4264:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <Seconds>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:467
    // MinutesSetpoint = 0;
    uint32_t tstart= millis();
    4268:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    426c:	6b 01       	movw	r12, r22
    426e:	7c 01       	movw	r14, r24
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:468
    while((millis()-tstart) < 1000) {
    4270:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    4274:	6c 19       	sub	r22, r12
    4276:	7d 09       	sbc	r23, r13
    4278:	8e 09       	sbc	r24, r14
    427a:	9f 09       	sbc	r25, r15
    427c:	68 3e       	cpi	r22, 0xE8	; 232
    427e:	73 40       	sbci	r23, 0x03	; 3
    4280:	81 05       	cpc	r24, r1
    4282:	91 05       	cpc	r25, r1
    4284:	a8 f3       	brcs	.-22     	; 0x4270 <main+0x722>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:472
      //
    }

    InCycle = true;
    4286:	31 e0       	ldi	r19, 0x01	; 1
    4288:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <InCycle>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:474

    digitalWrite(HEATER_ENABLE, HEATER_ON);
    428c:	61 e0       	ldi	r22, 0x01	; 1
    428e:	8c e1       	ldi	r24, 0x1C	; 28
    4290:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
start():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:41
	}

Ticker::~Ticker() {}

void Ticker::start() {
	if (callback == NULL) return;
    4294:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <timer50mSec+0x11>
    4298:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <timer50mSec+0x12>
    429c:	89 2b       	or	r24, r25
    429e:	11 f1       	breq	.+68     	; 0x42e4 <main+0x796>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:42
	if (resolution == MILLIS) lastTime = millis();
    42a0:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <timer50mSec+0x9>
    42a4:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <timer50mSec+0xa>
    42a8:	01 97       	sbiw	r24, 0x01	; 1
    42aa:	09 f0       	breq	.+2      	; 0x42ae <main+0x760>
    42ac:	f1 c0       	rjmp	.+482    	; 0x4490 <main+0x942>
    42ae:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:43
	else lastTime = micros();
    42b2:	60 93 f4 04 	sts	0x04F4, r22	; 0x8004f4 <timer50mSec+0x13>
    42b6:	70 93 f5 04 	sts	0x04F5, r23	; 0x8004f5 <timer50mSec+0x14>
    42ba:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <timer50mSec+0x15>
    42be:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <timer50mSec+0x16>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:44
	enabled = true;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <timer50mSec>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:45
	counts = 0;
    42c8:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <timer50mSec+0xb>
    42cc:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <timer50mSec+0xc>
    42d0:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <timer50mSec+0xd>
    42d4:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <timer50mSec+0xe>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:46
	status = RUNNING;
    42d8:	21 e0       	ldi	r18, 0x01	; 1
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	30 93 f1 04 	sts	0x04F1, r19	; 0x8004f1 <timer50mSec+0x10>
    42e0:	20 93 f0 04 	sts	0x04F0, r18	; 0x8004f0 <timer50mSec+0xf>
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:479
    timer50mSec.start();
  }

  //if ((digitalRead(BTN_STOP) == 0) && (state == heating || state == sterilizing || state == cooling)) {
  if ((digitalRead(BTN_STOP) == 0) && (state == heating || state == sterilizing || state == cooling)) {
    42e4:	8b e1       	ldi	r24, 0x1B	; 27
    42e6:	0e 94 04 06 	call	0xc08	; 0xc08 <digitalRead>
    42ea:	89 2b       	or	r24, r25
    42ec:	09 f0       	breq	.+2      	; 0x42f0 <main+0x7a2>
    42ee:	42 c0       	rjmp	.+132    	; 0x4374 <main+0x826>
    42f0:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    42f4:	81 50       	subi	r24, 0x01	; 1
    42f6:	83 30       	cpi	r24, 0x03	; 3
    42f8:	e8 f5       	brcc	.+122    	; 0x4374 <main+0x826>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:480
    state = ready;
    42fa:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:481
    digitalWrite(VENT_SOLENOID,VALVE_OPEN);
    42fe:	61 e0       	ldi	r22, 0x01	; 1
    4300:	88 e1       	ldi	r24, 0x18	; 24
    4302:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
stop():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
    4306:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <timer50mSec>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:60
	counts = 0;
    430a:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <timer50mSec+0xb>
    430e:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <timer50mSec+0xc>
    4312:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <timer50mSec+0xd>
    4316:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <timer50mSec+0xe>
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:61
	status = STOPPED;
    431a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <timer50mSec+0x10>
    431e:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <timer50mSec+0xf>
loop():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:484
    
    timer50mSec.stop();
    digitalWrite(LED6,LED_OFF);
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	8b e2       	ldi	r24, 0x2B	; 43
    4326:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:485
    digitalWrite(HEATER1, HEATER_OFF);
    432a:	60 e0       	ldi	r22, 0x00	; 0
    432c:	8a e1       	ldi	r24, 0x1A	; 26
    432e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:488
    // digitalWrite(HEATER2, HEATER_OFF);
    // digitalWrite(HEATER3, HEATER_OFF);
    digitalWrite(HEATER_ENABLE, HEATER_OFF);
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	8c e1       	ldi	r24, 0x1C	; 28
    4336:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:490
    
    InCycle = false;
    433a:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <InCycle>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:492

    vfd.Print("CICLO INTERRUMPIDO  ", 0);
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	88 ea       	ldi	r24, 0xA8	; 168
    4342:	92 e0       	ldi	r25, 0x02	; 2
    4344:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:493
    vfd.Print("POR USUARIO         ", 20);
    4348:	64 e1       	ldi	r22, 0x14	; 20
    434a:	8d eb       	ldi	r24, 0xBD	; 189
    434c:	92 e0       	ldi	r25, 0x02	; 2
    434e:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:494
    uint32_t tstart= millis();
    4352:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    4356:	6b 01       	movw	r12, r22
    4358:	7c 01       	movw	r14, r24
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:495
    while((millis()-tstart) < 5000) {
    435a:	0e 94 88 08 	call	0x1110	; 0x1110 <millis>
    435e:	6c 19       	sub	r22, r12
    4360:	7d 09       	sbc	r23, r13
    4362:	8e 09       	sbc	r24, r14
    4364:	9f 09       	sbc	r25, r15
    4366:	68 38       	cpi	r22, 0x88	; 136
    4368:	73 41       	sbci	r23, 0x13	; 19
    436a:	81 05       	cpc	r24, r1
    436c:	91 05       	cpc	r25, r1
    436e:	a8 f3       	brcs	.-22     	; 0x435a <main+0x80c>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:499
      //
    }

    vfd.Init();
    4370:	0e 94 8b 01 	call	0x316	; 0x316 <VFD_NEC_FC20X2::Init() [clone .constprop.52]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:503
  }

  //Different states changing
  if (state == heating && (Temperature >= (Setpoint-1.0f))) {
    4374:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    4378:	81 30       	cpi	r24, 0x01	; 1
    437a:	09 f5       	brne	.+66     	; 0x43be <main+0x870>
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e8       	ldi	r20, 0x80	; 128
    4382:	5f e3       	ldi	r21, 0x3F	; 63
    4384:	60 91 1b 05 	lds	r22, 0x051B	; 0x80051b <Setpoint>
    4388:	70 91 1c 05 	lds	r23, 0x051C	; 0x80051c <Setpoint+0x1>
    438c:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <Setpoint+0x2>
    4390:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <Setpoint+0x3>
    4394:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    4398:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <Temperature>
    439c:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <Temperature+0x1>
    43a0:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <Temperature+0x2>
    43a4:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <Temperature+0x3>
    43a8:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    43ac:	18 16       	cp	r1, r24
    43ae:	3c f0       	brlt	.+14     	; 0x43be <main+0x870>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:504
    Seconds = 0;
    43b0:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <Seconds+0x1>
    43b4:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <Seconds>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:505
    state = sterilizing;
    43b8:	82 e0       	ldi	r24, 0x02	; 2
    43ba:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:508
  }

  if (state == sterilizing && (Seconds >= (MinutesSetpoint * 60))) {
    43be:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    43c2:	82 30       	cpi	r24, 0x02	; 2
    43c4:	c1 f4       	brne	.+48     	; 0x43f6 <main+0x8a8>
    43c6:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <MinutesSetpoint>
    43ca:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <MinutesSetpoint+0x1>
    43ce:	4c e3       	ldi	r20, 0x3C	; 60
    43d0:	48 9f       	mul	r20, r24
    43d2:	90 01       	movw	r18, r0
    43d4:	49 9f       	mul	r20, r25
    43d6:	30 0d       	add	r19, r0
    43d8:	11 24       	eor	r1, r1
    43da:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Seconds>
    43de:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <Seconds+0x1>
    43e2:	82 17       	cp	r24, r18
    43e4:	93 07       	cpc	r25, r19
    43e6:	38 f0       	brcs	.+14     	; 0x43f6 <main+0x8a8>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:509
    state = cooling;
    43e8:	83 e0       	ldi	r24, 0x03	; 3
    43ea:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:511
    // timer50mSec.stop();
    Seconds = 0;
    43ee:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <Seconds+0x1>
    43f2:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <Seconds>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:514
  }

  if (state == cooling && (Temperature<70.0f)) {
    43f6:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    43fa:	83 30       	cpi	r24, 0x03	; 3
    43fc:	b1 f4       	brne	.+44     	; 0x442a <main+0x8dc>
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	4c e8       	ldi	r20, 0x8C	; 140
    4404:	52 e4       	ldi	r21, 0x42	; 66
    4406:	60 91 1f 05 	lds	r22, 0x051F	; 0x80051f <Temperature>
    440a:	70 91 20 05 	lds	r23, 0x0520	; 0x800520 <Temperature+0x1>
    440e:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    4412:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <Temperature+0x3>
    4416:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    441a:	87 ff       	sbrs	r24, 7
    441c:	06 c0       	rjmp	.+12     	; 0x442a <main+0x8dc>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:515
    state = ready;
    441e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <state>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:516
    Seconds = 0;
    4422:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <Seconds+0x1>
    4426:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <Seconds>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:520
  }

  //Selecte function to use depending on state
  switch (state) {
    442a:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <state>
    442e:	82 30       	cpi	r24, 0x02	; 2
    4430:	09 f4       	brne	.+2      	; 0x4434 <main+0x8e6>
    4432:	ac c0       	rjmp	.+344    	; 0x458c <main+0xa3e>
    4434:	83 30       	cpi	r24, 0x03	; 3
    4436:	09 f4       	brne	.+2      	; 0x443a <main+0x8ec>
    4438:	5f c1       	rjmp	.+702    	; 0x46f8 <main+0xbaa>
    443a:	81 30       	cpi	r24, 0x01	; 1
    443c:	61 f1       	breq	.+88     	; 0x4496 <main+0x948>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:522
    case ready:
      Standby();
    443e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <Standby()>
main():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    4442:	0e 94 a1 09 	call	0x1342	; 0x1342 <serialEventRun()>
    4446:	c4 cd       	rjmp	.-1144   	; 0x3fd0 <main+0x482>
begin():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:103
  if (_spi) { // hardware SPI
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
#endif
  } else {
    pinMode(_sck, OUTPUT);
    4448:	61 e0       	ldi	r22, 0x01	; 1
    444a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <tempSensor+0xc>
    444e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:105

    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
    4452:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <tempSensor+0xa>
    4456:	8b 7f       	andi	r24, 0xFB	; 251
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:107
      // idle low on mode 0 and 1
      digitalWrite(_sck, LOW);
    4458:	60 e0       	ldi	r22, 0x00	; 0
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:105
    _spi->begin();
#endif
  } else {
    pinMode(_sck, OUTPUT);

    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
    445a:	09 f0       	breq	.+2      	; 0x445e <main+0x910>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:110
      // idle low on mode 0 and 1
      digitalWrite(_sck, LOW);
    } else {
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    445c:	61 e0       	ldi	r22, 0x01	; 1
    445e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <tempSensor+0xc>
    4462:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:112
    }
    if (_mosi != -1) {
    4466:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tempSensor+0xd>
    446a:	8f 3f       	cpi	r24, 0xFF	; 255
    446c:	41 f0       	breq	.+16     	; 0x447e <main+0x930>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:113
      pinMode(_mosi, OUTPUT);
    446e:	61 e0       	ldi	r22, 0x01	; 1
    4470:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:114
      digitalWrite(_mosi, HIGH);
    4474:	61 e0       	ldi	r22, 0x01	; 1
    4476:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tempSensor+0xd>
    447a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:116
    }
    if (_miso != -1) {
    447e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <tempSensor+0xe>
    4482:	8f 3f       	cpi	r24, 0xFF	; 255
    4484:	09 f4       	brne	.+2      	; 0x4488 <main+0x93a>
    4486:	fb cb       	rjmp	.-2058   	; 0x3c7e <main+0x130>
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:117
      pinMode(_miso, INPUT);
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <pinMode>
    448e:	f7 cb       	rjmp	.-2066   	; 0x3c7e <main+0x130>
start():
c:\Users\admin\Documents\Arduino\libraries\Ticker/Ticker.cpp:43
Ticker::~Ticker() {}

void Ticker::start() {
	if (callback == NULL) return;
	if (resolution == MILLIS) lastTime = millis();
	else lastTime = micros();
    4490:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <micros>
    4494:	0e cf       	rjmp	.-484    	; 0x42b2 <main+0x764>
Heating():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:240
}

void Heating(void) {
  char txt[20];
  
  sprintf(txt,"Calentando  ");
    4496:	82 ed       	ldi	r24, 0xD2	; 210
    4498:	92 e0       	ldi	r25, 0x02	; 2
    449a:	9f 93       	push	r25
    449c:	8f 93       	push	r24
    449e:	1f 93       	push	r17
    44a0:	0f 93       	push	r16
    44a2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:241
  vfd.Print(txt,0);
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	c8 01       	movw	r24, r16
    44aa:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:243

  sprintf(txt,"%02d:%02d:%02d",Seconds/3600, Seconds/60, Seconds % 60);
    44ae:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <Seconds>
    44b2:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <Seconds+0x1>
    44b6:	c9 01       	movw	r24, r18
    44b8:	b5 01       	movw	r22, r10
    44ba:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    44be:	9f 93       	push	r25
    44c0:	8f 93       	push	r24
    44c2:	7f 93       	push	r23
    44c4:	6f 93       	push	r22
    44c6:	c9 01       	movw	r24, r18
    44c8:	60 e1       	ldi	r22, 0x10	; 16
    44ca:	7e e0       	ldi	r23, 0x0E	; 14
    44cc:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    44d0:	7f 93       	push	r23
    44d2:	6f 93       	push	r22
    44d4:	3f 92       	push	r3
    44d6:	2f 92       	push	r2
    44d8:	1f 93       	push	r17
    44da:	0f 93       	push	r16
    44dc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:244
  vfd.Print(txt,12);
    44e0:	6c e0       	ldi	r22, 0x0C	; 12
    44e2:	c8 01       	movw	r24, r16
    44e4:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:246

  sprintf(txt,"%1.1f C   ", Temperature);
    44e8:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <Temperature+0x3>
    44ec:	8f 93       	push	r24
    44ee:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    44f2:	8f 93       	push	r24
    44f4:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <Temperature+0x1>
    44f8:	8f 93       	push	r24
    44fa:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Temperature>
    44fe:	8f 93       	push	r24
    4500:	8e ee       	ldi	r24, 0xEE	; 238
    4502:	92 e0       	ldi	r25, 0x02	; 2
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	1f 93       	push	r17
    450a:	0f 93       	push	r16
    450c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:247
  vfd.Print(txt,20);
    4510:	64 e1       	ldi	r22, 0x14	; 20
    4512:	c8 01       	movw	r24, r16
    4514:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:249

  sprintf(txt," %1.1f Psi ", Pressure);
    4518:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Pressure+0x3>
    451c:	8f 93       	push	r24
    451e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <Pressure+0x2>
    4522:	8f 93       	push	r24
    4524:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Pressure+0x1>
    4528:	8f 93       	push	r24
    452a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <Pressure>
    452e:	8f 93       	push	r24
    4530:	9f 92       	push	r9
    4532:	8f 92       	push	r8
    4534:	1f 93       	push	r17
    4536:	0f 93       	push	r16
    4538:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:250
  vfd.Print(txt,40-strlen(txt));
    453c:	f8 01       	movw	r30, r16
    453e:	01 90       	ld	r0, Z+
    4540:	00 20       	and	r0, r0
    4542:	e9 f7       	brne	.-6      	; 0x453e <main+0x9f0>
    4544:	60 2f       	mov	r22, r16
    4546:	6e 1b       	sub	r22, r30
    4548:	67 5d       	subi	r22, 0xD7	; 215
    454a:	c8 01       	movw	r24, r16
    454c:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:252

  digitalWrite(HEATER_ENABLE, HEATER_ON);
    4550:	61 e0       	ldi	r22, 0x01	; 1
    4552:	8c e1       	ldi	r24, 0x1C	; 28
    4554:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:254

  if (Temperature >=97.0) {
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	42 ec       	ldi	r20, 0xC2	; 194
    4568:	52 e4       	ldi	r21, 0x42	; 66
    456a:	60 91 1f 05 	lds	r22, 0x051F	; 0x80051f <Temperature>
    456e:	70 91 20 05 	lds	r23, 0x0520	; 0x800520 <Temperature+0x1>
    4572:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    4576:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <Temperature+0x3>
    457a:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:255
    digitalWrite(VENT_SOLENOID,VALVE_CLOSE);
    457e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:254
  sprintf(txt," %1.1f Psi ", Pressure);
  vfd.Print(txt,40-strlen(txt));

  digitalWrite(HEATER_ENABLE, HEATER_ON);

  if (Temperature >=97.0) {
    4580:	87 fd       	sbrc	r24, 7
    4582:	5f cf       	rjmp	.-322    	; 0x4442 <main+0x8f4>
Cooling():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:309
  }

  digitalWrite(HEATER_ENABLE, HEATER_OFF);

  if (Temperature < 102.0) {
    digitalWrite(VENT_SOLENOID, VALVE_OPEN);
    4584:	88 e1       	ldi	r24, 0x18	; 24
    4586:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
    458a:	5b cf       	rjmp	.-330    	; 0x4442 <main+0x8f4>
Sterilizing():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:262
}

void Sterilizing(void) {
  char txt[20];
  
  sprintf(txt,"Esteriliz.  ");
    458c:	25 e0       	ldi	r18, 0x05	; 5
    458e:	33 e0       	ldi	r19, 0x03	; 3
    4590:	3f 93       	push	r19
    4592:	2f 93       	push	r18
    4594:	1f 93       	push	r17
    4596:	0f 93       	push	r16
    4598:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:263
  vfd.Print(txt,0);
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	c8 01       	movw	r24, r16
    45a0:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:265

  sprintf(txt,"%02d:%02d:%02d",Seconds/3600, Seconds/60, Seconds % 60);
    45a4:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <Seconds>
    45a8:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <Seconds+0x1>
    45ac:	c9 01       	movw	r24, r18
    45ae:	b5 01       	movw	r22, r10
    45b0:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    45b4:	9f 93       	push	r25
    45b6:	8f 93       	push	r24
    45b8:	7f 93       	push	r23
    45ba:	6f 93       	push	r22
    45bc:	c9 01       	movw	r24, r18
    45be:	60 e1       	ldi	r22, 0x10	; 16
    45c0:	7e e0       	ldi	r23, 0x0E	; 14
    45c2:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    45c6:	7f 93       	push	r23
    45c8:	6f 93       	push	r22
    45ca:	3f 92       	push	r3
    45cc:	2f 92       	push	r2
    45ce:	1f 93       	push	r17
    45d0:	0f 93       	push	r16
    45d2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:266
  vfd.Print(txt,12);
    45d6:	6c e0       	ldi	r22, 0x0C	; 12
    45d8:	c8 01       	movw	r24, r16
    45da:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:268

  if ((Temperature >= (Setpoint - 0.5))  && (Temperature <= (Setpoint + 0.5))) {
    45de:	70 90 1b 05 	lds	r7, 0x051B	; 0x80051b <Setpoint>
    45e2:	60 90 1c 05 	lds	r6, 0x051C	; 0x80051c <Setpoint+0x1>
    45e6:	50 90 1d 05 	lds	r5, 0x051D	; 0x80051d <Setpoint+0x2>
    45ea:	40 90 1e 05 	lds	r4, 0x051E	; 0x80051e <Setpoint+0x3>
    45ee:	f0 90 1f 05 	lds	r15, 0x051F	; 0x80051f <Temperature>
    45f2:	e0 90 20 05 	lds	r14, 0x0520	; 0x800520 <Temperature+0x1>
    45f6:	d0 90 21 05 	lds	r13, 0x0521	; 0x800521 <Temperature+0x2>
    45fa:	c0 90 22 05 	lds	r12, 0x0522	; 0x800522 <Temperature+0x3>
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	5f e3       	ldi	r21, 0x3F	; 63
    4606:	d3 01       	movw	r26, r6
    4608:	f2 01       	movw	r30, r4
    460a:	6b 2f       	mov	r22, r27
    460c:	7a 2f       	mov	r23, r26
    460e:	8f 2f       	mov	r24, r31
    4610:	9e 2f       	mov	r25, r30
    4612:	0e 94 21 24 	call	0x4842	; 0x4842 <__subsf3>
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	d7 01       	movw	r26, r14
    4622:	f6 01       	movw	r30, r12
    4624:	2b 2f       	mov	r18, r27
    4626:	3a 2f       	mov	r19, r26
    4628:	4f 2f       	mov	r20, r31
    462a:	5e 2f       	mov	r21, r30
    462c:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    4630:	18 16       	cp	r1, r24
    4632:	0c f4       	brge	.+2      	; 0x4636 <main+0xae8>
    4634:	44 c0       	rjmp	.+136    	; 0x46be <main+0xb70>
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e0       	ldi	r20, 0x00	; 0
    463c:	5f e3       	ldi	r21, 0x3F	; 63
    463e:	d3 01       	movw	r26, r6
    4640:	f2 01       	movw	r30, r4
    4642:	6b 2f       	mov	r22, r27
    4644:	7a 2f       	mov	r23, r26
    4646:	8f 2f       	mov	r24, r31
    4648:	9e 2f       	mov	r25, r30
    464a:	0e 94 22 24 	call	0x4844	; 0x4844 <__addsf3>
    464e:	9b 01       	movw	r18, r22
    4650:	ac 01       	movw	r20, r24
    4652:	d7 01       	movw	r26, r14
    4654:	f6 01       	movw	r30, r12
    4656:	6b 2f       	mov	r22, r27
    4658:	7a 2f       	mov	r23, r26
    465a:	8f 2f       	mov	r24, r31
    465c:	9e 2f       	mov	r25, r30
    465e:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    4662:	18 16       	cp	r1, r24
    4664:	64 f1       	brlt	.+88     	; 0x46be <main+0xb70>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:269
    sprintf(txt,"%1.1f C  ", Setpoint);
    4666:	4f 92       	push	r4
    4668:	5f 92       	push	r5
    466a:	6f 92       	push	r6
    466c:	7f 92       	push	r7
    466e:	83 e9       	ldi	r24, 0x93	; 147
    4670:	92 e0       	ldi	r25, 0x02	; 2
    4672:	9f 93       	push	r25
    4674:	8f 93       	push	r24
    4676:	1f 93       	push	r17
    4678:	0f 93       	push	r16
    467a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:270
    vfd.Print(txt,20);
    467e:	64 e1       	ldi	r22, 0x14	; 20
    4680:	c8 01       	movw	r24, r16
    4682:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:272

    sprintf(txt," %1.1f Psi ", 15.0);
    4686:	81 e4       	ldi	r24, 0x41	; 65
    4688:	8f 93       	push	r24
    468a:	80 e7       	ldi	r24, 0x70	; 112
    468c:	8f 93       	push	r24
    468e:	1f 92       	push	r1
    4690:	1f 92       	push	r1
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:278
    vfd.Print(txt,40-strlen(txt));
  } else {
    sprintf(txt,"%1.1f C   ", Temperature);
    vfd.Print(txt,20);

    sprintf(txt," %1.1f Psi ", Pressure);
    4692:	9f 92       	push	r9
    4694:	8f 92       	push	r8
    4696:	1f 93       	push	r17
    4698:	0f 93       	push	r16
    469a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:279
    vfd.Print(txt,40-strlen(txt));
    469e:	f8 01       	movw	r30, r16
    46a0:	01 90       	ld	r0, Z+
    46a2:	00 20       	and	r0, r0
    46a4:	e9 f7       	brne	.-6      	; 0x46a0 <main+0xb52>
    46a6:	60 2f       	mov	r22, r16
    46a8:	6e 1b       	sub	r22, r30
    46aa:	67 5d       	subi	r22, 0xD7	; 215
    46ac:	c8 01       	movw	r24, r16
    46ae:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	c2 ce       	rjmp	.-636    	; 0x4442 <main+0x8f4>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:275
    vfd.Print(txt,20);

    sprintf(txt," %1.1f Psi ", 15.0);
    vfd.Print(txt,40-strlen(txt));
  } else {
    sprintf(txt,"%1.1f C   ", Temperature);
    46be:	cf 92       	push	r12
    46c0:	df 92       	push	r13
    46c2:	ef 92       	push	r14
    46c4:	ff 92       	push	r15
    46c6:	2e ee       	ldi	r18, 0xEE	; 238
    46c8:	32 e0       	ldi	r19, 0x02	; 2
    46ca:	3f 93       	push	r19
    46cc:	2f 93       	push	r18
    46ce:	1f 93       	push	r17
    46d0:	0f 93       	push	r16
    46d2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:276
    vfd.Print(txt,20);
    46d6:	64 e1       	ldi	r22, 0x14	; 20
    46d8:	c8 01       	movw	r24, r16
    46da:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:278

    sprintf(txt," %1.1f Psi ", Pressure);
    46de:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Pressure+0x3>
    46e2:	8f 93       	push	r24
    46e4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <Pressure+0x2>
    46e8:	8f 93       	push	r24
    46ea:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Pressure+0x1>
    46ee:	8f 93       	push	r24
    46f0:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <Pressure>
    46f4:	8f 93       	push	r24
    46f6:	cd cf       	rjmp	.-102    	; 0x4692 <main+0xb44>
Cooling():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:287
}

void Cooling(void) {
  char txt[20];
  
  sprintf(txt,"Enfriando  ");
    46f8:	82 e1       	ldi	r24, 0x12	; 18
    46fa:	93 e0       	ldi	r25, 0x03	; 3
    46fc:	9f 93       	push	r25
    46fe:	8f 93       	push	r24
    4700:	1f 93       	push	r17
    4702:	0f 93       	push	r16
    4704:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:288
  vfd.Print(txt,0);
    4708:	60 e0       	ldi	r22, 0x00	; 0
    470a:	c8 01       	movw	r24, r16
    470c:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:290

  InCycle = false;
    4710:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <InCycle>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:292

  sprintf(txt,"%02d:%02d:%02d",Seconds/3600, Seconds/60, Seconds % 60);
    4714:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <Seconds>
    4718:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <Seconds+0x1>
    471c:	c9 01       	movw	r24, r18
    471e:	b5 01       	movw	r22, r10
    4720:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    4724:	9f 93       	push	r25
    4726:	8f 93       	push	r24
    4728:	7f 93       	push	r23
    472a:	6f 93       	push	r22
    472c:	c9 01       	movw	r24, r18
    472e:	60 e1       	ldi	r22, 0x10	; 16
    4730:	7e e0       	ldi	r23, 0x0E	; 14
    4732:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__udivmodhi4>
    4736:	7f 93       	push	r23
    4738:	6f 93       	push	r22
    473a:	3f 92       	push	r3
    473c:	2f 92       	push	r2
    473e:	1f 93       	push	r17
    4740:	0f 93       	push	r16
    4742:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:293
  vfd.Print(txt,12);
    4746:	6c e0       	ldi	r22, 0x0C	; 12
    4748:	c8 01       	movw	r24, r16
    474a:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:295

  sprintf(txt,"%1.1f C  ", Temperature);
    474e:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <Temperature+0x3>
    4752:	8f 93       	push	r24
    4754:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    4758:	8f 93       	push	r24
    475a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <Temperature+0x1>
    475e:	8f 93       	push	r24
    4760:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Temperature>
    4764:	8f 93       	push	r24
    4766:	83 e9       	ldi	r24, 0x93	; 147
    4768:	92 e0       	ldi	r25, 0x02	; 2
    476a:	9f 93       	push	r25
    476c:	8f 93       	push	r24
    476e:	1f 93       	push	r17
    4770:	0f 93       	push	r16
    4772:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:296
  vfd.Print(txt,20);
    4776:	64 e1       	ldi	r22, 0x14	; 20
    4778:	c8 01       	movw	r24, r16
    477a:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:298

  if (Pressure >=15.0) {
    477e:	f0 90 92 03 	lds	r15, 0x0392	; 0x800392 <Pressure>
    4782:	e0 90 93 03 	lds	r14, 0x0393	; 0x800393 <Pressure+0x1>
    4786:	d0 90 94 03 	lds	r13, 0x0394	; 0x800394 <Pressure+0x2>
    478a:	c0 90 95 03 	lds	r12, 0x0395	; 0x800395 <Pressure+0x3>
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	f8 94       	cli
    4792:	de bf       	out	0x3e, r29	; 62
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	cd bf       	out	0x3d, r28	; 61
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	40 e7       	ldi	r20, 0x70	; 112
    479e:	51 e4       	ldi	r21, 0x41	; 65
    47a0:	d7 01       	movw	r26, r14
    47a2:	f6 01       	movw	r30, r12
    47a4:	6b 2f       	mov	r22, r27
    47a6:	7a 2f       	mov	r23, r26
    47a8:	8f 2f       	mov	r24, r31
    47aa:	9e 2f       	mov	r25, r30
    47ac:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__gesf2>
    47b0:	87 fd       	sbrc	r24, 7
    47b2:	31 c0       	rjmp	.+98     	; 0x4816 <main+0xcc8>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:299
    sprintf(txt," %1.1f Psi ", 15.0);
    47b4:	81 e4       	ldi	r24, 0x41	; 65
    47b6:	8f 93       	push	r24
    47b8:	80 e7       	ldi	r24, 0x70	; 112
    47ba:	8f 93       	push	r24
    47bc:	1f 92       	push	r1
    47be:	1f 92       	push	r1
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:302
  vfd.Print(txt,40-strlen(txt));
  } else {
    sprintf(txt," %1.1f Psi ", Pressure);
    47c0:	9f 92       	push	r9
    47c2:	8f 92       	push	r8
    47c4:	1f 93       	push	r17
    47c6:	0f 93       	push	r16
    47c8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf_>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:303
    vfd.Print(txt,40-strlen(txt));
    47cc:	f8 01       	movw	r30, r16
    47ce:	01 90       	ld	r0, Z+
    47d0:	00 20       	and	r0, r0
    47d2:	e9 f7       	brne	.-6      	; 0x47ce <main+0xc80>
    47d4:	60 2f       	mov	r22, r16
    47d6:	6e 1b       	sub	r22, r30
    47d8:	67 5d       	subi	r22, 0xD7	; 215
    47da:	c8 01       	movw	r24, r16
    47dc:	0e 94 77 14 	call	0x28ee	; 0x28ee <VFD_NEC_FC20X2::Print(char*, unsigned char) [clone .constprop.51]>
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:306
  }

  digitalWrite(HEATER_ENABLE, HEATER_OFF);
    47ea:	60 e0       	ldi	r22, 0x00	; 0
    47ec:	8c e1       	ldi	r24, 0x1C	; 28
    47ee:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalWrite>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:308

  if (Temperature < 102.0) {
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	4c ec       	ldi	r20, 0xCC	; 204
    47f8:	52 e4       	ldi	r21, 0x42	; 66
    47fa:	60 91 1f 05 	lds	r22, 0x051F	; 0x80051f <Temperature>
    47fe:	70 91 20 05 	lds	r23, 0x0520	; 0x800520 <Temperature+0x1>
    4802:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Temperature+0x2>
    4806:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <Temperature+0x3>
    480a:	0e 94 8e 24 	call	0x491c	; 0x491c <__cmpsf2>
    480e:	87 ff       	sbrs	r24, 7
    4810:	18 ce       	rjmp	.-976    	; 0x4442 <main+0x8f4>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:309
    digitalWrite(VENT_SOLENOID, VALVE_OPEN);
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	b7 ce       	rjmp	.-658    	; 0x4584 <main+0xa36>
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:302

  if (Pressure >=15.0) {
    sprintf(txt," %1.1f Psi ", 15.0);
  vfd.Print(txt,40-strlen(txt));
  } else {
    sprintf(txt," %1.1f Psi ", Pressure);
    4816:	cf 92       	push	r12
    4818:	df 92       	push	r13
    481a:	ef 92       	push	r14
    481c:	ff 92       	push	r15
    481e:	d0 cf       	rjmp	.-96     	; 0x47c0 <main+0xc72>

00004820 <_GLOBAL__sub_D_tempSensor>:
_GLOBAL__sub_D_tempSensor():
c:\Users\admin\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_SPIDevice.cpp:83

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
  if (_spiSetting)
    4820:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <tempSensor+0x2>
    4824:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <tempSensor+0x3>
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	11 f0       	breq	.+4      	; 0x4830 <_GLOBAL__sub_D_tempSensor+0x10>
operator delete():
C:\Users\admin\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    482c:	0c 94 39 29 	jmp	0x5272	; 0x5272 <free>
_GLOBAL__sub_D_tempSensor():
C:\Users\admin\Documents\Github\marketforge\MarketForge_Control/MarketForge_Control.ino:540
      break;
  }



}
    4830:	08 95       	ret

00004832 <eeprom_read_byte>:
eeprom_read_byte():
    4832:	f9 99       	sbic	0x1f, 1	; 31
    4834:	fe cf       	rjmp	.-4      	; 0x4832 <eeprom_read_byte>
    4836:	92 bd       	out	0x22, r25	; 34
    4838:	81 bd       	out	0x21, r24	; 33
    483a:	f8 9a       	sbi	0x1f, 0	; 31
    483c:	99 27       	eor	r25, r25
    483e:	80 b5       	in	r24, 0x20	; 32
    4840:	08 95       	ret

00004842 <__subsf3>:
__subsf3():
    4842:	50 58       	subi	r21, 0x80	; 128

00004844 <__addsf3>:
    4844:	bb 27       	eor	r27, r27
    4846:	aa 27       	eor	r26, r26
    4848:	0e 94 39 24 	call	0x4872	; 0x4872 <__addsf3x>
    484c:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__fp_round>
__addsf3():
    4850:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__fp_pscA>
    4854:	38 f0       	brcs	.+14     	; 0x4864 <__addsf3+0x20>
    4856:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__fp_pscB>
    485a:	20 f0       	brcs	.+8      	; 0x4864 <__addsf3+0x20>
    485c:	39 f4       	brne	.+14     	; 0x486c <__addsf3+0x28>
    485e:	9f 3f       	cpi	r25, 0xFF	; 255
    4860:	19 f4       	brne	.+6      	; 0x4868 <__addsf3+0x24>
    4862:	26 f4       	brtc	.+8      	; 0x486c <__addsf3+0x28>
    4864:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__fp_nan>
    4868:	0e f4       	brtc	.+2      	; 0x486c <__addsf3+0x28>
    486a:	e0 95       	com	r30
    486c:	e7 fb       	bst	r30, 7
    486e:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__fp_inf>

00004872 <__addsf3x>:
__addsf3x():
    4872:	e9 2f       	mov	r30, r25
    4874:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__fp_split3>
    4878:	58 f3       	brcs	.-42     	; 0x4850 <__addsf3+0xc>
    487a:	ba 17       	cp	r27, r26
    487c:	62 07       	cpc	r22, r18
    487e:	73 07       	cpc	r23, r19
    4880:	84 07       	cpc	r24, r20
    4882:	95 07       	cpc	r25, r21
    4884:	20 f0       	brcs	.+8      	; 0x488e <__addsf3x+0x1c>
    4886:	79 f4       	brne	.+30     	; 0x48a6 <__addsf3x+0x34>
    4888:	a6 f5       	brtc	.+104    	; 0x48f2 <__addsf3x+0x80>
    488a:	0c 94 76 26 	jmp	0x4cec	; 0x4cec <__fp_zero>
    488e:	0e f4       	brtc	.+2      	; 0x4892 <__addsf3x+0x20>
    4890:	e0 95       	com	r30
    4892:	0b 2e       	mov	r0, r27
    4894:	ba 2f       	mov	r27, r26
    4896:	a0 2d       	mov	r26, r0
    4898:	0b 01       	movw	r0, r22
    489a:	b9 01       	movw	r22, r18
    489c:	90 01       	movw	r18, r0
    489e:	0c 01       	movw	r0, r24
    48a0:	ca 01       	movw	r24, r20
    48a2:	a0 01       	movw	r20, r0
    48a4:	11 24       	eor	r1, r1
    48a6:	ff 27       	eor	r31, r31
    48a8:	59 1b       	sub	r21, r25
    48aa:	99 f0       	breq	.+38     	; 0x48d2 <__addsf3x+0x60>
    48ac:	59 3f       	cpi	r21, 0xF9	; 249
    48ae:	50 f4       	brcc	.+20     	; 0x48c4 <__addsf3x+0x52>
    48b0:	50 3e       	cpi	r21, 0xE0	; 224
    48b2:	68 f1       	brcs	.+90     	; 0x490e <__addsf3x+0x9c>
    48b4:	1a 16       	cp	r1, r26
    48b6:	f0 40       	sbci	r31, 0x00	; 0
    48b8:	a2 2f       	mov	r26, r18
    48ba:	23 2f       	mov	r18, r19
    48bc:	34 2f       	mov	r19, r20
    48be:	44 27       	eor	r20, r20
    48c0:	58 5f       	subi	r21, 0xF8	; 248
    48c2:	f3 cf       	rjmp	.-26     	; 0x48aa <__addsf3x+0x38>
    48c4:	46 95       	lsr	r20
    48c6:	37 95       	ror	r19
    48c8:	27 95       	ror	r18
    48ca:	a7 95       	ror	r26
    48cc:	f0 40       	sbci	r31, 0x00	; 0
    48ce:	53 95       	inc	r21
    48d0:	c9 f7       	brne	.-14     	; 0x48c4 <__addsf3x+0x52>
    48d2:	7e f4       	brtc	.+30     	; 0x48f2 <__addsf3x+0x80>
    48d4:	1f 16       	cp	r1, r31
    48d6:	ba 0b       	sbc	r27, r26
    48d8:	62 0b       	sbc	r22, r18
    48da:	73 0b       	sbc	r23, r19
    48dc:	84 0b       	sbc	r24, r20
    48de:	ba f0       	brmi	.+46     	; 0x490e <__addsf3x+0x9c>
    48e0:	91 50       	subi	r25, 0x01	; 1
    48e2:	a1 f0       	breq	.+40     	; 0x490c <__addsf3x+0x9a>
    48e4:	ff 0f       	add	r31, r31
    48e6:	bb 1f       	adc	r27, r27
    48e8:	66 1f       	adc	r22, r22
    48ea:	77 1f       	adc	r23, r23
    48ec:	88 1f       	adc	r24, r24
    48ee:	c2 f7       	brpl	.-16     	; 0x48e0 <__addsf3x+0x6e>
    48f0:	0e c0       	rjmp	.+28     	; 0x490e <__addsf3x+0x9c>
    48f2:	ba 0f       	add	r27, r26
    48f4:	62 1f       	adc	r22, r18
    48f6:	73 1f       	adc	r23, r19
    48f8:	84 1f       	adc	r24, r20
    48fa:	48 f4       	brcc	.+18     	; 0x490e <__addsf3x+0x9c>
    48fc:	87 95       	ror	r24
    48fe:	77 95       	ror	r23
    4900:	67 95       	ror	r22
    4902:	b7 95       	ror	r27
    4904:	f7 95       	ror	r31
    4906:	9e 3f       	cpi	r25, 0xFE	; 254
    4908:	08 f0       	brcs	.+2      	; 0x490c <__addsf3x+0x9a>
    490a:	b0 cf       	rjmp	.-160    	; 0x486c <__addsf3+0x28>
    490c:	93 95       	inc	r25
    490e:	88 0f       	add	r24, r24
    4910:	08 f0       	brcs	.+2      	; 0x4914 <__addsf3x+0xa2>
    4912:	99 27       	eor	r25, r25
    4914:	ee 0f       	add	r30, r30
    4916:	97 95       	ror	r25
    4918:	87 95       	ror	r24
    491a:	08 95       	ret

0000491c <__cmpsf2>:
    491c:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <__fp_cmp>
    4920:	08 f4       	brcc	.+2      	; 0x4924 <__cmpsf2+0x8>
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	08 95       	ret

00004926 <__divsf3>:
    4926:	0e 94 a7 24 	call	0x494e	; 0x494e <__divsf3x>
    492a:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__fp_round>
    492e:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__fp_pscB>
    4932:	58 f0       	brcs	.+22     	; 0x494a <__divsf3+0x24>
    4934:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__fp_pscA>
    4938:	40 f0       	brcs	.+16     	; 0x494a <__divsf3+0x24>
    493a:	29 f4       	brne	.+10     	; 0x4946 <__divsf3+0x20>
    493c:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    493e:	29 f0       	breq	.+10     	; 0x494a <__divsf3+0x24>
    4940:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__fp_inf>
    4944:	51 11       	cpse	r21, r1
    4946:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__fp_szero>
    494a:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__fp_nan>

0000494e <__divsf3x>:
__divsf3x():
    494e:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__fp_split3>
    4952:	68 f3       	brcs	.-38     	; 0x492e <__divsf3+0x8>

00004954 <__divsf3_pse>:
    4954:	99 23       	and	r25, r25
    4956:	b1 f3       	breq	.-20     	; 0x4944 <__divsf3+0x1e>
    4958:	55 23       	and	r21, r21
    495a:	91 f3       	breq	.-28     	; 0x4940 <__divsf3+0x1a>
    495c:	95 1b       	sub	r25, r21
    495e:	55 0b       	sbc	r21, r21
    4960:	bb 27       	eor	r27, r27
    4962:	aa 27       	eor	r26, r26
    4964:	62 17       	cp	r22, r18
    4966:	73 07       	cpc	r23, r19
    4968:	84 07       	cpc	r24, r20
    496a:	38 f0       	brcs	.+14     	; 0x497a <__divsf3_pse+0x26>
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	5f 4f       	sbci	r21, 0xFF	; 255
    4970:	22 0f       	add	r18, r18
    4972:	33 1f       	adc	r19, r19
    4974:	44 1f       	adc	r20, r20
    4976:	aa 1f       	adc	r26, r26
    4978:	a9 f3       	breq	.-22     	; 0x4964 <__divsf3_pse+0x10>
    497a:	35 d0       	rcall	.+106    	; 0x49e6 <__divsf3_pse+0x92>
    497c:	0e 2e       	mov	r0, r30
    497e:	3a f0       	brmi	.+14     	; 0x498e <__divsf3_pse+0x3a>
    4980:	e0 e8       	ldi	r30, 0x80	; 128
    4982:	32 d0       	rcall	.+100    	; 0x49e8 <__divsf3_pse+0x94>
    4984:	91 50       	subi	r25, 0x01	; 1
    4986:	50 40       	sbci	r21, 0x00	; 0
    4988:	e6 95       	lsr	r30
    498a:	00 1c       	adc	r0, r0
    498c:	ca f7       	brpl	.-14     	; 0x4980 <__divsf3_pse+0x2c>
    498e:	2b d0       	rcall	.+86     	; 0x49e6 <__divsf3_pse+0x92>
    4990:	fe 2f       	mov	r31, r30
    4992:	29 d0       	rcall	.+82     	; 0x49e6 <__divsf3_pse+0x92>
    4994:	66 0f       	add	r22, r22
    4996:	77 1f       	adc	r23, r23
    4998:	88 1f       	adc	r24, r24
    499a:	bb 1f       	adc	r27, r27
    499c:	26 17       	cp	r18, r22
    499e:	37 07       	cpc	r19, r23
    49a0:	48 07       	cpc	r20, r24
    49a2:	ab 07       	cpc	r26, r27
    49a4:	b0 e8       	ldi	r27, 0x80	; 128
    49a6:	09 f0       	breq	.+2      	; 0x49aa <__divsf3_pse+0x56>
    49a8:	bb 0b       	sbc	r27, r27
    49aa:	80 2d       	mov	r24, r0
    49ac:	bf 01       	movw	r22, r30
    49ae:	ff 27       	eor	r31, r31
    49b0:	93 58       	subi	r25, 0x83	; 131
    49b2:	5f 4f       	sbci	r21, 0xFF	; 255
    49b4:	3a f0       	brmi	.+14     	; 0x49c4 <__divsf3_pse+0x70>
    49b6:	9e 3f       	cpi	r25, 0xFE	; 254
    49b8:	51 05       	cpc	r21, r1
    49ba:	78 f0       	brcs	.+30     	; 0x49da <__divsf3_pse+0x86>
    49bc:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__fp_inf>
    49c0:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__fp_szero>
    49c4:	5f 3f       	cpi	r21, 0xFF	; 255
    49c6:	e4 f3       	brlt	.-8      	; 0x49c0 <__divsf3_pse+0x6c>
    49c8:	98 3e       	cpi	r25, 0xE8	; 232
    49ca:	d4 f3       	brlt	.-12     	; 0x49c0 <__divsf3_pse+0x6c>
    49cc:	86 95       	lsr	r24
    49ce:	77 95       	ror	r23
    49d0:	67 95       	ror	r22
    49d2:	b7 95       	ror	r27
    49d4:	f7 95       	ror	r31
    49d6:	9f 5f       	subi	r25, 0xFF	; 255
    49d8:	c9 f7       	brne	.-14     	; 0x49cc <__divsf3_pse+0x78>
    49da:	88 0f       	add	r24, r24
    49dc:	91 1d       	adc	r25, r1
    49de:	96 95       	lsr	r25
    49e0:	87 95       	ror	r24
    49e2:	97 f9       	bld	r25, 7
    49e4:	08 95       	ret
    49e6:	e1 e0       	ldi	r30, 0x01	; 1
    49e8:	66 0f       	add	r22, r22
    49ea:	77 1f       	adc	r23, r23
    49ec:	88 1f       	adc	r24, r24
    49ee:	bb 1f       	adc	r27, r27
    49f0:	62 17       	cp	r22, r18
    49f2:	73 07       	cpc	r23, r19
    49f4:	84 07       	cpc	r24, r20
    49f6:	ba 07       	cpc	r27, r26
    49f8:	20 f0       	brcs	.+8      	; 0x4a02 <__divsf3_pse+0xae>
    49fa:	62 1b       	sub	r22, r18
    49fc:	73 0b       	sbc	r23, r19
    49fe:	84 0b       	sbc	r24, r20
    4a00:	ba 0b       	sbc	r27, r26
    4a02:	ee 1f       	adc	r30, r30
    4a04:	88 f7       	brcc	.-30     	; 0x49e8 <__divsf3_pse+0x94>
    4a06:	e0 95       	com	r30
    4a08:	08 95       	ret

00004a0a <__fixsfdi>:
    4a0a:	be e3       	ldi	r27, 0x3E	; 62
    4a0c:	04 d0       	rcall	.+8      	; 0x4a16 <__fixunssfdi+0x2>
    4a0e:	08 f4       	brcc	.+2      	; 0x4a12 <__fixsfdi+0x8>
    4a10:	90 e8       	ldi	r25, 0x80	; 128
    4a12:	08 95       	ret

00004a14 <__fixunssfdi>:
    4a14:	bf e3       	ldi	r27, 0x3F	; 63
    4a16:	22 27       	eor	r18, r18
    4a18:	33 27       	eor	r19, r19
    4a1a:	a9 01       	movw	r20, r18
    4a1c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__fp_splitA>
    4a20:	60 f1       	brcs	.+88     	; 0x4a7a <__fixunssfdi+0x66>
    4a22:	9f 57       	subi	r25, 0x7F	; 127
    4a24:	48 f1       	brcs	.+82     	; 0x4a78 <__fixunssfdi+0x64>
    4a26:	b9 17       	cp	r27, r25
    4a28:	40 f1       	brcs	.+80     	; 0x4a7a <__fixunssfdi+0x66>
__fixunssfdi():
    4a2a:	bf e3       	ldi	r27, 0x3F	; 63
    4a2c:	b9 1b       	sub	r27, r25
    4a2e:	99 27       	eor	r25, r25
    4a30:	b8 50       	subi	r27, 0x08	; 8
    4a32:	3a f4       	brpl	.+14     	; 0x4a42 <__fixunssfdi+0x2e>
    4a34:	66 0f       	add	r22, r22
    4a36:	77 1f       	adc	r23, r23
    4a38:	88 1f       	adc	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	b3 95       	inc	r27
    4a3e:	d2 f3       	brmi	.-12     	; 0x4a34 <__fixunssfdi+0x20>
    4a40:	16 c0       	rjmp	.+44     	; 0x4a6e <__fixunssfdi+0x5a>
    4a42:	b8 50       	subi	r27, 0x08	; 8
    4a44:	4a f0       	brmi	.+18     	; 0x4a58 <__fixunssfdi+0x44>
    4a46:	23 2f       	mov	r18, r19
    4a48:	34 2f       	mov	r19, r20
    4a4a:	45 2f       	mov	r20, r21
    4a4c:	56 2f       	mov	r21, r22
    4a4e:	67 2f       	mov	r22, r23
    4a50:	78 2f       	mov	r23, r24
    4a52:	88 27       	eor	r24, r24
    4a54:	b8 50       	subi	r27, 0x08	; 8
    4a56:	ba f7       	brpl	.-18     	; 0x4a46 <__fixunssfdi+0x32>
    4a58:	b8 5f       	subi	r27, 0xF8	; 248
    4a5a:	49 f0       	breq	.+18     	; 0x4a6e <__fixunssfdi+0x5a>
    4a5c:	86 95       	lsr	r24
    4a5e:	77 95       	ror	r23
    4a60:	67 95       	ror	r22
    4a62:	57 95       	ror	r21
    4a64:	47 95       	ror	r20
    4a66:	37 95       	ror	r19
    4a68:	27 95       	ror	r18
    4a6a:	ba 95       	dec	r27
    4a6c:	b9 f7       	brne	.-18     	; 0x4a5c <__fixunssfdi+0x48>
    4a6e:	16 f4       	brtc	.+4      	; 0x4a74 <__fixunssfdi+0x60>
    4a70:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__fp_negdi>
    4a74:	88 94       	clc
    4a76:	08 95       	ret
    4a78:	88 94       	clc
    4a7a:	60 e0       	ldi	r22, 0x00	; 0
    4a7c:	70 e0       	ldi	r23, 0x00	; 0
    4a7e:	cb 01       	movw	r24, r22
    4a80:	08 95       	ret

00004a82 <__fixsfsi>:
__fixsfsi():
    4a82:	0e 94 48 25 	call	0x4a90	; 0x4a90 <__fixunssfsi>
    4a86:	68 94       	set
    4a88:	b1 11       	cpse	r27, r1
    4a8a:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__fp_szero>
    4a8e:	08 95       	ret

00004a90 <__fixunssfsi>:
__fixunssfsi():
    4a90:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__fp_splitA>
    4a94:	88 f0       	brcs	.+34     	; 0x4ab8 <__fixunssfsi+0x28>
    4a96:	9f 57       	subi	r25, 0x7F	; 127
    4a98:	98 f0       	brcs	.+38     	; 0x4ac0 <__fixunssfsi+0x30>
    4a9a:	b9 2f       	mov	r27, r25
    4a9c:	99 27       	eor	r25, r25
    4a9e:	b7 51       	subi	r27, 0x17	; 23
    4aa0:	b0 f0       	brcs	.+44     	; 0x4ace <__fixunssfsi+0x3e>
    4aa2:	e1 f0       	breq	.+56     	; 0x4adc <__fixunssfsi+0x4c>
    4aa4:	66 0f       	add	r22, r22
    4aa6:	77 1f       	adc	r23, r23
    4aa8:	88 1f       	adc	r24, r24
    4aaa:	99 1f       	adc	r25, r25
    4aac:	1a f0       	brmi	.+6      	; 0x4ab4 <__fixunssfsi+0x24>
    4aae:	ba 95       	dec	r27
    4ab0:	c9 f7       	brne	.-14     	; 0x4aa4 <__fixunssfsi+0x14>
    4ab2:	14 c0       	rjmp	.+40     	; 0x4adc <__fixunssfsi+0x4c>
    4ab4:	b1 30       	cpi	r27, 0x01	; 1
    4ab6:	91 f0       	breq	.+36     	; 0x4adc <__fixunssfsi+0x4c>
    4ab8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__fp_zero>
    4abc:	b1 e0       	ldi	r27, 0x01	; 1
    4abe:	08 95       	ret
    4ac0:	0c 94 76 26 	jmp	0x4cec	; 0x4cec <__fp_zero>
    4ac4:	67 2f       	mov	r22, r23
    4ac6:	78 2f       	mov	r23, r24
    4ac8:	88 27       	eor	r24, r24
    4aca:	b8 5f       	subi	r27, 0xF8	; 248
    4acc:	39 f0       	breq	.+14     	; 0x4adc <__fixunssfsi+0x4c>
    4ace:	b9 3f       	cpi	r27, 0xF9	; 249
    4ad0:	cc f3       	brlt	.-14     	; 0x4ac4 <__fixunssfsi+0x34>
    4ad2:	86 95       	lsr	r24
    4ad4:	77 95       	ror	r23
    4ad6:	67 95       	ror	r22
    4ad8:	b3 95       	inc	r27
    4ada:	d9 f7       	brne	.-10     	; 0x4ad2 <__fixunssfsi+0x42>
    4adc:	3e f4       	brtc	.+14     	; 0x4aec <__fixunssfsi+0x5c>
    4ade:	90 95       	com	r25
    4ae0:	80 95       	com	r24
    4ae2:	70 95       	com	r23
    4ae4:	61 95       	neg	r22
    4ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    4aea:	9f 4f       	sbci	r25, 0xFF	; 255
    4aec:	08 95       	ret

00004aee <__floatdisf>:
__floatdisf():
    4aee:	97 fb       	bst	r25, 7
    4af0:	16 f4       	brtc	.+4      	; 0x4af6 <__floatdisf+0x8>
    4af2:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__fp_negdi>
    4af6:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__fp_di2sf>

00004afa <__floatunsisf>:
__floatunsisf():
    4afa:	e8 94       	clt
    4afc:	09 c0       	rjmp	.+18     	; 0x4b10 <__floatsisf+0x12>

00004afe <__floatsisf>:
    4afe:	97 fb       	bst	r25, 7
    4b00:	3e f4       	brtc	.+14     	; 0x4b10 <__floatsisf+0x12>
    4b02:	90 95       	com	r25
    4b04:	80 95       	com	r24
    4b06:	70 95       	com	r23
    4b08:	61 95       	neg	r22
    4b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b10:	99 23       	and	r25, r25
    4b12:	a9 f0       	breq	.+42     	; 0x4b3e <__floatsisf+0x40>
    4b14:	f9 2f       	mov	r31, r25
    4b16:	96 e9       	ldi	r25, 0x96	; 150
    4b18:	bb 27       	eor	r27, r27
    4b1a:	93 95       	inc	r25
    4b1c:	f6 95       	lsr	r31
    4b1e:	87 95       	ror	r24
    4b20:	77 95       	ror	r23
    4b22:	67 95       	ror	r22
    4b24:	b7 95       	ror	r27
    4b26:	f1 11       	cpse	r31, r1
    4b28:	f8 cf       	rjmp	.-16     	; 0x4b1a <__floatsisf+0x1c>
    4b2a:	fa f4       	brpl	.+62     	; 0x4b6a <__floatsisf+0x6c>
    4b2c:	bb 0f       	add	r27, r27
    4b2e:	11 f4       	brne	.+4      	; 0x4b34 <__floatsisf+0x36>
    4b30:	60 ff       	sbrs	r22, 0
    4b32:	1b c0       	rjmp	.+54     	; 0x4b6a <__floatsisf+0x6c>
    4b34:	6f 5f       	subi	r22, 0xFF	; 255
    4b36:	7f 4f       	sbci	r23, 0xFF	; 255
    4b38:	8f 4f       	sbci	r24, 0xFF	; 255
    4b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b3c:	16 c0       	rjmp	.+44     	; 0x4b6a <__floatsisf+0x6c>
    4b3e:	88 23       	and	r24, r24
    4b40:	11 f0       	breq	.+4      	; 0x4b46 <__floatsisf+0x48>
    4b42:	96 e9       	ldi	r25, 0x96	; 150
    4b44:	11 c0       	rjmp	.+34     	; 0x4b68 <__floatsisf+0x6a>
    4b46:	77 23       	and	r23, r23
    4b48:	21 f0       	breq	.+8      	; 0x4b52 <__floatsisf+0x54>
    4b4a:	9e e8       	ldi	r25, 0x8E	; 142
    4b4c:	87 2f       	mov	r24, r23
    4b4e:	76 2f       	mov	r23, r22
    4b50:	05 c0       	rjmp	.+10     	; 0x4b5c <__floatsisf+0x5e>
    4b52:	66 23       	and	r22, r22
    4b54:	71 f0       	breq	.+28     	; 0x4b72 <__floatsisf+0x74>
    4b56:	96 e8       	ldi	r25, 0x86	; 134
    4b58:	86 2f       	mov	r24, r22
    4b5a:	70 e0       	ldi	r23, 0x00	; 0
    4b5c:	60 e0       	ldi	r22, 0x00	; 0
    4b5e:	2a f0       	brmi	.+10     	; 0x4b6a <__floatsisf+0x6c>
    4b60:	9a 95       	dec	r25
    4b62:	66 0f       	add	r22, r22
    4b64:	77 1f       	adc	r23, r23
    4b66:	88 1f       	adc	r24, r24
    4b68:	da f7       	brpl	.-10     	; 0x4b60 <__floatsisf+0x62>
    4b6a:	88 0f       	add	r24, r24
    4b6c:	96 95       	lsr	r25
    4b6e:	87 95       	ror	r24
    4b70:	97 f9       	bld	r25, 7
    4b72:	08 95       	ret

00004b74 <__floatundisf>:
__floatundisf():
    4b74:	e8 94       	clt

00004b76 <__fp_di2sf>:
    4b76:	f9 2f       	mov	r31, r25
    4b78:	96 eb       	ldi	r25, 0xB6	; 182
    4b7a:	ff 23       	and	r31, r31
    4b7c:	81 f0       	breq	.+32     	; 0x4b9e <__fp_di2sf+0x28>
    4b7e:	12 16       	cp	r1, r18
    4b80:	13 06       	cpc	r1, r19
    4b82:	14 06       	cpc	r1, r20
    4b84:	44 0b       	sbc	r20, r20
    4b86:	93 95       	inc	r25
    4b88:	f6 95       	lsr	r31
    4b8a:	87 95       	ror	r24
    4b8c:	77 95       	ror	r23
    4b8e:	67 95       	ror	r22
    4b90:	57 95       	ror	r21
    4b92:	40 40       	sbci	r20, 0x00	; 0
    4b94:	ff 23       	and	r31, r31
    4b96:	b9 f7       	brne	.-18     	; 0x4b86 <__fp_di2sf+0x10>
    4b98:	1b c0       	rjmp	.+54     	; 0x4bd0 <__fp_di2sf+0x5a>
    4b9a:	99 27       	eor	r25, r25
    4b9c:	08 95       	ret
    4b9e:	88 23       	and	r24, r24
    4ba0:	51 f4       	brne	.+20     	; 0x4bb6 <__fp_di2sf+0x40>
    4ba2:	98 50       	subi	r25, 0x08	; 8
    4ba4:	d2 f7       	brpl	.-12     	; 0x4b9a <__fp_di2sf+0x24>
    4ba6:	87 2b       	or	r24, r23
    4ba8:	76 2f       	mov	r23, r22
    4baa:	65 2f       	mov	r22, r21
    4bac:	54 2f       	mov	r21, r20
    4bae:	43 2f       	mov	r20, r19
    4bb0:	32 2f       	mov	r19, r18
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
    4bb4:	b1 f3       	breq	.-20     	; 0x4ba2 <__fp_di2sf+0x2c>
    4bb6:	12 16       	cp	r1, r18
    4bb8:	13 06       	cpc	r1, r19
    4bba:	14 06       	cpc	r1, r20
    4bbc:	44 0b       	sbc	r20, r20
    4bbe:	88 23       	and	r24, r24
    4bc0:	3a f0       	brmi	.+14     	; 0x4bd0 <__fp_di2sf+0x5a>
    4bc2:	9a 95       	dec	r25
    4bc4:	44 0f       	add	r20, r20
    4bc6:	55 1f       	adc	r21, r21
    4bc8:	66 1f       	adc	r22, r22
    4bca:	77 1f       	adc	r23, r23
    4bcc:	88 1f       	adc	r24, r24
    4bce:	ca f7       	brpl	.-14     	; 0x4bc2 <__fp_di2sf+0x4c>
    4bd0:	55 23       	and	r21, r21
    4bd2:	4a f4       	brpl	.+18     	; 0x4be6 <__fp_di2sf+0x70>
    4bd4:	44 0f       	add	r20, r20
    4bd6:	55 1f       	adc	r21, r21
    4bd8:	11 f4       	brne	.+4      	; 0x4bde <__fp_di2sf+0x68>
    4bda:	60 ff       	sbrs	r22, 0
    4bdc:	04 c0       	rjmp	.+8      	; 0x4be6 <__fp_di2sf+0x70>
    4bde:	6f 5f       	subi	r22, 0xFF	; 255
    4be0:	7f 4f       	sbci	r23, 0xFF	; 255
    4be2:	8f 4f       	sbci	r24, 0xFF	; 255
    4be4:	9f 4f       	sbci	r25, 0xFF	; 255
    4be6:	88 0f       	add	r24, r24
    4be8:	96 95       	lsr	r25
    4bea:	87 95       	ror	r24
    4bec:	97 f9       	bld	r25, 7
    4bee:	08 95       	ret

00004bf0 <__fp_cmp>:
__fp_cmp():
    4bf0:	99 0f       	add	r25, r25
    4bf2:	00 08       	sbc	r0, r0
    4bf4:	55 0f       	add	r21, r21
    4bf6:	aa 0b       	sbc	r26, r26
    4bf8:	e0 e8       	ldi	r30, 0x80	; 128
    4bfa:	fe ef       	ldi	r31, 0xFE	; 254
    4bfc:	16 16       	cp	r1, r22
    4bfe:	17 06       	cpc	r1, r23
    4c00:	e8 07       	cpc	r30, r24
    4c02:	f9 07       	cpc	r31, r25
    4c04:	c0 f0       	brcs	.+48     	; 0x4c36 <__fp_cmp+0x46>
    4c06:	12 16       	cp	r1, r18
    4c08:	13 06       	cpc	r1, r19
    4c0a:	e4 07       	cpc	r30, r20
    4c0c:	f5 07       	cpc	r31, r21
    4c0e:	98 f0       	brcs	.+38     	; 0x4c36 <__fp_cmp+0x46>
    4c10:	62 1b       	sub	r22, r18
    4c12:	73 0b       	sbc	r23, r19
    4c14:	84 0b       	sbc	r24, r20
    4c16:	95 0b       	sbc	r25, r21
    4c18:	39 f4       	brne	.+14     	; 0x4c28 <__fp_cmp+0x38>
    4c1a:	0a 26       	eor	r0, r26
    4c1c:	61 f0       	breq	.+24     	; 0x4c36 <__fp_cmp+0x46>
    4c1e:	23 2b       	or	r18, r19
    4c20:	24 2b       	or	r18, r20
    4c22:	25 2b       	or	r18, r21
    4c24:	21 f4       	brne	.+8      	; 0x4c2e <__fp_cmp+0x3e>
    4c26:	08 95       	ret
    4c28:	0a 26       	eor	r0, r26
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <__fp_cmp+0x3e>
    4c2c:	a1 40       	sbci	r26, 0x01	; 1
    4c2e:	a6 95       	lsr	r26
    4c30:	8f ef       	ldi	r24, 0xFF	; 255
    4c32:	81 1d       	adc	r24, r1
    4c34:	81 1d       	adc	r24, r1
    4c36:	08 95       	ret

00004c38 <__fp_inf>:
__fp_inf():
    4c38:	97 f9       	bld	r25, 7
    4c3a:	9f 67       	ori	r25, 0x7F	; 127
    4c3c:	80 e8       	ldi	r24, 0x80	; 128
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	08 95       	ret

00004c44 <__fp_nan>:
__fp_nan():
    4c44:	9f ef       	ldi	r25, 0xFF	; 255
    4c46:	80 ec       	ldi	r24, 0xC0	; 192
    4c48:	08 95       	ret

00004c4a <__fp_negdi>:
__fp_negdi():
    4c4a:	90 95       	com	r25
    4c4c:	80 95       	com	r24
    4c4e:	70 95       	com	r23
    4c50:	60 95       	com	r22
    4c52:	50 95       	com	r21
    4c54:	40 95       	com	r20
    4c56:	30 95       	com	r19
    4c58:	21 95       	neg	r18
    4c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    4c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c60:	6f 4f       	sbci	r22, 0xFF	; 255
    4c62:	7f 4f       	sbci	r23, 0xFF	; 255
    4c64:	8f 4f       	sbci	r24, 0xFF	; 255
    4c66:	9f 4f       	sbci	r25, 0xFF	; 255
    4c68:	08 95       	ret

00004c6a <__fp_pscA>:
__fp_pscA():
    4c6a:	00 24       	eor	r0, r0
    4c6c:	0a 94       	dec	r0
    4c6e:	16 16       	cp	r1, r22
    4c70:	17 06       	cpc	r1, r23
    4c72:	18 06       	cpc	r1, r24
    4c74:	09 06       	cpc	r0, r25
    4c76:	08 95       	ret

00004c78 <__fp_pscB>:
__fp_pscB():
    4c78:	00 24       	eor	r0, r0
    4c7a:	0a 94       	dec	r0
    4c7c:	12 16       	cp	r1, r18
    4c7e:	13 06       	cpc	r1, r19
    4c80:	14 06       	cpc	r1, r20
    4c82:	05 06       	cpc	r0, r21
    4c84:	08 95       	ret

00004c86 <__fp_round>:
__fp_round():
    4c86:	09 2e       	mov	r0, r25
    4c88:	03 94       	inc	r0
    4c8a:	00 0c       	add	r0, r0
    4c8c:	11 f4       	brne	.+4      	; 0x4c92 <__fp_round+0xc>
    4c8e:	88 23       	and	r24, r24
    4c90:	52 f0       	brmi	.+20     	; 0x4ca6 <__fp_round+0x20>
    4c92:	bb 0f       	add	r27, r27
    4c94:	40 f4       	brcc	.+16     	; 0x4ca6 <__fp_round+0x20>
    4c96:	bf 2b       	or	r27, r31
    4c98:	11 f4       	brne	.+4      	; 0x4c9e <__fp_round+0x18>
    4c9a:	60 ff       	sbrs	r22, 0
    4c9c:	04 c0       	rjmp	.+8      	; 0x4ca6 <__fp_round+0x20>
    4c9e:	6f 5f       	subi	r22, 0xFF	; 255
    4ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca6:	08 95       	ret

00004ca8 <__fp_split3>:
__fp_split3():
    4ca8:	57 fd       	sbrc	r21, 7
    4caa:	90 58       	subi	r25, 0x80	; 128
    4cac:	44 0f       	add	r20, r20
    4cae:	55 1f       	adc	r21, r21
    4cb0:	59 f0       	breq	.+22     	; 0x4cc8 <__fp_splitA+0x10>
    4cb2:	5f 3f       	cpi	r21, 0xFF	; 255
    4cb4:	71 f0       	breq	.+28     	; 0x4cd2 <__fp_splitA+0x1a>
    4cb6:	47 95       	ror	r20

00004cb8 <__fp_splitA>:
    4cb8:	88 0f       	add	r24, r24
    4cba:	97 fb       	bst	r25, 7
    4cbc:	99 1f       	adc	r25, r25
    4cbe:	61 f0       	breq	.+24     	; 0x4cd8 <__fp_splitA+0x20>
    4cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    4cc2:	79 f0       	breq	.+30     	; 0x4ce2 <__fp_splitA+0x2a>
    4cc4:	87 95       	ror	r24
    4cc6:	08 95       	ret
    4cc8:	12 16       	cp	r1, r18
    4cca:	13 06       	cpc	r1, r19
    4ccc:	14 06       	cpc	r1, r20
    4cce:	55 1f       	adc	r21, r21
    4cd0:	f2 cf       	rjmp	.-28     	; 0x4cb6 <__fp_split3+0xe>
    4cd2:	46 95       	lsr	r20
    4cd4:	f1 df       	rcall	.-30     	; 0x4cb8 <__fp_splitA>
    4cd6:	08 c0       	rjmp	.+16     	; 0x4ce8 <__fp_splitA+0x30>
    4cd8:	16 16       	cp	r1, r22
    4cda:	17 06       	cpc	r1, r23
    4cdc:	18 06       	cpc	r1, r24
    4cde:	99 1f       	adc	r25, r25
    4ce0:	f1 cf       	rjmp	.-30     	; 0x4cc4 <__fp_splitA+0xc>
    4ce2:	86 95       	lsr	r24
    4ce4:	71 05       	cpc	r23, r1
    4ce6:	61 05       	cpc	r22, r1
    4ce8:	08 94       	sec
    4cea:	08 95       	ret

00004cec <__fp_zero>:
__fp_zero():
    4cec:	e8 94       	clt

00004cee <__fp_szero>:
    4cee:	bb 27       	eor	r27, r27
    4cf0:	66 27       	eor	r22, r22
    4cf2:	77 27       	eor	r23, r23
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	97 f9       	bld	r25, 7
    4cf8:	08 95       	ret

00004cfa <__gesf2>:
__gesf2():
    4cfa:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <__fp_cmp>
    4cfe:	08 f4       	brcc	.+2      	; 0x4d02 <__gesf2+0x8>
    4d00:	8f ef       	ldi	r24, 0xFF	; 255
    4d02:	08 95       	ret

00004d04 <__mulsf3>:
__mulsf3():
    4d04:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3x>
    4d08:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__fp_round>
    4d0c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__fp_pscA>
    4d10:	38 f0       	brcs	.+14     	; 0x4d20 <__mulsf3+0x1c>
    4d12:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__fp_pscB>
    4d16:	20 f0       	brcs	.+8      	; 0x4d20 <__mulsf3+0x1c>
    4d18:	95 23       	and	r25, r21
    4d1a:	11 f0       	breq	.+4      	; 0x4d20 <__mulsf3+0x1c>
    4d1c:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__fp_inf>
    4d20:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__fp_nan>
    4d24:	11 24       	eor	r1, r1
    4d26:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__fp_szero>

00004d2a <__mulsf3x>:
__mulsf3x():
    4d2a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__fp_split3>
    4d2e:	70 f3       	brcs	.-36     	; 0x4d0c <__mulsf3+0x8>

00004d30 <__mulsf3_pse>:
    4d30:	95 9f       	mul	r25, r21
    4d32:	c1 f3       	breq	.-16     	; 0x4d24 <__mulsf3+0x20>
    4d34:	95 0f       	add	r25, r21
    4d36:	50 e0       	ldi	r21, 0x00	; 0
    4d38:	55 1f       	adc	r21, r21
    4d3a:	62 9f       	mul	r22, r18
    4d3c:	f0 01       	movw	r30, r0
    4d3e:	72 9f       	mul	r23, r18
    4d40:	bb 27       	eor	r27, r27
    4d42:	f0 0d       	add	r31, r0
    4d44:	b1 1d       	adc	r27, r1
    4d46:	63 9f       	mul	r22, r19
    4d48:	aa 27       	eor	r26, r26
    4d4a:	f0 0d       	add	r31, r0
    4d4c:	b1 1d       	adc	r27, r1
    4d4e:	aa 1f       	adc	r26, r26
    4d50:	64 9f       	mul	r22, r20
    4d52:	66 27       	eor	r22, r22
    4d54:	b0 0d       	add	r27, r0
    4d56:	a1 1d       	adc	r26, r1
    4d58:	66 1f       	adc	r22, r22
    4d5a:	82 9f       	mul	r24, r18
    4d5c:	22 27       	eor	r18, r18
    4d5e:	b0 0d       	add	r27, r0
    4d60:	a1 1d       	adc	r26, r1
    4d62:	62 1f       	adc	r22, r18
    4d64:	73 9f       	mul	r23, r19
    4d66:	b0 0d       	add	r27, r0
    4d68:	a1 1d       	adc	r26, r1
    4d6a:	62 1f       	adc	r22, r18
    4d6c:	83 9f       	mul	r24, r19
    4d6e:	a0 0d       	add	r26, r0
    4d70:	61 1d       	adc	r22, r1
    4d72:	22 1f       	adc	r18, r18
    4d74:	74 9f       	mul	r23, r20
    4d76:	33 27       	eor	r19, r19
    4d78:	a0 0d       	add	r26, r0
    4d7a:	61 1d       	adc	r22, r1
    4d7c:	23 1f       	adc	r18, r19
    4d7e:	84 9f       	mul	r24, r20
    4d80:	60 0d       	add	r22, r0
    4d82:	21 1d       	adc	r18, r1
    4d84:	82 2f       	mov	r24, r18
    4d86:	76 2f       	mov	r23, r22
    4d88:	6a 2f       	mov	r22, r26
    4d8a:	11 24       	eor	r1, r1
    4d8c:	9f 57       	subi	r25, 0x7F	; 127
    4d8e:	50 40       	sbci	r21, 0x00	; 0
    4d90:	9a f0       	brmi	.+38     	; 0x4db8 <__mulsf3_pse+0x88>
    4d92:	f1 f0       	breq	.+60     	; 0x4dd0 <__mulsf3_pse+0xa0>
    4d94:	88 23       	and	r24, r24
    4d96:	4a f0       	brmi	.+18     	; 0x4daa <__mulsf3_pse+0x7a>
    4d98:	ee 0f       	add	r30, r30
    4d9a:	ff 1f       	adc	r31, r31
    4d9c:	bb 1f       	adc	r27, r27
    4d9e:	66 1f       	adc	r22, r22
    4da0:	77 1f       	adc	r23, r23
    4da2:	88 1f       	adc	r24, r24
    4da4:	91 50       	subi	r25, 0x01	; 1
    4da6:	50 40       	sbci	r21, 0x00	; 0
    4da8:	a9 f7       	brne	.-22     	; 0x4d94 <__mulsf3_pse+0x64>
    4daa:	9e 3f       	cpi	r25, 0xFE	; 254
    4dac:	51 05       	cpc	r21, r1
    4dae:	80 f0       	brcs	.+32     	; 0x4dd0 <__mulsf3_pse+0xa0>
    4db0:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__fp_inf>
    4db4:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__fp_szero>
    4db8:	5f 3f       	cpi	r21, 0xFF	; 255
    4dba:	e4 f3       	brlt	.-8      	; 0x4db4 <__mulsf3_pse+0x84>
    4dbc:	98 3e       	cpi	r25, 0xE8	; 232
    4dbe:	d4 f3       	brlt	.-12     	; 0x4db4 <__mulsf3_pse+0x84>
    4dc0:	86 95       	lsr	r24
    4dc2:	77 95       	ror	r23
    4dc4:	67 95       	ror	r22
    4dc6:	b7 95       	ror	r27
    4dc8:	f7 95       	ror	r31
    4dca:	e7 95       	ror	r30
    4dcc:	9f 5f       	subi	r25, 0xFF	; 255
    4dce:	c1 f7       	brne	.-16     	; 0x4dc0 <__mulsf3_pse+0x90>
    4dd0:	fe 2b       	or	r31, r30
    4dd2:	88 0f       	add	r24, r24
    4dd4:	91 1d       	adc	r25, r1
    4dd6:	96 95       	lsr	r25
    4dd8:	87 95       	ror	r24
    4dda:	97 f9       	bld	r25, 7
    4ddc:	08 95       	ret
    4dde:	19 f4       	brne	.+6      	; 0x4de6 <__mulsf3_pse+0xb6>
    4de0:	16 f4       	brtc	.+4      	; 0x4de6 <__mulsf3_pse+0xb6>
    4de2:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__fp_nan>
    4de6:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__fp_mpack>

00004dea <sqrt>:
    4dea:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__fp_splitA>
    4dee:	b8 f3       	brcs	.-18     	; 0x4dde <__mulsf3_pse+0xae>
    4df0:	99 23       	and	r25, r25
    4df2:	c9 f3       	breq	.-14     	; 0x4de6 <__mulsf3_pse+0xb6>
    4df4:	b6 f3       	brts	.-20     	; 0x4de2 <__mulsf3_pse+0xb2>
    4df6:	9f 57       	subi	r25, 0x7F	; 127
    4df8:	55 0b       	sbc	r21, r21
    4dfa:	87 ff       	sbrs	r24, 7
sqrt():
    4dfc:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__fp_norm2>
    4e00:	00 24       	eor	r0, r0
    4e02:	a0 e6       	ldi	r26, 0x60	; 96
    4e04:	40 ea       	ldi	r20, 0xA0	; 160
    4e06:	90 01       	movw	r18, r0
    4e08:	80 58       	subi	r24, 0x80	; 128
    4e0a:	56 95       	lsr	r21
    4e0c:	97 95       	ror	r25
    4e0e:	28 f4       	brcc	.+10     	; 0x4e1a <sqrt+0x30>
    4e10:	80 5c       	subi	r24, 0xC0	; 192
    4e12:	66 0f       	add	r22, r22
    4e14:	77 1f       	adc	r23, r23
    4e16:	88 1f       	adc	r24, r24
    4e18:	20 f0       	brcs	.+8      	; 0x4e22 <sqrt+0x38>
    4e1a:	26 17       	cp	r18, r22
    4e1c:	37 07       	cpc	r19, r23
    4e1e:	48 07       	cpc	r20, r24
    4e20:	30 f4       	brcc	.+12     	; 0x4e2e <sqrt+0x44>
    4e22:	62 1b       	sub	r22, r18
    4e24:	73 0b       	sbc	r23, r19
    4e26:	84 0b       	sbc	r24, r20
    4e28:	20 29       	or	r18, r0
    4e2a:	31 29       	or	r19, r1
    4e2c:	4a 2b       	or	r20, r26
    4e2e:	a6 95       	lsr	r26
    4e30:	17 94       	ror	r1
    4e32:	07 94       	ror	r0
    4e34:	20 25       	eor	r18, r0
    4e36:	31 25       	eor	r19, r1
    4e38:	4a 27       	eor	r20, r26
    4e3a:	58 f7       	brcc	.-42     	; 0x4e12 <sqrt+0x28>
    4e3c:	66 0f       	add	r22, r22
    4e3e:	77 1f       	adc	r23, r23
    4e40:	88 1f       	adc	r24, r24
    4e42:	20 f0       	brcs	.+8      	; 0x4e4c <sqrt+0x62>
    4e44:	26 17       	cp	r18, r22
    4e46:	37 07       	cpc	r19, r23
    4e48:	48 07       	cpc	r20, r24
    4e4a:	30 f4       	brcc	.+12     	; 0x4e58 <sqrt+0x6e>
    4e4c:	62 0b       	sbc	r22, r18
    4e4e:	73 0b       	sbc	r23, r19
    4e50:	84 0b       	sbc	r24, r20
    4e52:	20 0d       	add	r18, r0
    4e54:	31 1d       	adc	r19, r1
    4e56:	41 1d       	adc	r20, r1
    4e58:	a0 95       	com	r26
    4e5a:	81 f7       	brne	.-32     	; 0x4e3c <sqrt+0x52>
    4e5c:	b9 01       	movw	r22, r18
    4e5e:	84 2f       	mov	r24, r20
    4e60:	91 58       	subi	r25, 0x81	; 129
    4e62:	88 0f       	add	r24, r24
    4e64:	96 95       	lsr	r25
    4e66:	87 95       	ror	r24
    4e68:	08 95       	ret

00004e6a <__fp_mpack>:
    4e6a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e6c:	31 f0       	breq	.+12     	; 0x4e7a <__fp_mpack_finite+0xc>

00004e6e <__fp_mpack_finite>:
    4e6e:	91 50       	subi	r25, 0x01	; 1
    4e70:	20 f4       	brcc	.+8      	; 0x4e7a <__fp_mpack_finite+0xc>
    4e72:	87 95       	ror	r24
    4e74:	77 95       	ror	r23
__fp_mpack_finite():
    4e76:	67 95       	ror	r22
    4e78:	b7 95       	ror	r27
    4e7a:	88 0f       	add	r24, r24
    4e7c:	91 1d       	adc	r25, r1
    4e7e:	96 95       	lsr	r25
    4e80:	87 95       	ror	r24
    4e82:	97 f9       	bld	r25, 7
    4e84:	08 95       	ret

00004e86 <__fp_norm2>:
__fp_norm2():
    4e86:	91 50       	subi	r25, 0x01	; 1
    4e88:	50 40       	sbci	r21, 0x00	; 0
    4e8a:	66 0f       	add	r22, r22
    4e8c:	77 1f       	adc	r23, r23
    4e8e:	88 1f       	adc	r24, r24
    4e90:	d2 f7       	brpl	.-12     	; 0x4e86 <__fp_norm2>
    4e92:	08 95       	ret

00004e94 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4e94:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4e96:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4e98:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4e9a:	07 c0       	rjmp	.+14     	; 0x4eaa <__udivmodhi4_ep>

00004e9c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4e9c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4e9e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4ea0:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4ea2:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4ea4:	10 f0       	brcs	.+4      	; 0x4eaa <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4ea6:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4ea8:	b7 0b       	sbc	r27, r23

00004eaa <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4eaa:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4eac:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4eae:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4eb0:	a9 f7       	brne	.-22     	; 0x4e9c <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4eb2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4eb4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4eb6:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4eb8:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4eba:	08 95       	ret

00004ebc <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4ebc:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4ebe:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4ec0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4ec2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4ec4:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4ec6:	0d c0       	rjmp	.+26     	; 0x4ee2 <__udivmodsi4_ep>

00004ec8 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4ec8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4eca:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4ecc:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4ece:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4ed0:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4ed2:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4ed4:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4ed6:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4ed8:	20 f0       	brcs	.+8      	; 0x4ee2 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4eda:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4edc:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4ede:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4ee0:	f5 0b       	sbc	r31, r21

00004ee2 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4ee2:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4ee4:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4ee6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4ee8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4eea:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4eec:	69 f7       	brne	.-38     	; 0x4ec8 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4eee:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4ef0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4ef2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4ef4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4ef6:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4ef8:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4efa:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4efc:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4efe:	08 95       	ret

00004f00 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4f00:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4f02:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    4f04:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    4f06:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4f08:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4f0a:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    4f0c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    4f0e:	19 94       	eijmp

00004f10 <__moddi3>:
__moddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1964
    4f10:	68 94       	set
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1965
    4f12:	01 c0       	rjmp	.+2      	; 0x4f16 <__divdi3_moddi3>

00004f14 <__divdi3>:
__divdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1972
    4f14:	e8 94       	clt

00004f16 <__divdi3_moddi3>:
__divdi3_moddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1977
    4f16:	f9 2f       	mov	r31, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1978
    4f18:	f1 2b       	or	r31, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1979
    4f1a:	12 f0       	brmi	.+4      	; 0x4f20 <__divdi3_moddi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1981
    4f1c:	0c 94 bc 27 	jmp	0x4f78	; 0x4f78 <__udivdi3_umoddi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1987
    4f20:	a0 e0       	ldi	r26, 0x00	; 0
    4f22:	b0 e0       	ldi	r27, 0x00	; 0
    4f24:	e6 e9       	ldi	r30, 0x96	; 150
    4f26:	f7 e2       	ldi	r31, 0x27	; 39
    4f28:	0c 94 2e 28 	jmp	0x505c	; 0x505c <__prologue_saves__+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1991
    4f2c:	09 2e       	mov	r0, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1992
    4f2e:	05 94       	asr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1997
    4f30:	22 f4       	brpl	.+8      	; 0x4f3a <__divdi3_moddi3+0x24>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2002
    4f32:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2005
    4f36:	11 23       	and	r17, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2006
    4f38:	92 f4       	brpl	.+36     	; 0x4f5e <__divdi3_moddi3+0x48>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2007
    4f3a:	f0 e8       	ldi	r31, 0x80	; 128
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2008
    4f3c:	0f 26       	eor	r0, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2010
    4f3e:	ff ef       	ldi	r31, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2011
    4f40:	e0 94       	com	r14
    4f42:	f0 94       	com	r15
    4f44:	00 95       	com	r16
    4f46:	10 95       	com	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2012
    4f48:	b0 94       	com	r11
    4f4a:	c0 94       	com	r12
    4f4c:	d0 94       	com	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2013
    4f4e:	a1 94       	neg	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2014
    4f50:	bf 0a       	sbc	r11, r31
    4f52:	cf 0a       	sbc	r12, r31
    4f54:	df 0a       	sbc	r13, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2015
    4f56:	ef 0a       	sbc	r14, r31
    4f58:	ff 0a       	sbc	r15, r31
    4f5a:	0f 0b       	sbc	r16, r31
    4f5c:	1f 0b       	sbc	r17, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2018
    4f5e:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__udivmod64>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2025
    4f62:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2027
    4f64:	0e 94 18 28 	call	0x5030	; 0x5030 <__negdi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2030
    4f68:	cd b7       	in	r28, 0x3d	; 61
    4f6a:	de b7       	in	r29, 0x3e	; 62
    4f6c:	ec e0       	ldi	r30, 0x0C	; 12
    4f6e:	0c 94 4a 28 	jmp	0x5094	; 0x5094 <__epilogue_restores__+0xc>

00004f72 <__umoddi3>:
__umoddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1806
    4f72:	68 94       	set
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1807
    4f74:	01 c0       	rjmp	.+2      	; 0x4f78 <__udivdi3_umoddi3>

00004f76 <__udivdi3>:
__udivdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1814
    4f76:	e8 94       	clt

00004f78 <__udivdi3_umoddi3>:
__udivdi3_umoddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1818
    4f78:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1819
    4f7a:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1820
    4f7c:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1821
    4f7e:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1822
    4f80:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__udivmod64>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1823
    4f84:	df 91       	pop	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1824
    4f86:	cf 91       	pop	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1825
    4f88:	9f 90       	pop	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1826
    4f8a:	8f 90       	pop	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1827
    4f8c:	08 95       	ret

00004f8e <__udivmod64>:
__udivmod64():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1842
    4f8e:	88 24       	eor	r8, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1843
    4f90:	99 24       	eor	r9, r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1844
    4f92:	f4 01       	movw	r30, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1845
    4f94:	e4 01       	movw	r28, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1846
    4f96:	b0 e4       	ldi	r27, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1856
    4f98:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1857
    4f9a:	aa 27       	eor	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1861
    4f9c:	9a 15       	cp	r25, r10
    4f9e:	8b 04       	cpc	r8, r11
    4fa0:	9c 04       	cpc	r9, r12
    4fa2:	ed 05       	cpc	r30, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1862
    4fa4:	fe 05       	cpc	r31, r14
    4fa6:	cf 05       	cpc	r28, r15
    4fa8:	d0 07       	cpc	r29, r16
    4faa:	a1 07       	cpc	r26, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1863
    4fac:	98 f4       	brcc	.+38     	; 0x4fd4 <__udivmod64+0x46>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1866
    4fae:	ad 2f       	mov	r26, r29
    4fb0:	dc 2f       	mov	r29, r28
    4fb2:	cf 2f       	mov	r28, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1867
    4fb4:	fe 2f       	mov	r31, r30
    4fb6:	e9 2d       	mov	r30, r9
    4fb8:	98 2c       	mov	r9, r8
    4fba:	89 2e       	mov	r8, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1868
    4fbc:	98 2f       	mov	r25, r24
    4fbe:	87 2f       	mov	r24, r23
    4fc0:	76 2f       	mov	r23, r22
    4fc2:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1869
    4fc4:	54 2f       	mov	r21, r20
    4fc6:	43 2f       	mov	r20, r19
    4fc8:	32 2f       	mov	r19, r18
    4fca:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1872
    4fcc:	b8 50       	subi	r27, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1873
    4fce:	31 f7       	brne	.-52     	; 0x4f9c <__udivmod64+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1876
    4fd0:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1881
    4fd2:	27 c0       	rjmp	.+78     	; 0x5022 <__udivmod64+0x94>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1884
    4fd4:	1b 2e       	mov	r1, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1887
    4fd6:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1888
    4fd8:	bb 27       	eor	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1916
    4fda:	22 0f       	add	r18, r18
    4fdc:	33 1f       	adc	r19, r19
    4fde:	44 1f       	adc	r20, r20
    4fe0:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1917
    4fe2:	66 1f       	adc	r22, r22
    4fe4:	77 1f       	adc	r23, r23
    4fe6:	88 1f       	adc	r24, r24
    4fe8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1920
    4fea:	88 1c       	adc	r8, r8
    4fec:	99 1c       	adc	r9, r9
    4fee:	ee 1f       	adc	r30, r30
    4ff0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1921
    4ff2:	cc 1f       	adc	r28, r28
    4ff4:	dd 1f       	adc	r29, r29
    4ff6:	aa 1f       	adc	r26, r26
    4ff8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1924
    4ffa:	8a 14       	cp	r8, r10
    4ffc:	9b 04       	cpc	r9, r11
    4ffe:	ec 05       	cpc	r30, r12
    5000:	fd 05       	cpc	r31, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1925
    5002:	ce 05       	cpc	r28, r14
    5004:	df 05       	cpc	r29, r15
    5006:	a0 07       	cpc	r26, r16
    5008:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1927
    500a:	48 f0       	brcs	.+18     	; 0x501e <__udivmod64+0x90>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1930
    500c:	8a 18       	sub	r8, r10
    500e:	9b 08       	sbc	r9, r11
    5010:	ec 09       	sbc	r30, r12
    5012:	fd 09       	sbc	r31, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1931
    5014:	ce 09       	sbc	r28, r14
    5016:	df 09       	sbc	r29, r15
    5018:	a0 0b       	sbc	r26, r16
    501a:	b1 0b       	sbc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1935
    501c:	21 60       	ori	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1938
    501e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1939
    5020:	e1 f6       	brne	.-72     	; 0x4fda <__udivmod64+0x4c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1944
    5022:	2e f4       	brtc	.+10     	; 0x502e <__udivmod64+0xa0>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1945
    5024:	94 01       	movw	r18, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1946
    5026:	af 01       	movw	r20, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1947
    5028:	be 01       	movw	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1948
    502a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1950
    502c:	00 0c       	add	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1952
    502e:	08 95       	ret

00005030 <__negdi2>:
__negdi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2117
    5030:	60 95       	com	r22
    5032:	70 95       	com	r23
    5034:	80 95       	com	r24
    5036:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2118
    5038:	30 95       	com	r19
    503a:	40 95       	com	r20
    503c:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2119
    503e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2120
    5040:	3f 4f       	sbci	r19, 0xFF	; 255
    5042:	4f 4f       	sbci	r20, 0xFF	; 255
    5044:	5f 4f       	sbci	r21, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2121
    5046:	6f 4f       	sbci	r22, 0xFF	; 255
    5048:	7f 4f       	sbci	r23, 0xFF	; 255
    504a:	8f 4f       	sbci	r24, 0xFF	; 255
    504c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2122
    504e:	08 95       	ret

00005050 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    5050:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    5052:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    5054:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    5056:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    5058:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    505a:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    505c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    505e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    5060:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    5062:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    5064:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    5066:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    5068:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    506a:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    506c:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    506e:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    5070:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    5072:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    5074:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    5076:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    5078:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    507a:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    507c:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    507e:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    5080:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    5082:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    5084:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    5086:	19 94       	eijmp

00005088 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    5088:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    508a:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    508c:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    508e:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    5090:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    5092:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    5094:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    5096:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    5098:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    509a:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    509c:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    509e:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    50a0:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    50a2:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    50a4:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    50a6:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    50a8:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    50aa:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    50ac:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    50ae:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    50b0:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    50b2:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    50b4:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    50b6:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    50b8:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    50ba:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    50bc:	08 95       	ret

000050be <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    50be:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    50c0:	10 94       	com	r1

000050c2 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    50c2:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    50c4:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    50c6:	98 f0       	brcs	.+38     	; 0x50ee <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    50c8:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    50ca:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    50cc:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    50ce:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    50d0:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    50d2:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    50d4:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    50d6:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    50d8:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    50da:	f4 cf       	rjmp	.-24     	; 0x50c4 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    50dc:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    50de:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    50e0:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    50e2:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    50e4:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    50e6:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    50e8:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    50ea:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    50ec:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    50ee:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    50f0:	aa f7       	brpl	.-22     	; 0x50dc <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    50f2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    50f4:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    50f6:	08 95       	ret

000050f8 <__adddi3>:
__adddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2051
    50f8:	2a 0d       	add	r18, r10
    50fa:	3b 1d       	adc	r19, r11
    50fc:	4c 1d       	adc	r20, r12
    50fe:	5d 1d       	adc	r21, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2052
    5100:	6e 1d       	adc	r22, r14
    5102:	7f 1d       	adc	r23, r15
    5104:	80 1f       	adc	r24, r16
    5106:	91 1f       	adc	r25, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2053
    5108:	08 95       	ret

0000510a <__adddi3_s8>:
__adddi3_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2064
    510a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2065
    510c:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2066
    510e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2067
    5110:	2a 0f       	add	r18, r26
    5112:	30 1d       	adc	r19, r0
    5114:	40 1d       	adc	r20, r0
    5116:	50 1d       	adc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2068
    5118:	60 1d       	adc	r22, r0
    511a:	70 1d       	adc	r23, r0
    511c:	80 1d       	adc	r24, r0
    511e:	90 1d       	adc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2069
    5120:	08 95       	ret

00005122 <__cmpdi2_s8>:
__cmpdi2_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    5122:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    5124:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    5126:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    5128:	2a 17       	cp	r18, r26
    512a:	30 05       	cpc	r19, r0
    512c:	40 05       	cpc	r20, r0
    512e:	50 05       	cpc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    5130:	60 05       	cpc	r22, r0
    5132:	70 05       	cpc	r23, r0
    5134:	80 05       	cpc	r24, r0
    5136:	90 05       	cpc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    5138:	08 95       	ret

0000513a <malloc>:
malloc():
    513a:	0f 93       	push	r16
    513c:	1f 93       	push	r17
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	82 30       	cpi	r24, 0x02	; 2
    5144:	91 05       	cpc	r25, r1
    5146:	10 f4       	brcc	.+4      	; 0x514c <malloc+0x12>
    5148:	82 e0       	ldi	r24, 0x02	; 2
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <__flp>
    5150:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <__flp+0x1>
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	b0 e0       	ldi	r27, 0x00	; 0
    515a:	a0 e0       	ldi	r26, 0x00	; 0
    515c:	30 97       	sbiw	r30, 0x00	; 0
    515e:	99 f4       	brne	.+38     	; 0x5186 <malloc+0x4c>
    5160:	21 15       	cp	r18, r1
    5162:	31 05       	cpc	r19, r1
    5164:	09 f4       	brne	.+2      	; 0x5168 <malloc+0x2e>
    5166:	4a c0       	rjmp	.+148    	; 0x51fc <malloc+0xc2>
    5168:	28 1b       	sub	r18, r24
    516a:	39 0b       	sbc	r19, r25
    516c:	24 30       	cpi	r18, 0x04	; 4
    516e:	31 05       	cpc	r19, r1
    5170:	d8 f5       	brcc	.+118    	; 0x51e8 <malloc+0xae>
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	9b 81       	ldd	r25, Y+3	; 0x03
    5176:	61 15       	cp	r22, r1
    5178:	71 05       	cpc	r23, r1
    517a:	89 f1       	breq	.+98     	; 0x51de <malloc+0xa4>
    517c:	fb 01       	movw	r30, r22
    517e:	93 83       	std	Z+3, r25	; 0x03
    5180:	82 83       	std	Z+2, r24	; 0x02
    5182:	fe 01       	movw	r30, r28
    5184:	11 c0       	rjmp	.+34     	; 0x51a8 <malloc+0x6e>
    5186:	40 81       	ld	r20, Z
    5188:	51 81       	ldd	r21, Z+1	; 0x01
    518a:	02 81       	ldd	r16, Z+2	; 0x02
    518c:	13 81       	ldd	r17, Z+3	; 0x03
    518e:	48 17       	cp	r20, r24
    5190:	59 07       	cpc	r21, r25
    5192:	e0 f0       	brcs	.+56     	; 0x51cc <malloc+0x92>
    5194:	48 17       	cp	r20, r24
    5196:	59 07       	cpc	r21, r25
    5198:	99 f4       	brne	.+38     	; 0x51c0 <malloc+0x86>
    519a:	10 97       	sbiw	r26, 0x00	; 0
    519c:	61 f0       	breq	.+24     	; 0x51b6 <malloc+0x7c>
    519e:	12 96       	adiw	r26, 0x02	; 2
    51a0:	0c 93       	st	X, r16
    51a2:	12 97       	sbiw	r26, 0x02	; 2
    51a4:	13 96       	adiw	r26, 0x03	; 3
    51a6:	1c 93       	st	X, r17
    51a8:	32 96       	adiw	r30, 0x02	; 2
    51aa:	cf 01       	movw	r24, r30
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	08 95       	ret
    51b6:	00 93 9a 05 	sts	0x059A, r16	; 0x80059a <__flp>
    51ba:	10 93 9b 05 	sts	0x059B, r17	; 0x80059b <__flp+0x1>
    51be:	f4 cf       	rjmp	.-24     	; 0x51a8 <malloc+0x6e>
    51c0:	21 15       	cp	r18, r1
    51c2:	31 05       	cpc	r19, r1
    51c4:	51 f0       	breq	.+20     	; 0x51da <malloc+0xa0>
    51c6:	42 17       	cp	r20, r18
    51c8:	53 07       	cpc	r21, r19
    51ca:	38 f0       	brcs	.+14     	; 0x51da <malloc+0xa0>
    51cc:	a9 01       	movw	r20, r18
    51ce:	db 01       	movw	r26, r22
    51d0:	9a 01       	movw	r18, r20
    51d2:	bd 01       	movw	r22, r26
    51d4:	df 01       	movw	r26, r30
    51d6:	f8 01       	movw	r30, r16
    51d8:	c1 cf       	rjmp	.-126    	; 0x515c <malloc+0x22>
    51da:	ef 01       	movw	r28, r30
    51dc:	f9 cf       	rjmp	.-14     	; 0x51d0 <malloc+0x96>
    51de:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <__flp+0x1>
    51e2:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <__flp>
    51e6:	cd cf       	rjmp	.-102    	; 0x5182 <malloc+0x48>
    51e8:	fe 01       	movw	r30, r28
    51ea:	e2 0f       	add	r30, r18
    51ec:	f3 1f       	adc	r31, r19
    51ee:	81 93       	st	Z+, r24
    51f0:	91 93       	st	Z+, r25
    51f2:	22 50       	subi	r18, 0x02	; 2
    51f4:	31 09       	sbc	r19, r1
    51f6:	39 83       	std	Y+1, r19	; 0x01
    51f8:	28 83       	st	Y, r18
    51fa:	d7 cf       	rjmp	.-82     	; 0x51aa <malloc+0x70>
    51fc:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <__brkval>
    5200:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <__brkval+0x1>
    5204:	23 2b       	or	r18, r19
    5206:	41 f4       	brne	.+16     	; 0x5218 <malloc+0xde>
    5208:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    520c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5210:	30 93 99 05 	sts	0x0599, r19	; 0x800599 <__brkval+0x1>
    5214:	20 93 98 05 	sts	0x0598, r18	; 0x800598 <__brkval>
    5218:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    521c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5220:	21 15       	cp	r18, r1
    5222:	31 05       	cpc	r19, r1
    5224:	41 f4       	brne	.+16     	; 0x5236 <malloc+0xfc>
    5226:	2d b7       	in	r18, 0x3d	; 61
    5228:	3e b7       	in	r19, 0x3e	; 62
    522a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    522e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5232:	24 1b       	sub	r18, r20
    5234:	35 0b       	sbc	r19, r21
    5236:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <__brkval>
    523a:	f0 91 99 05 	lds	r31, 0x0599	; 0x800599 <__brkval+0x1>
    523e:	e2 17       	cp	r30, r18
    5240:	f3 07       	cpc	r31, r19
    5242:	a0 f4       	brcc	.+40     	; 0x526c <malloc+0x132>
    5244:	2e 1b       	sub	r18, r30
    5246:	3f 0b       	sbc	r19, r31
    5248:	28 17       	cp	r18, r24
    524a:	39 07       	cpc	r19, r25
    524c:	78 f0       	brcs	.+30     	; 0x526c <malloc+0x132>
    524e:	ac 01       	movw	r20, r24
    5250:	4e 5f       	subi	r20, 0xFE	; 254
    5252:	5f 4f       	sbci	r21, 0xFF	; 255
    5254:	24 17       	cp	r18, r20
    5256:	35 07       	cpc	r19, r21
    5258:	48 f0       	brcs	.+18     	; 0x526c <malloc+0x132>
    525a:	4e 0f       	add	r20, r30
    525c:	5f 1f       	adc	r21, r31
    525e:	50 93 99 05 	sts	0x0599, r21	; 0x800599 <__brkval+0x1>
    5262:	40 93 98 05 	sts	0x0598, r20	; 0x800598 <__brkval>
    5266:	81 93       	st	Z+, r24
    5268:	91 93       	st	Z+, r25
    526a:	9f cf       	rjmp	.-194    	; 0x51aa <malloc+0x70>
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	e0 e0       	ldi	r30, 0x00	; 0
    5270:	9c cf       	rjmp	.-200    	; 0x51aa <malloc+0x70>

00005272 <free>:
free():
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	e9 f0       	breq	.+58     	; 0x52b4 <free+0x42>
    527a:	fc 01       	movw	r30, r24
    527c:	32 97       	sbiw	r30, 0x02	; 2
    527e:	13 82       	std	Z+3, r1	; 0x03
    5280:	12 82       	std	Z+2, r1	; 0x02
    5282:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <__flp>
    5286:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <__flp+0x1>
    528a:	ed 01       	movw	r28, r26
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	10 97       	sbiw	r26, 0x00	; 0
    5292:	a1 f4       	brne	.+40     	; 0x52bc <free+0x4a>
    5294:	20 81       	ld	r18, Z
    5296:	31 81       	ldd	r19, Z+1	; 0x01
    5298:	82 0f       	add	r24, r18
    529a:	93 1f       	adc	r25, r19
    529c:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <__brkval>
    52a0:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <__brkval+0x1>
    52a4:	28 17       	cp	r18, r24
    52a6:	39 07       	cpc	r19, r25
    52a8:	09 f0       	breq	.+2      	; 0x52ac <free+0x3a>
    52aa:	61 c0       	rjmp	.+194    	; 0x536e <free+0xfc>
    52ac:	f0 93 99 05 	sts	0x0599, r31	; 0x800599 <__brkval+0x1>
    52b0:	e0 93 98 05 	sts	0x0598, r30	; 0x800598 <__brkval>
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	08 95       	ret
    52ba:	ea 01       	movw	r28, r20
    52bc:	ce 17       	cp	r28, r30
    52be:	df 07       	cpc	r29, r31
    52c0:	e8 f5       	brcc	.+122    	; 0x533c <free+0xca>
    52c2:	4a 81       	ldd	r20, Y+2	; 0x02
    52c4:	5b 81       	ldd	r21, Y+3	; 0x03
    52c6:	9e 01       	movw	r18, r28
    52c8:	41 15       	cp	r20, r1
    52ca:	51 05       	cpc	r21, r1
    52cc:	b1 f7       	brne	.-20     	; 0x52ba <free+0x48>
    52ce:	e9 01       	movw	r28, r18
    52d0:	fb 83       	std	Y+3, r31	; 0x03
    52d2:	ea 83       	std	Y+2, r30	; 0x02
    52d4:	49 91       	ld	r20, Y+
    52d6:	59 91       	ld	r21, Y+
    52d8:	c4 0f       	add	r28, r20
    52da:	d5 1f       	adc	r29, r21
    52dc:	ec 17       	cp	r30, r28
    52de:	fd 07       	cpc	r31, r29
    52e0:	61 f4       	brne	.+24     	; 0x52fa <free+0x88>
    52e2:	80 81       	ld	r24, Z
    52e4:	91 81       	ldd	r25, Z+1	; 0x01
    52e6:	02 96       	adiw	r24, 0x02	; 2
    52e8:	84 0f       	add	r24, r20
    52ea:	95 1f       	adc	r25, r21
    52ec:	e9 01       	movw	r28, r18
    52ee:	99 83       	std	Y+1, r25	; 0x01
    52f0:	88 83       	st	Y, r24
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	9b 83       	std	Y+3, r25	; 0x03
    52f8:	8a 83       	std	Y+2, r24	; 0x02
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	e0 e0       	ldi	r30, 0x00	; 0
    52fe:	12 96       	adiw	r26, 0x02	; 2
    5300:	8d 91       	ld	r24, X+
    5302:	9c 91       	ld	r25, X
    5304:	13 97       	sbiw	r26, 0x03	; 3
    5306:	00 97       	sbiw	r24, 0x00	; 0
    5308:	b9 f5       	brne	.+110    	; 0x5378 <free+0x106>
    530a:	2d 91       	ld	r18, X+
    530c:	3c 91       	ld	r19, X
    530e:	11 97       	sbiw	r26, 0x01	; 1
    5310:	cd 01       	movw	r24, r26
    5312:	02 96       	adiw	r24, 0x02	; 2
    5314:	82 0f       	add	r24, r18
    5316:	93 1f       	adc	r25, r19
    5318:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <__brkval>
    531c:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <__brkval+0x1>
    5320:	28 17       	cp	r18, r24
    5322:	39 07       	cpc	r19, r25
    5324:	39 f6       	brne	.-114    	; 0x52b4 <free+0x42>
    5326:	30 97       	sbiw	r30, 0x00	; 0
    5328:	51 f5       	brne	.+84     	; 0x537e <free+0x10c>
    532a:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <__flp+0x1>
    532e:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <__flp>
    5332:	b0 93 99 05 	sts	0x0599, r27	; 0x800599 <__brkval+0x1>
    5336:	a0 93 98 05 	sts	0x0598, r26	; 0x800598 <__brkval>
    533a:	bc cf       	rjmp	.-136    	; 0x52b4 <free+0x42>
    533c:	d3 83       	std	Z+3, r29	; 0x03
    533e:	c2 83       	std	Z+2, r28	; 0x02
    5340:	40 81       	ld	r20, Z
    5342:	51 81       	ldd	r21, Z+1	; 0x01
    5344:	84 0f       	add	r24, r20
    5346:	95 1f       	adc	r25, r21
    5348:	c8 17       	cp	r28, r24
    534a:	d9 07       	cpc	r29, r25
    534c:	61 f4       	brne	.+24     	; 0x5366 <free+0xf4>
    534e:	4e 5f       	subi	r20, 0xFE	; 254
    5350:	5f 4f       	sbci	r21, 0xFF	; 255
    5352:	88 81       	ld	r24, Y
    5354:	99 81       	ldd	r25, Y+1	; 0x01
    5356:	48 0f       	add	r20, r24
    5358:	59 1f       	adc	r21, r25
    535a:	51 83       	std	Z+1, r21	; 0x01
    535c:	40 83       	st	Z, r20
    535e:	8a 81       	ldd	r24, Y+2	; 0x02
    5360:	9b 81       	ldd	r25, Y+3	; 0x03
    5362:	93 83       	std	Z+3, r25	; 0x03
    5364:	82 83       	std	Z+2, r24	; 0x02
    5366:	21 15       	cp	r18, r1
    5368:	31 05       	cpc	r19, r1
    536a:	09 f0       	breq	.+2      	; 0x536e <free+0xfc>
    536c:	b0 cf       	rjmp	.-160    	; 0x52ce <free+0x5c>
    536e:	f0 93 9b 05 	sts	0x059B, r31	; 0x80059b <__flp+0x1>
    5372:	e0 93 9a 05 	sts	0x059A, r30	; 0x80059a <__flp>
    5376:	9e cf       	rjmp	.-196    	; 0x52b4 <free+0x42>
    5378:	fd 01       	movw	r30, r26
    537a:	dc 01       	movw	r26, r24
    537c:	c0 cf       	rjmp	.-128    	; 0x52fe <free+0x8c>
    537e:	13 82       	std	Z+3, r1	; 0x03
    5380:	12 82       	std	Z+2, r1	; 0x02
    5382:	d7 cf       	rjmp	.-82     	; 0x5332 <free+0xc0>

00005384 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    5384:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    5386:	c7 e5       	ldi	r28, 0x57	; 87
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    5388:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
    538a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    538c:	06 c0       	rjmp	.+12     	; 0x539a <__do_global_dtors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
    538e:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    5390:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    5392:	0e 94 80 27 	call	0x4f00	; 0x4f00 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    5396:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
    5398:	01 1d       	adc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    539a:	c8 35       	cpi	r28, 0x58	; 88
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    539c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
    539e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
    53a0:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    53a2:	a9 f7       	brne	.-22     	; 0x538e <__do_global_dtors+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    53a4:	f8 94       	cli

000053a6 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    53a6:	ff cf       	rjmp	.-2      	; 0x53a6 <__stop_program>
